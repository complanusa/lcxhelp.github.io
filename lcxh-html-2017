
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en">

<head>
<title>WinPCS Macro Language Help File</title>
<meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1"/>
<meta name="description" content="WinPCS Macro Language Help File"/>
</head>
<body>

<a name="Top"></a>

<h1>WinPCS Macro Language Help File</h1>

<p>This Help file applies to LCX94.DLL Builds 97.X, and 
liblcx97.so version 1.0</p>

<p>The following main topics are available:</p>

<ul>
<li><a href="#Introduction">Introduction</a> to the language documentation</li>
<li><a href="#Conventions">Conventions</a> in this help file</li>
<li><a href="#Functions.20Reference">Functions Reference:</a>
- <a href="#A"> A </a>
- <a href="#B"> B </a>
- <a href="#C"> C </a>
- <a href="#D"> D </a>
- <a href="#E"> E </a>
- <a href="#F"> F </a>
- <a href="#G"> G </a>
- <a href="#H"> H </a>
- <a href="#I"> I </a>
- <a href="#J"> J </a>
- <a href="#K"> K </a>
- <a href="#L"> L </a>
- <a href="#M"> M </a>
- <a href="#N"> N </a>
- <a href="#O"> O </a>
- <a href="#P"> P </a>
- <a href="#Q"> Q </a>
- <a href="#R"> R </a>
- <a href="#S"> S </a>
- <a href="#T"> T </a>
- <a href="#U"> U </a>
- <a href="#V"> V </a>
- <a href="#W"> W </a>
- <a href="#X"> X </a>
- <a href="#Y"> Y </a>
- <a href="#Z"> Z </a></li>

<li><a href="lcxfault.html">Error Codes Reference</a></li>
<li><a href="dde.html#WinPCS.20as.20a.20DDE.20server"> WinPCS as a DDE server </a> </li>
<li><a href="#Groups">Groups of functions</a> </li>
<li><a href="#Examples">Examples</a></li>
<li><a href="wherecal.html#Where.20WinPCS.20Calls.20Macro.20Functions">
                Where WinPCS Calls Macro Functions </a></li>
<li><a href="#ASCIITABLE">Table of ASCII Codes</a></li>
</ul>

<!-- ================================= -->

<hr/><a name="Introduction"></a>
<h2>Introduction</h2>
<p> Here is the current language documentation, applicable to 
the LCX97.DLL 97.X, and liblcx97.so version 1.0</p>

<p> The WinPCS macro language is called LCX. 
It has become an important part of WinPCS, serving as the `glue` 
that make custom bonds between many of WinPCS's parts; as well as
the design language for the certificates and reports. Many of the 
features of this language are the same as the ones in C, though 
with several simplifications. The most important one is that there 
is only one data type, text strings, which may contain up to 
65535 characters. These strings are treated as 
variables, and assigned; there is no character array copying evident.  </p>

<p> The program files which serve both as source and executable files have 
the .LCX extension and they are normal text files that may contain 
all the printing characters (space, tab, newline, exclamation point, 
ASCII 33 thru tilde, ASCII 126) and consist of lines of text 
terminated with a newline character (ASCII 10).  Carriage return characters 
(ASCII 13) are ignored. </p>

<p> Comments are treated as whitespace. Comments begin with a 
slash-star, /*, and end with star-slash, */, or they may begin with two 
slashes, //, and go on to the end of the line they are on. </p>

<p>
<a rel="up" href="#Top"> ^ To the top</a>,
<a rel="next" href="#Conventions"> &gt; Conventions</a>
</p>

<!-- ================================= -->
<hr/><a name="Conventions"></a>
<h2>Conventions</h2>

<p> Inside each of the topics, <b>bold</b> text represents macro language (LCX) 
code that are to be written or spelled exactly as shown. 
<em>Italics</em> indicates descriptions of expressions, names, 
variables, or the like that are to be defined specifically in each case. </p>

<p>For example:</p>
<pre><b>string </b><em>variable1</em><b>, </b><em>variable2</em><b>;
for(</b><em>begin</em><b>; </b><em>term</em><b>; </b><em>iterate</em><b>)
{
    message(</b><em>title</em><b>, </b><em>format</em><b>, </b><em>variable</em><b>);
    /* </b><em>other statements</em><b> */
}
</b></pre>

<p>
<a rel="up" href="#Top"> ^ To the top</a>,
<a rel="previous" href="#Introduction"> &lt; Introduction</a>,
<a rel="next" href="#Function.20definitions"> &gt; Function Definitions</a>
</p>

<!-- ================================= -->
<hr/><a name="Function.20definitions"></a> <h2>Function Definitions</h2> 

<p>Like C, the unit of execution in LCX is the function. 
A function can take from 0 to 31 argument values, and it returns 
exactly one value. If a function is called with more 
arguments than it expects, the excess ones are quietly ignored. 
If a function is called with too few arguments, a run-time error will occur.</p>

<p>When there is a need for returning more than one value from a function, 
or where a varying number of values are to be passed into or out of 
a function, they are usually ganged together into a set. The system 
functions 
<a href="#makeset">makeset()</a>, 
<a href="#converttoset">converttoset()</a>, 
<a href="#setitem">setitem()</a>, 
<a href="#setlen">setlen()</a>, 
and 
<a href="#inset">inset() </a>
are used to handle the reading and writing of these. 
Note that passing by reference is not used, and there is no pointer 
or array variables in LCX.</p>

<p>Functions can call other functions that are defined in the same 
file or in other files in a set of files.  There is a number of 
predefined functions, some of which are always available, 
others are available only in certain contexts.   This is detailed 
further in the <a href="#Functions.20Reference">Functions Reference</a>.
A function is normally called directly, but there is a mechanism whereby
a string containig the name of a function may be used in calling 
the function indirectly. This is discussed in
<a href="#Indirect.20Function.20Calls"> below.  </a></p>

<p>A function definition consists of a function declaration followed 
by a block. Function declarations are processed before interpreting 
takes place, and so functions can call each other in any order. 
Recursion is allowed: a function may call itself directly or 
through other functions.</p>

<p> A function definition consists of the following parts:</p>
<pre><em>
funcname</em><b>(</b><em>declaration of arguments</em><b>) 
{
    </b><em>declaration of local variables
    statements
</em><b>}
</b></pre>


<p> The argument declarations look like: </p>
<pre><b>string </b><em>arg1</em>;</pre>
<p>which is repeated with commas after for each argument.</p>

<p> Function values are returned using the return keyword:</p>
<pre><b>return(</b><em>expression</em><b>);</b></pre>
<p>This causes the function to return the value of the expression.</p>

<p>Functions that end without any return() will appear to be returning 
some random, unspecified value. </p>

<p> The following is an example of a function, named <b>average4()</b> and 
taking 4 arguments:</p>
<pre><b>
average4(string value1, string value2, string third, string last)
{
    string sum;
    sum = value1 + value2 + third + last;
    return(sum / 4);
}
</b></pre>

<p>
<a rel="up" href="#Top"> ^ To the top</a>,
<a rel="previous" href="#Conventions"> &lt; Conventions</a>,
<a rel="next" href="#Indirect.20Function.20Calls"> &gt; Indirect Function Calls</a>
</p>

<!-- ================================= -->
<hr/><a name="Indirect.20Function.20Calls"></a> 
<h2>Indirect Function Calls</h2> 

<p>Functions may be referenced indirectly.  Instead of specifying 
a function call with the actual name of the function, this name 
may be obtained from an expression in a pair of parentheses or 
round brackets.  The expression is evaluated, and it is
interpreted as the name of the function, then this function is
attempted located and called, with whatever arguments are 
supplied. </p>

<p>In C, this functionality is provided by code-pointers or 
pointers to functions. LCX uses a similar idea, but the pointer to
a function is really only a string spelling its name.</p>

<pre><b>(</b><em>expression</em><b>)(</b><em>arguments...</em><b>);</b></pre>

<p>where the <em>expression</em> results in the name of the function. For
readability, it is recommended that this be a variable, but the result of
a function call such as <a href="#concat">concat( )</a> will also work.</p>

<h3>Example</h3>

<pre>
main()
{
    string ff, abcd;
    ff = "message";
    abcd = (ff)(__HERE__, "Called ", ff, " as if it were the real thing");
    return(abcd);
}
</pre>

<p>This will result in a function call to the message( ) function. </p>

<h3>See Also:</h3>
<p>
<a href="#LCXRPC">LCXRPC( )</a><br/>
<a href="#isafunction"> isafunction( ) </a><br/>
<a href="#message"> message( )</a><br/>
<a href="#Predefined.20Constants"> __HERE__ </a><br/>
</p>

<p>
<a rel="up" href="#Top"> ^ To the top</a>,
<a rel="previous" href="#Function.20definitions"> &lt; Function Definitions</a>,
<a rel="next" href="#return"> &gt; Keyword return </a>
</p>

<!-- ================================= -->
<hr/><a name="return"></a> <h2>return</h2> 

<p>Function values are returned using the return keyword:</p>

<pre><b>return(</b><em>expression</em><b>);</b></pre>

<p>This causes the function to return the value of the expression.</p>

<p> The statements inside the blocks are 
<a href="#Language.20control.20structures"> control structures</a>
(<a href="#if.2delse">if-else</a>, <a href="#for">for</a>, 
<a href="#while">while</a>, <a href="#do.2dwhile">do while</a>) 
or expressions in whatever order is required. 
Control structures may contain 
other control structures inside them. </p>
<p>
<a rel="up" href="#Top"> ^ To the top</a>,
<a rel="previous" href="#Indirect.20Function.20Calls"> &gt; Indirect Function Calls</a>
<a rel="next" href="#Variables"> &gt; Variables</a>
</p>

<!-- ================================= -->
<hr/><a name="Variables"></a> <h2>Variables</h2> 

<p>The functions operate on data in variables. There is only one 
type of data, declared using the keyword <b>string</b>, which is a 
string of characters. The maximum length of a 
string is 65535 characters, and the internal storage will 
be allocated as necessary. </p>

<p>A variable declaration consists of the following:</p>
<pre><b>string</b> <em>variable-name</em><b>;</b></pre>

<p>This announces that there is a variable (a string) that can be 
identified by its name.  Two or more variables can be declared on 
the same line, thus:</p>
<pre><b>string</b> <em>variable1</em><b>,</b> <em>variable2</em><b>,</b> ... <em>variableN</em> <b>;</b></pre>

<p>All variable and function names are case-sensitive.</p>

<p>Variables are declared the same way whether they are global or 
local to a single function.  Local variables, the ones that are 
declared inside the curly braces of a function, are forgotten once 
the execution of the function ends, and they are never 
available outside the function they are declared in. </p>

<p>Global variables are declared outside all functions. They have
an initial value of blank. They are available to all functions in 
the same execution environment, even if the variable is declared
in the file somewhere after the function.</p>

<p>Long texts with arbitrary characters can be defined and accessed as
global variables using the <a href="#define">#define</a>
preprocessor command. These global variables are also visible throughout
and they start out with the values given.</p>

<p>In certain circumstances, an execution environment is reused for
several function calls, and in these cases, a global variable given 
a value during any earlier function call (such as a get-status call 
in a status evaluation or the first page of a report printing job), 
will retain its value for the rest of the calls pertaining to 
the current report or status evaluation. This is discussed in the
sections on where WinPCS calls macro functions.</p>

<p>The function
<a href="#LCXGlobals">LCXGlobals( )</a> 
allows the names of the defined globals to be discovered.</p>

<p>The WinPCS client also provides a mechanism for long-term storage of
data values, which can be established at some early point and later read
or removed. These are the "Global Named values" and can be manipulated
or examined through the functions 
<a href="#GlobalDefine">GlobalDefine( )</a> , 
<a href="#GlobalFind">GlobalFind( )</a> , 
<a href="#GlobalClear">GlobalClear( )</a> , and 
<a href="#GlobalList">GlobalList( )</a> .</p>


<p>
<a rel="up" href="#Top"> ^ To the top</a>,
<a rel="previous" href="#return"> &lt; Keyword return </a>
<a rel="next" href="#Interpv"> &gt; Interpretation of variables</a>
</p>

<!-- ================================= -->
<hr/><a name="Interpv"></a> <h2>Interpretation of variables</h2> 

<p>While the data in variables is stored as text, there are a number of cases where certain
values of this string can be used meaningfullt.  These special cases include the ones where
strings are numerical values, dates, sets, function names, or report-references. </p>

<p> <b>string</b>s that hold numeric values can be used meaningfully in arithmetic and logical 
expressions. <b>String</b>s with non-numeric values evaluate to zero when used in arithmetic 
expressions. As an alternative, the `<b>int</b>` keyword is supported and allowed, though the 
variables declared as <b>int</b>s are identical to the ones declared as strings, there is a way of 
documenting intention by letting variables that are primarily numeric be <b>int</b>s. No 
stringent checks on this is done however, and no internal distinction is made between 
<b>int</b>s and <b>string</b>s, nor is any expected to be made in the future.</p>

<p>Strings that can be interpreted as dates or week numbers will similarly produce meaningful 
results with the date and time functions. In contrast to Excel, no effort is ever expended on
interpreting the contents of a string in order to anticipate its use as a date or numerical value.
LCX strings are plain text that works as such when passed to functions that don't expect otherwise,
they may also be understood as numbers or dates when passed to functions that expect these. 
This also includes calls to store data in the database. Fields of type Date or 
fields of the numerical types will expect to receive strings that look like dates or numbers. 
Similarly, when reading these fields, the values read will appear in an appropriate format
for use with LCX functions and in expressions.  </p>

<p>With <a href="#Indirect.20Function.20Calls">indirect function calls</a>
or functions such as <a href="#LCXRPC">LCXRPC( )</a> , 
<a href="#LCXISOLATED">LCXISOLATED( )</a> , or <a href="#ServerReport">ServerReport( )</a> 
a string may be interpreted as holding the name of some function that is to be called.</p>

<p> Another special interpretation of the contents of a string is a 
set, which is just a concatenation of several strings with a delimiter character after 
each.  Sets are used in place of or in addition to single strings in many cases, where it makes
sense to have one or more values together. </p>

<p>A single string qualifies as a one-element set. 
Sets can consist of any mixture of numeric and non-numeric values. 
Like strings, sets may be any size up to 65535 characters.</p>

<p>A set may contain another set embedded inside it, where the embedded 
set is delimited by a matching pair of square brackets. These are treated as
elements within the larget set by functions such as
<a href="#makeset">makeset( )</a>,
<a href="#setitem ">setitem ( )</a>, and
<a href="#sortset">sortset( )</a> 
but can be processed as single sets once extracted with 
<a href="#setitem">setitem( )</a>. </p>

<p>Larger blocks of data are conveniently organized in the form of Reports. 
A number of functions can read or return such Report handles. 
These are strings containing special numbers, to be passed into other functions such
as <a href="#RepInfo">RepInfo( )</a>, <a href="#RepGet">RepGet( )</a> , 
or <a href="#RepControl">RepControl( )</a> for use there. 
</p>

<p>
<a rel="up" href="#Top"> ^ To the top</a>,
<a rel="previous" href="#Variables"> &lt; Variables </a>,
<a rel="next" href="#Names"> &gt; Names</a>
</p>

<!-- ================================= -->
<hr/><a name="Names"></a> <h2>Names</h2> 

<p>Function and variable names, also called `identifiers` are 
case-sensitive.  They may contain any mixture of upper- and 
lowercase letters and the underscore character.  
Except for the first character, digits are also allowed.</p>

<p>The following names are reserved keywords: <br/>

<a href="#break"> break </a>, <br/>
<a href="#continue"> continue </a>,<br/>
<a href="#do.2dwhile"> do </a>,<br/>
<a href="#if.2delse"> else </a>,<br/>
<a href="#for"> for </a>,<br/>
<a href="#halt"> halt </a>,<br/>
<a href="#if.2delse"> if </a>,<br/>
<a href="#Variables">int </a>,<br/>
<a href="#return">return </a>,<br/>
<a href="#Variables">string </a>,<br/>
<a href="#while">while</a>,</p>

<p>Note that all these  names are only 
defined in lower-case. Upper-case (BREAK, FOR, IF, ... ) 
or mixed case strings (Break, For, If, ...)  of the same spelling 
are valid, though possibly confusing, identifiers. </p>
<p>
<a rel="up" href="#Top"> ^ To the top</a>,
<a rel="previous" href="#Interpv"> &lt; Interpretation of variables</a>,
<a rel="next" href="#Language.20control.20structures"> &gt; Language control structures </a>
</p>

<!-- ================================= -->
<hr/><a name="Language.20control.20structures"></a> 
<h2>Language control structures</h2> 

<p>LCX has the following of C's control statements: 
<a href="#if.2delse">if-else</a>, 
<a href="#for">for</a>, 
<a href="#do.2dwhile">do while</a>, and 
<a href="#while">while</a>. The 
execution of the iterative loops may be modified further using the 
<a href="#break">break</a> and
<a href="#continue">continue</a>
commands. In addition, there is the 
<a href="#conditional.20expression"> conditional expression</a>, which works as a variant of 
the if control.  These are described below, but 
they all operate the same as the 
corresponding structures in C.</p>

<p>The following C controls are not implemented at present: 
switch/case/default, and goto. 
Like C, the keywords must be in all lower case. </p>

<p> In addition, LCX has a control keyword <a href="#halt"> halt </a> which causes 
execution to stop at that point.</p>
<p>
<a rel="up" href="#Top"> ^ To the top</a>,
<a rel="previous" href="#Names"> &lt; Names</a>,
<a rel="next" href="#if.2delse"> &gt; if-else</a>
</p>


<!-- ================================= -->
<hr/><a name="if.2delse"></a> <h2>if-else</h2>

<p>The if-else construct is as follows:</p>
<pre><b>
if(</b><em>expression</em><b>) 
{
    </b> statements done if the expression
    evaluates to non-zero. <b>
}
else
{
    </b> statements done if the expression
    evaluates to zero. <b>
}
</b></pre>

<p>The <b>else</b> and the following block may be omitted if it is 
not needed. The braces are mandatory, even if the block contain 
only one statement, except as documented in the 
<a href="#Extended.20if.2delse">extended if-else</a> section.</p>
<p>
<a rel="up" href="#Top"> ^ To the top</a>,
<a rel="previous" href="#Language.20control.20structures"> &lt; Language control structures </a>,
<a rel="next" href="#Extended.20if.2delse"> &gt; Extended if-else</a>
</p>

<!-- ================================= -->
<hr/><a name="Extended.20if.2delse"></a>
<h2>Extended if-else</h2>

<p>Commonly there is the issue of selecting one of several actions. 
With standard <a href="#if.2delse">if-else</a>, 
this can be done using nested if blocks, as in:</p>

<pre><b>
if(constant1==variable)
{   /* Do whatever for the first one*/
}
else { if(constant2 == variable)
{   /* Do whatever for the second one*/
}
else { if(constant3 == variable)
{   /* Do whatever for the third one*/
}
else
{ /* None of the above */
} } } /* And if another possibility is added another brace goes here. */ 
</b></pre>

<p> The job of aligning the left and right braces for the else 
blocks is not easy, and to simplify things, the blocks for the 
else parts, if they contain another if or if-else statement, may 
be dropped. The above is thus simplified to:</p>

<pre><b>
if(constant1==variable)
{   /* Do whatever for the first one*/
}
else if(constant2 == variable)
{   /* Do whatever for the second one*/
}
else if(constant3 == variable)
{   /* Do whatever for the third one*/
}
else
{ /* None of the above */
}  /* And if another possibility is to be added, we will still have one brace here. */ 
</b></pre>
<p>
<a rel="up" href="#Top"> ^ To the top</a>,
<a rel="previous" href="#if.2delse"> &lt; if-else</a>,
<a rel="next" href="#for"> &gt; for </a>
</p>

<!-- ================================= -->
<hr/><a name="for"></a> <h2>for</h2> 

<p>The for loop is as follows:</p>

<pre><b>
for(initial expression ; control-expression ; next-expression)
{
    </b><em>statements done as long as the control-expression 
    remains non-zero.</em><b>
}
</b></pre>

<p>The initial expression is evaluated once at the beginning of the loop. 
This usually initializes a loop counter or similar variable. Then the 
control expression is evaluated and if non-zero, the statements in the 
loop are executed.  Then the next-expression is evaluated, and then the 
control expression is evaluated again.If this is zero, the loop stops. 
If it is non-zero, it continues.</p>

<p>The 
break 
statement, if found inside the loop, will cause execution to 
continue at the first statement after the right curly bracket. </p>

<p>Similarly, the 
continue 
statement will cause execution to proceed to 
the beginning of a new iteration in the loop; the next expression to 
be evaluated in this case is the next expression which is then 
followed by the control expression, as in a normal iteration of 
the loop.</p>

<p>Example: </p>
<pre><b>
for(j = 0; j&lt;10; j+=1)
{
    message ("Loop", "J is ", j);
}
</b></pre>
<p>This runs the message( )  function ten times, counting.</p>

<p>Another Example: </p>
<pre><b>
for(j = 0; j&lt;10; j+=1)
{
    cc = yesno (concat ("Turn number ",j), "Do you want to continue?");
    if(!cc)
    {
        break;
    }
    /* The next iteration is done. */
    message ("Loop", "Run Turn number ", j);
}
</b></pre>
<p>This asks the user if the loop is to continue, and if not so, 
the for loop is terminated using the 
break 
statement.</p>
<p>
<a rel="up" href="#Top"> ^ To the top</a>,
<a rel="previous" href="#Extended.20if.2delse"> &lt; Extended if-else</a>,
<a rel="next" href="#do.2dwhile"> &gt; do-while </a>
</p>

<!-- ================================= -->
<hr/><a name="do.2dwhile"></a> <h2>do-while</h2> 

<p>This looping construct does its statements first, and then 
checks an expression to see if it should be done again:</p>

<pre><b>
do
{
    </b><em>statements</em><b>
}
while(expression); 
</b></pre>

<p>If the expression evaluates to zero, or if the 
break 
statement 
is executed inside the loop, the loop will stop and execution will 
continue at the next statement. If the continue statement is 
executed inside the loop, the loop is reentered at the top, 
cutting short the current iteration.</p>
<p>
<a rel="up" href="#Top"> ^ To the top</a>,
<a rel="previous" href="#for"> &lt; for </a>,
<a rel="next" href="#while"> &gt; while </a>
</p>

<!-- ================================= -->
<hr/><a name="while"></a> <h2>while</h2> 

<p>This loop checks before doing the statements, like for does.</p>

<pre><b>
while(expression)
{
    </b><em>statements</em><b>
}
</b></pre>

<p>If the expression evaluates to zero initially, the statements are 
skipped and execution continues at the next statement following the 
right curly brace. If the 
break 
statement is executed, the loop will 
stop, and if a continue statement is executed, the expression will 
be evaluated and should this become non-zero, the loop is restarted.</p>
<p>
<a rel="up" href="#Top"> ^ To the top</a>,
<a rel="previous" href="#do.2dwhile"> &lt; do-while </a>,
<a rel="next" href="#break"> &gt; break </a>
</p>

<!-- ================================= -->
<hr/><a name="break"></a> <h2>break</h2> 

<p>The <b>break</b> statement causes a for, while, or do-while loop to 
terminate and execution to proceed at the first statement after 
the loop. Break may only appear inside one of these loops. </p>

<p>When loops are nested, break terminates only the innermost loop.</p>
<p>
<a rel="up" href="#Top"> ^ To the top</a>,
<a rel="previous" href="#while"> &lt; while </a>,
<a rel="next" href="#continue"> &gt; continue </a>
</p>

<!-- ================================= -->
<hr/><a name="continue"></a> <h2>continue</h2> 

<p>The continue statement causes the current iteration of a for, while, 
or do-while  loop to terminate and execution to proceed at the 
top of the loop. The next-expression of the for loop and the 
test-expressions of the for and while loops are the executed and what 
happens next is determined by the outcome of this expression, as 
for a normal iteration. </p>

<p>The do-while loop is just restarted without any checks. 
Continue may only appear inside one of these loops. </p>

<p>When loops are nested, continue restarts only the innermost loop.</p>
<p>
<a rel="up" href="#Top"> ^ To the top</a>,
<a rel="previous" href="#break"> &lt; break </a>,
<a rel="next" href="#halt"> &gt; halt </a>
</p>

<!-- ================================= -->
<hr/><a name="halt"></a> <h2>halt</h2> 

<p>This keyword causes execution of the function to stop at this keyword. 
To be used for emergency exits.</p>
<p>
<a rel="up" href="#Top"> ^ To the top</a>,
<a rel="previous" href="#continue"> &lt; continue </a>,
<a rel="next" href="#conditional.20expressions"> &gt; conditional expressions </a>
</p>

<!-- ================================= -->
<hr/><a name="conditional.20expressions."></a>
<h2>conditional expressions.</h2> 

<p>This looks like:</p>
<pre><b> testexpression ? expr1 : expr0 </b></pre>
<p>If the testexpression is non-zero, the expr1 is evaluated, and its 
value becomes the value of this entire expression. If the 
testexpression comes out zero, the expr0 is evaluated instead.</p>

<p>It is as if the testexpression is a yes-no question, and the 
two expressions are the results of answering `yes` or `no` respectively.</p>

<p>See Also <a href="#if.2delse"> if-else </a></p>

<p>
<a rel="up" href="#Top"> ^ To the top</a>,
<a rel="previous" href="#halt"> &lt; halt </a>,
<a rel="next" href="#Expressions.20and.20operators"> &gt; Expressions and operators</a>
</p>

<!-- ================================= -->
<hr/><a name="Expressions.20and.20operators"></a>
<h2>Expressions and operators</h2> 

<p>Expressions are written like formulas, with variables, 
constants, and operators. Constants are either numeric or 
string constants, but they are treated basically the same way. </p>

<p>Operators have a certain precedence, meaning that if several 
occur together, some are done before others. For example, in the expression </p>
<pre><b> G = A * x + B * y; </b></pre>
<p>A times x and B times y are evaluated, then these products 
are added, and the result placed in variable G.  
Precedence can be changed using parentheses, so that in </p>
<pre><b> G = A * (x + B * y); </b></pre>
<p>B and y are multiplied, then added to x, then the sum is 
multiplied with A, and the result stored in G.</p>
<p>
<a rel="up" href="#Top"> ^ To the top</a>,
<a rel="previous" href="#conditional.20expressions"> &lt; conditional expressions </a>,
<a rel="next" href="#Precedence"> &gt; Precedence</a>
</p>


<!-- ================================= -->
<hr/><a name="Precedence"></a> <h2>Precedence</h2> 

<p>The precedence rules are:</p>
<ol>
<li> Function calls and constant evaluations</li>
<li> Parentheses </li>
<li> Unary operators: 
    <ul>
     <li>! Not  </li>
     <li>- Negative </li>
    </ul></li>
<li> Multiplicative : 
    <ul>
     <li>* multiply</li>
     <li>/ divide</li>
     <li>% remainder</li>
    </ul></li>
<li> Additive : 
    <ul>
     <li>+ sum</li>
     <li>- difference</li>
    </ul></li>
<li> Relative comparisons : 
    <ul>
     <li>&lt; Less than</li>
     <li>&gt; Greater than</li>
     <li>&lt;= Less than or equal</li>
     <li>&gt;= Greater than or equal</li>
    </ul></li>
<li> Equality comparisons :
    <ul>
     <li>== Equal</li>
     <li>!= Not Equal</li>
    </ul></li>
<li> Bitwise AND : &amp;</li>
<li> Bitwise XOR : ^</li>
<li> Bitwise OR : |</li>
<li> Logical AND : &amp;&amp;</li>
<li> Logical OR : ||</li>
<li> Conditional : ? :</li>
<li> Assignment : 
    <ul>
     <li>= Regular assignment</li>
     <li>+= Addition in place, Accumulation, ( += 1 is increment, commonly used in for-loops) </li>
     <li>-= Subtraction in place, ( -= 1 is decrement.) </li>
     <li>*= Multiply in place.</li>
     <li>/= Divide in place.</li>
     <li>%= Remainder in place.</li>
    </ul></li>
</ol>

<p>
<a rel="up" href="#Top"> ^ To the top</a>,
<a rel="previous" href="#Expressions.20and.20operators"> &lt; Expressions and operators</a>,
<a rel="next" href="#Arithmetical.20and.20assignment.20operators"> &gt; Arithmetical and assignment operators </a> 
</p>


<!-- ================================= -->
<hr/><a name="Arithmetical.20and.20assignment.20operators"></a> 
<h2> Arithmetical and assignment operators </h2> 

<p>This includes addition (+), subtraction (-), multiplication (*), 
division (/), remainder (%), and negation (unary -). These 
are only meaningful on data that is numeric. Non-numeric 
data evaluates as zero.</p>

<p>Arithmetic and assignment can be combined, forming more compact 
(and efficient) variations of expressions like:</p>
<pre><b>j = j + 1;</b></pre>
<p>(increment j), which is identical to:</p>
<pre><b>j += 1;</b></pre>

<p>The value of assignment operators is the value being assigned. 
This value can be used further in a function call or expression, 
though it may lead to code that is hard to read.</p>

<p>(Note that the standard C operators ++ and - - are not defined.)</p>
<p>
<a rel="up" href="#Top"> ^ To the top</a>,
<a rel="previous" href="#Precedence"> &lt; Precedence</a>,
<a rel="next" href="#Bitwise.20operators"> &gt; Bitwise operators </a> 

</p>

<!-- ================================= -->
<hr/><a name="Bitwise.20operators"></a> 
<h2> Bitwise operators </h2> 

<p>Each one of the three bitwise operators perform the logical AND, 
logical OR, or logical XOR on each bit in its two operators. </p>

<p>AND, single &amp;, sets a bit in the result where that bit in both 
left and right operand is set.</p>

<p>OR single |, sets a bit in the result where that bit in the left 
or the right, or both, operands is set.</p>

<p>XOR, caret ^, sets a bit in the result where that bit in either 
the left or the right but not both operands is set.</p>
<p>
<a rel="up" href="#Top"> ^ To the top</a>,
<a rel="previous" href="#Arithmetical.20and.20assignment.20operators"> &lt; Arithmetical and assignment operators </a>,
<a rel="next" href="#Comparison.20operators"> &gt; Comparison operators </a> 
</p>

<!-- ================================= -->
<hr/><a name="Comparison.20operators"></a> 
<h2>Comparison operators</h2> 

<p>The following six binary comparison and relational operators are provided:</p>
<pre>
     &lt;, &lt;=, ==, !=, &gt;, &gt;=
</pre>
<p>Both numeric and non-numeric values are meaningful in comparisons.</p>

<p>Non-numeric values compare as strings according to the ASCII ordering 
sequence, and if both strings have the same characters in the same 
order, they are equal.  </p>

<p>Comparisons return 0 for false and 1 for true in all cases.   </p>
<p>
<a rel="up" href="#Top"> ^ To the top</a>,
<a rel="previous" href="#Bitwise.20operators"> &lt; Bitwise operators </a> ,
<a rel="next" href="#Logical.20operators"> &gt; Logical operators </a>
</p>

<!-- ================================= -->
<hr/><a name="Logical.20operators"></a> <h2>Logical operators</h2> 

<p>The following three operators are logical: </p>
<pre>
    &amp;&amp;  And     (thus &amp;&amp; such)
    ||  Or      (truth || consequences)
    !   Not     ( ! BB )
</pre>

<p>Logical operators only care about whether their operands as 
numeric values are zero or non-zero.  Non-numeric values are 
treated as zero. Strings beginning with numbers are 
treated as the numerical value of this number (23skidoo is 
treated as 23, for example). </p>

<p>Unlike C, both sides of the binary logical operators &amp;&amp; 
and || are always evaluated. </p>
<p>
<a rel="up" href="#Top"> ^ To the top</a>,
<a rel="previous" href="#Comparison.20operators"> &lt; Comparison operators </a>,
<a rel="next" href="#Constants"> &gt; Constants </a>
</p>


<!-- ================================= -->
<hr/><a name="Constants"></a> <h2>Constants</h2> 

<p>Constants are strings or numeric. </p>
<p>Strings are enclosed in double quote characters. 
Numerical values are used and stored as strings, 
but they do not require quotes. Hence 
the string "1536" and the number 1536 are treated 
the same, and the values of either one 
of:</p>
<pre><b>
    "1536" / 3
    1536 / "3"
    1536 / 3
    "1536" / "3"
</b></pre>
<p>will be 512.  Note that all numbers are expected to be decimal 
integers (or floating-point numbers if the floating-point pragma 
is turned on).  C conventions for hexadecimal numbers are currently 
not recognized; anything beginning with ``0x`` is treated as 0 
numerically.</p>

<p>Sometimes, strings containing line-breaks, double quotes or 
non-standard (8 bit) characters are needed.  There is a general 
convention used to handle this: it is that the 
sequence \xhh(space) where the hh is a 2-digit hexadecimal value 
becomes replaced by the single character whose ordinal value is hh.  
For example, to generate a string with a double quote character which 
also may mean `inches` in it, the double quote is created using \x22 thus:</p>

<pre><b>
    linenumber="1.5\x22 -1536B";
</b></pre>

<p>This will become 1.5"-1536B when stored as a variable.</p>

<p>To create the value hex coded line break is represented by \x0a's 
here the LCX string would need to code either the backslash or the 
x as \x5c or \x78 in order to circumvent the \x?? convention:</p>
<pre>
    "hex coded line break is represented by \x5c x0a's here";
</pre>
<p>The most common codes are:</p>
<pre>
    \x22  for double quote
    \x0a  or line-break
</pre>
<p>Other codes can be found in the <a href="#ASCIITABLE">Table of ASCII Codes</a> section.</p>

<p>
<a rel="up" href="#Top"> ^ To the top</a>,
<a rel="previous" href="#Logical.20operators"> &lt; Logical operators </a>,
<a rel="next" href="#Predefined.20Constants"> &gt; Predefined Constants </a> 
</p>

<!-- ================================= -->
<hr/><a name="Predefined.20Constants"></a> <h2> Predefined Constants </h2> 

<p>There are three predefined names defined, resembling
global variables, but they are acting like read-only string constants. </p>

<p>These are:<br/>
<b>__FILE__</b> which is the name of the current source file<br/>
<b>__LINE__</b> which is the line of this source file <br/>
<b>__HERE__</b> which is the filename of the current source file 
followed by the line number of this source file, equivalent to
<b><a href="#concat">concat</a>(__FILE__, "(", __LINE__, ")");</b>. 
This is very useful as the title or first argument to 
<a href="#trace">trace( )</a> or 
<a href="#message">message( )</a> when used for debugging. </p>

<p>
<a rel="up" href="#Top"> ^ To the top</a>,
<a rel="previous" href="#Constants"> &lt; Constants </a>,
<a rel="next" href="#pragma.20operations"> &gt; pragma operations </a> 
</p>

<!-- ================================= -->
<hr/><a name="pragma.20operations"></a> <h2>pragma operations</h2> 

<p>Some major switches inside the LCX interpreting engine can be set by #pragma 
operations, similar to the ones you may find in C compilers.
At present, the following two kinds of settings are defined:</p>

<ul>
<li> Quote character.</li>
<li> Floating-point arithmetic or integer arithmetic.</li>
</ul>

<p>#pragma settings are to be located outside any function, will be
executed during the prescan phase, and sets the mode for entire 
macro executions.  Only the most recent global #pragma of its kind 
found determines the mode used. </p>

<p>#pragma settings inside a function are undefined. They can
cause slowdowns in busy loops, and all #pragma setting and resetting 
is to be considered expensive.  In general, it is recommended that 
there is only one globally defined #pragma of each kind, somewhere 
near the beginning of the macro code, which then 
sets up the parameters for the entire run. </p>
<p>
<a rel="up" href="#Top"> ^ To the top</a>,
<a rel="previous" href="#Predefined.20Constants"> &lt; Predefined Constants </a>,
<a rel="next" href="#Quote.20characters"> &gt; Quote characters </a>
</p>


<!-- ================================= -->
<hr/><a name="Quote.20characters"></a>
<h2>Quote characters</h2> 

<p>The default string delimiter character is the standard C double quote, 
ASCII value 22 hexadecimal (0x22 in C notation), decimal value 34. 
To insert this value into a string is relatively straightforward, the 
code \x22  does the job. However, there are cases (notably 
DDE operations) where a lot of double quotes are to be passed off 
to the other application, and the resulting plethora of \x22 s makes 
the code hard to read. #pragma (quote:&lt;hex-value&gt;) will redefine the 
quote character to be the ASCII hexadecimal value given. The most 
useful ones are the ones not previously assigned to 
anything. Of these, the following ones can be recommended.</p>

<pre><b>
        @ - at-sign, ("monkey"):     #pragma(quote:40)
        ` - back-quote, grave:   #pragma(quote:60)
        $ - dollar-sign:         #pragma(quote:24)
</b> </pre>

<p>With any one of these in effect, the double quote becomes a 
passive character, and all strings are to be delimited by the 
promised character for LCX to work as intended. </p>

<p>Obviously, the @, `, or $ characters can still be inserted using 
the \x40 \x60 or \x24 notation, if needed.</p>

<p>The default double quote is restored by either </p>
<pre><b>
    #pragma (quote:22)
    #pragma (quote:default)
</b> </pre>

<h3>See Also:</h3>
<p>
<a href="#define">Blocks of text</a>
</p>
<p>
<a rel="up" href="#Top"> ^ To the top</a>,
<a rel="previous" href="#pragma.20operations"> &lt; pragma operations </a>,
<a rel="next" href="#Floating.2dpoint.20Arithmetic"> &gt; Floating-point Arithmetic </a>
</p>

<!-- ================================= -->
<hr/><a name="Floating.2dpoint.20Arithmetic"></a> 
<h2> Floating-point Arithmetic </h2> 

<p>The default in LCX is integer arithmetic. However, for some 
applications, more precision as well as fractional operations, 
are required. This means that LCX should be able to 
handle decimals and exponents in these cases.  The </p>

<pre><b>
    #pragma (numbers:f)
</b></pre>

<p> turns floating-point on and </p>

<pre><b>
    #pragma (numbers:i)
</b></pre>

<p> turns floating-point off. This latter is the default.</p>

<p>With the</p>

<pre><b>
    #pragma (numbers:f)
</b></pre>

<p>in effect, the interpretation of data is as floating-point numbers.  
Decimal and exponential notation (which uses powers of ten to 
spcify numbers, and that looks like, for example 12.56E-9 or 5.36E6) 
is understood. Arithmetic operations result in decimal 
strings in the range 0.001 (10-3) to 100000 (106) and 
exponential notation beyond this.  </p>

<p>Exponential constants should be enclosed in quotes if they contain 
plus or minus signs. They may not contain any spaces. </p>

<p>(Example: "1.6E-19" must be quoted, "3E8" need not be)</p>

<p>The functions that normally take integral arguments, such as 
substr(), will round off their arguments, so that values greater 
than N+0.5000... are rounded up to N+1 and values 
less than N-0.49... are rounded down to N. </p>

<p>Addition, subtraction, multiplication and division will 
work as expected. The remainder operation, which has no C 
floating-point equivalent (in C it is defined for integers only), 
will operate as follows:</p>

<pre><b>
    A % B = (A/B - (integer) A/B) * B;
</b></pre>

<p>Examples:</p>
<pre><b>
    1538.46 % 0.1 = 0.06
    1538.46 % 1 = 0.46
    1538.46 % 10 = 8.46
    3.141593 % 2.5 = 0.641593
</b></pre>

<p>The remainder function is useful for separating out certain digits.</p>
<p>
<a rel="up" href="#Top"> ^ To the top</a>,
<a rel="previous" href="#Quote.20characters"> &lt; Quote characters </a>,
<a rel="next" href="#define"> &gt; Blocks of text</a> 
</p>

<!-- ================================= -->
<hr/><a name="define"></a>
<h2>Blocks of text</h2> 

<p>When using LCX functions to generate larger amount of text such as
HTML or javascript, where there are typically a fixed pre-amble part 
with many double- quotes in it, and no desire to change the quote 
character globally, it is possible to make the prescanner put a 
larger block of text into a global variable, that can later be read 
(as well as over-written) in code. </p>

<p>The syntax is:</p>
<pre>
<b>#define</b> <i>name</i> 
<i>text</i>
<b>#end</b>
</pre>

<p>Here, the <i>name</i> becomes the name of a variable that can later be 
used in expressions or function calls, just like any other global variable, 
and the <i>text</i> between the <b>#define</b> and <b>#end</b> which may contain
any characters including unbalanced curly brackets or parentheses, as can be
found in chunks of javascript. Notably, the text may
contain any number of double-quotes or other characters being identified
as quote characters, new-lines, tabs, or other non-printing characters. </p>

<p>Note that there should not be any other characters on the lines where the
<b>#define</b> or <b>#end</b> statements are. </p>

<a rel="up" href="#Top"> ^ To the top</a>,
<a rel="previous" href="#Floating.2dpoint.20Arithmetic"> &lt; Floating-point Arithmetic </a>
<a rel="next" href="#Functions.20Reference"> &gt; WinPCS Provided Functions Reference </a> 

<!-- ================================= -->
<hr/><a name="Functions.20Reference"></a> 
<h2> WinPCS Provided Functions Reference </h2> 

<p>
<a href="#A"> A </a> 
- <a href="#B"> B </a> 
- <a href="#C"> C </a>
- <a href="#D"> D </a> 
- <a href="#E"> E </a> 
- <a href="#F"> F </a>
- <a href="#G"> G </a> 
- <a href="#H"> H </a>
- <a href="#I"> I </a>
- <a href="#J"> J </a>
- <a href="#K"> K </a>
- <a href="#L"> L </a>
- <a href="#M"> M </a>
- <a href="#N"> N </a>
- <a href="#O"> O </a>
- <a href="#P"> P </a>
- <a href="#Q"> Q </a>
- <a href="#R"> R </a>
- <a href="#S"> S </a>
- <a href="#T"> T </a>
- <a href="#U"> U </a>
- <a href="#V"> V </a>
- <a href="#W"> W </a>
- <a href="#X"> X </a>
- <a href="#Y"> Y </a>
- <a href="#Z"> Z </a>
</p>

<p>In addition to the functions written by the user or system supervisor, 
the system provides a large number of standard functions. 
These provide all the necessary system-functionality. 
These functions are provided by different parts of WinPCS, and their 
availability may vary between the 16-bit, 32-bit server, 32-bit client, and 64-bit 
server. </p>

<p>Actually, the different number of bits are more used for specifying different 
models of WinPCS: there are 32-bit components in the 16-bit, monolithic system, and
there exist 32-bit versions of the 64-bit servers running on Linux and using Postgresql. 
There really is only two main varieties of WinPCS, the old monolithic version and the
current client-server version, where there are the two
further main branches, as well as a number of different client and
server versions within each:</p>

<table border="1" cellspacing="1" cellpadding="2">
<tbody>
<tr><td>Label</td><td>Configuration</td><td>Networking</td><td>Operating system</td><td>Database system</td>
<td>Development status</td><td>Note</td> </tr>

<tr><td>16-bit</td><td>Monolithic</td><td>File Sharing</td><td>Windows</td><td>Btrieve v.5-7</td>
<td>Obsolescent</td><td>Bug-fixes only.</td> </tr>

<tr><td>32-bit</td><td>client-server</td><td>DCE/RPC</td><td>Windows</td><td>Pervasive v.7-</td>
<td>Obsolescent.</td> <td>All new projects use the TCP interface.</td></tr>

<tr><td>32-bit</td><td>client-server</td><td>TCP</td><td>Windows</td><td>Pervasive v.7-</td>
<td>In Production</td>
<td>Current product. The difference between this and the DCE/RPC pair is with the communication modules, 
all the rest is identical for both.  </td></tr>

<tr><td>64-bit</td><td>client-server</td><td>TCP</td><td>Linux</td><td>Postgresql or SQLite</td>
<td>Under development</td>
<td>Uses the standard TCP client on Windows. Runs on both 32-bit and 64-bit Linux systems.</td> </tr>

</tbody></table>

<p>In addition to the standard full WinPCS client, there are some partial clients, such as CDAT, SICLIENT, 
TABHCLI, TCLICO, WINPCSSC, ...   Most of these still use the client-side LCX code, so they might use at least 
a subset of the 32-bit client functions.</p>


<p>The following subsystem names marked on each function name indicate this: 
<br/>LCX 16 - Implemented in the LCX.DLL, available on the 16-bit (monolithic) WinPCS system and the 16-bit LCXT engine
<br/>LCX 32s - Implemented in the LCX97.DLL, available on the 32-bit server
and the LC97 command-line utility.
<br/>LCX 32c - Implemented in the LCX97.DLL, available on the 32-bit client
and the 32-bit LCXT engine
<br/>LCX 64 - Implemented in the LCX64.SO, available on the 64-bit and 32-bit 
Linux servers and the LC64 command-line utility.
<br/>LCXCLI 32c - Available in the 32-bit client and the 32-bit LCXT engine
<br/>NCONN 32c - Main set of functions available in the 32-bit client
<br/>RCONN 16 - Main set of functions available on the 16-bit system
<br/>SYNFARE 16 - Per-record functions in 16-bit SYNFARE
<br/>SYNFARE 32c - Per-record functions in 32-bit SYNFARE and TRANS
<br/>TMGT 32s - Main set of functions in the 32-bit server
<br/>TMGT 64s - Main set of functions in the 64-bit server
<br/>TRANS 16 - Per-record functions on 16-bit TRANS and FORKS
<br/>EVIEW 32c - Local functions for 32-bit Views
<br/>INSPECT 16 - Per-record functions for 16-bit INSPECT 
<br/>INSPECT 32c - Per-record functions for 32-bit INSPECT 
<br/>PPVIEW 16 - Print formatting functions available in 16-bit WinPCS
<br/>PPVIEW 32 - Print formatting functions available in 32-bit WinPCS (client)
<br/>VREP 32c - View Reports in the 32-bit WinPCS Client.
<br/>MAKE 32c - Client-side make callback functions. 
</p>

<p> Not all functions are available everywhere for some practical reasons. The
servers do not have anywhere to display message boxes, so any functions that
open these are not available there. Similarly, there may be limitations on
reading data in status index reports too far from the record it is working on. </p>

<p>Function calls may be nested and any function can take as argument the 
output of a call to any of these functions (including themselves).</p>

<p>LCX is case sensitive, and functions names have to be spelled 
exactly as shown. Many function have only lower-case names, others have mixed case, 
and there are a few that have names consisting entirely of capital letters. </p>

<p>All sections in the following have Name, Synopsis, and Description 
entries.  Where applicable there are other entries such as Return Value, 
Availability and See Also. The name of the WinPCS subsystem where 
the function is defined is shown together with the Function Name. 
The Availability entry is used to note limited availability; 
if no such entry is shown, it can be expected that the function is available 
in all listed contexts. </p>

<p>If the Availability or Description is given as `UNDER CONSTRUCTION` 
the function or its documentation may be partial or incomplete. 
Avoid using these functions until further notice. They are listed 
for two reasons: </p>

<p>1. The documentation and/or function will eventually become completed, 
and it serves as a reminder.</p>

<p>2. System users will know that they cannot use these names themselves, 
and will avoid stumbling into these function by mistake.</p>

<p>Several related functions are sometimes described in a common section.  
A few functions have more than one name, one of these in all uppercase. 
These names are present for backward compatibility, but they are 
otherwise identical in operation to the function with the lower-case name.</p>

<p>Except for the simplest functions, there will be shown examples of 
using the function, or a reference to another topic where the 
function will be shown in use.</p>

<p><a href="#Conventions">Conventions</a> in this help file</p>

<p>
<a href="#A"> A </a> 
- <a href="#B"> B </a> 
- <a href="#C"> C </a>
- <a href="#D"> D </a> 
- <a href="#E"> E </a> 
- <a href="#F"> F </a>
- <a href="#G"> G </a> 
- <a href="#H"> H </a>
- <a href="#I"> I </a>
- <a href="#J"> J </a>
- <a href="#K"> K </a>
- <a href="#L"> L </a>
- <a href="#M"> M </a>
- <a href="#N"> N </a>
- <a href="#O"> O </a>
- <a href="#P"> P </a>
- <a href="#Q"> Q </a>
- <a href="#R"> R </a>
- <a href="#S"> S </a>
- <a href="#T"> T </a>
- <a href="#U"> U </a>
- <a href="#V"> V </a>
- <a href="#W"> W </a>
- <a href="#X"> X </a>
- <a href="#Y"> Y </a>
- <a href="#Z"> Z </a>
</p>

<p>
<a rel="up" href="#Top"> ^ To the top</a>,
<a rel="next" href="#define"> &gt; Blocks of text</a> 
<a rel="next" href="#A"> &gt; --A--</a>
</p>

<!-- ================================= -->
<!-- A -->

<hr/><a name="A"></a><h2>--A--</h2>
<p>
<a href="#ASCII">ASCII( )</a><br/>
<a href="#AimDebugOutput">AimDebugOutput( )</a><br/>
<a href="#AssembleDate">AssembleDate( )</a> <br/>
</p>
<p>
<a rel="up" href="#Functions.20Reference"> ^ Functions Reference </a> ,
<a rel="previous" href="#Z"> &lt; --Z-- </a>,
<a rel="next" href="#B"> &gt; --B-- </a>
</p>


<!-- ================================= -->
<hr/><a name="ASCII"></a> <h2>ASCII()</h2>

<h3>Function Name: ASCII() - LCX 16 LCX 32s LCX 32c LCX 64</h3>

<h3>Synopsis:</h3>
<pre><em>character</em><b> = ASCII(</b><em>number</em><b>);</b></pre>

<h3>Description: </h3>
<p>This function converts between numeric values and characters. 
Note that the function name is in all capitals. The 
<a href="#ordinal">ordinal( )</a>
function provides the inverse operation.</p>

<h3>Return Value:</h3>
<p>The returned character is the (possibly non-printing) character 
corresponding to the numeric value of the argument according to 
the ASCII ordering.  </p>

<h3>See Also:</h3>
<p>
LCX string constants, notably the <tt>\xhh</tt> convention <br/>
<a href="#ordinal"> ordinal( ) </a> <br/>
<a href="#ASCIITABLE">Table of ASCII Codes</a><br/>
</p>

<p>
<a rel="up" href="#A"> ^ --A-- </a>
</p>

<!-- ================================= -->

<hr/><a name="AimDebugOutput"></a><h2>AimDebugOutput()</h2>

<h3>Function Name: AimDebugOutput( ) -- LCX 64 </h3>

<h3>Synopsis:</h3>
<pre><em>xyz</em><b> = AimDebugOutput(</b><em>spec</em><b>);</b></pre>

<h3>Description:</h3>
<p>This function allows debugging to be turned on or off. It is
a more user-friendly version of the 
<a href="#CWULIB">CWULIB( )</a> function. 
</p>

<p>The <em>spec</em> string can be one of the following. Note
that the keywords such as OFF or NET are not case-sensitive, but
the parameters such as device-names are.</p>

<table border="1" cellspacing="1" cellpadding="2"> <tbody>

<tr>
<td><em>spec</em></td> 
<td>Description</td>
<td>Example</td>
</tr>

<tr>
<td><b>OFF</b></td>
<td>This turns any debug-output off. All debug-output will
be shut off, whether it is from the executable files or from
LCX code calling <a href="#trace">trace( )</a>.  </td>
<td><tt>AimDebugOutput("Off")</tt></td>
</tr>

<tr>
<td><b>NET</b> <em>ipaddress:port</em></td>
<td>This allows the debug-text to be sent to a 
<a href="netdebug.html#netrx"> netrx </a> listener
on a specified machine in the network, with the given IP-address
and port. </td>
<td><tt>AimDebugOutput("net 10.0.1.101:16386")</tt></td>
</tr>

<tr>
<td><b>UDP</b> <em>ipaddress:port</em></td>
<td>This allows the debug-text to be sent to a 
<a href="netdebug.html#udprx"> udprx </a> listener
on a specified machine in the network, with the given IP-address
and port. </td>
<td><tt>AimDebugOutput("udp 10.0.1.101:16380")</tt></td>
</tr>

<tr>
<td><b>TTYS</b> <em>device:baudrate</em></td>
<td>This allows debug-output to be sent to a serial port on the 
specified device. Typical device names are such as /dev/ttyS0, 
/dev/ttyS1, but others, USB-serial ports for example, will have 
names such as /dev/ttyUSB0. The baudrate can also be set, 
though we mostly see 9600.</td>
<td><tt>AimDebugOutput("ttys /dev/ttyS0:9600")</tt></td>
</tr>

<tr>
<td><b>STDOUT</b></td>
<td>This will send debug-output to the console, standard output stream.
Note that utilities that emit data on their standard output will get
this data contaminated with debug-texts. To avoid this, use the
following standard error stream instead. 
</td>
<td><tt>AimDebugOutput("STDOUT")</tt></td>
</tr>

<tr>
<td><b>STDERR</b></td>
<td>This will send debug-output to the console, standard error stream.
This is better for utilities that emit data on standard output. 
</td>
<td><tt>AimDebugOutput("STDERR")</tt></td>
</tr>

<tr>
<td><b>TTYS0</b> thru <b> TTYS7</b></td>
<td>This will send the debug-output to one of the serial lines at 9600 Baud. 
TTYS0 maps to device /dev/ttyS0, TTYS1 maps to /dev/ttyS1 and so on.
For other devices and baudrates, specify these through the TTYS, as shown above.
</td>
<td><tt>AimDebugOutput("ttyS0")</tt></td>
</tr>

<tr>
<td><b>COM1</b> thru <b> COM8</b></td>
<td>This will send the debug-output to one of the serial lines at 9600 Baud. 
COM1 maps to device /dev/ttyS0, 
COM2 maps to /dev/ttyS1,  and so on.
For other device names and baudrates, specify these through the 
TTYS, as shown above.
</td>
<td><tt>AimDebugOutput("com4")</tt></td>
</tr>

</tbody></table>

<h3>See Also:</h3>
<p>
<a href="#CWULIB"> CWULIB( )</a> <br/> 
<a href="#trace">trace( )</a> <br/>
<a href="netdebug.html"> Debug through network </a>  <br/> 
<a href="netdebug.html#netrx">netrx</a> <br/>
<a href="netdebug.html#udprx">udprx</a><br/>
</p>

<p>
<a rel="up" href="#A"> ^ --A-- </a>
</p>

<!-- ================================= -->
<p/><hr/><a name="AssembleDate"></a> <h2> AssembleDate </h2><p/>
<h3>Function Name: AssembleDate( ) -- LCX 16 TMGT 32s NCONN 32c TMGT 64s</h3>
<p/>
<h3>Synopsis:</h3>
<pre><em>date</em><b> = AssembleDate(</b><em>year</em><b>, </b><em>month</em><b>, </b><em>day</em><b>);</b></pre>

<h3>Description:</h3>
<p>This function assembles a string representing the date in the locally defined format, out of the components
year, month, day, given. These must be numerical and have the conventional values, for any useful output to
be received. Since the actual display of the date-values can vary between systems, AssembleDate() is more portable
than a simple <a href="#concat">concat( )</a> function call. </p>

<h3>See Also:</h3>
<p>
<a href="#date">          date( )</a>, <br/>
<a href="#DateCanonical"> DateCanonical( )</a>, <br/>
<a href="#DateFromWeek">  DateFromWeek( )</a> <br/>
</p>

<h3>Standalone Replacement:</h3>
<p>Since the date-format is defined by the server in the client/server systems,
the standalone version of this function, as made available to the
the LC97, LC64, and LCXT programs, the function is called 
<a href="#zfunctions">
zAssembleDate( )</a></p>

<p>
<a rel="up" href="#A"> ^ --A-- </a>
</p>

<!-- ================================= -->
<!-- B -->

<hr/><a name="B"></a><h2>--B--</h2>
<p>
<a href="#BoundedText">BoundedText( )</a>
</p>
<p>
<a rel="up" href="#Functions.20Reference"> ^ Functions Reference </a> ,
<a rel="previous" href="#A"> &lt; --A-- </a>,
<a rel="next" href="#C"> &gt; --C-- </a>
</p>

<!-- ================================= -->
<hr/><a name="BoundedText"></a> <h2>BoundedText</h2> 

<h3>Function Name: BoundedText( ) -- PPVIEW 16 PPVIEW 32</h3>
<h3>Synopsis:</h3>
<pre><em>returned</em><b> = BoundedText(</b><em>text</em><b>, </b><em>xleft</em><b>, </b><em>xright</em><b>, </b><em>ytop</em><b>, </b><em>ybottom</em><b>, </b><em>flags</em><b>, </b><em>facename</em><b>, </b><em>size</em><b>);</b></pre>

<h3>Description:</h3>
<p><b>BoundedText() </b>
draws the string text bounded by the rectangle defined by the xleft, 
xright, ytop, ybottom values. If necessary, <b>BoundedText( )</b> draws the 
text on several lines, breaking between words. The text is drawn in 
the font indicated by facename, and the size is the height of capitals 
in 1/10mm units. The flags control weight and positioning as follows: </p>
<p>
Weight:
        Default is Normal weight.
        <b>B</b> - for Bold
        <b>I</b> - for Italic</p>
<p>
Positioning vertically:
        Default is Bottom justified.
        <b>C</b> - for Vertical Centered 
        <b>T</b> - for Top justified</p>
<p>
Positioning horizontally:
        Default is Horizontal centered.
        <b>L</b> - for Left justified
        <b>R</b> - for Right justified</p>

<h3>Availability:</h3>
<p> Only available in a printing function.</p>

<h3>See Also:</h3>
<p>
<a href="#unicert">unicert( )</a> <br/>
<a href="#Height"> Height() </a>  <br/>
<a href="#Hline"> Hline() </a>  <br/>
<a href="#Image"> Image() </a>   <br/>
<a href="#Line"> Line() </a> <br/>
<a href="#Origin"> Origin() </a>  <br/>
<a href="#Text"> Text() </a>  <br/>
<a href="#Vline"> Vline() </a>  <br/>
<a href="#Width"> Width() </a> <br/>
</p>
<p>
<a rel="up" href="#B"> ^ --B-- </a>
</p>

<!-- ================================= -->
<!-- C -->

<hr/><a name="C"></a><h2>--C--</h2>
<p>
<a href="#CachedSI">CachedSI( )</a> <br/>
<a href="#CalcPerc">CalcPerc( )</a><br/>
<a href="#caldat">caldat( )</a> <br/>
<a href="#cannedindex">cannedindex( )</a><br/>
<a href="#capital">capital( )</a> <br/>
<a href="#cleantext">cleantext( )</a> <br/>
<a href="#CleanFileName">CleanFileName( )</a> <br/>
<a href="#clear">clear( )</a> <br/>
<a href="#concat">concat( )</a> <br/>
<a href="#connect">connect( )</a> <br/>
<a href="#connrelations">connrelations( )</a> <br/>
<a href="#connset">connset( )</a> <br/>
<a href="#ConSelect">ConSelect( )</a> <br/>
<a href="#converttoset">converttoset( )</a> <br/>
<a href="#CopyFile">CopyFile( )</a> <br/>
<a href="#CounterHere">CounterHere( )</a> <br/>
<a href="#Odometer.20Example">Odometer Example</a> <br/>
<a href="#CounterAway">CounterAway( )</a> <br/>
<a href="#CounterCheck">CounterCheck( )</a> <br/>
<a href="#CounterStep">CounterStep( )</a> <br/>
<a href="#CounterSet">CounterSet( )</a> <br/>
<a href="#CreateAuto">CreateAuto( )</a> <br/>
<a href="#CreateSICache">CreateSICache( )</a> <br/>
<a href="#csvtoset"> csvtoset( )</a><br/>
<a href="#currency"> currency( )</a><br/>
<a href="#CWULIB"> CWULIB( )</a><br/>
</p>
<p>
<a rel="up" href="#Functions.20Reference"> ^ Functions Reference </a> ,
<a rel="previous" href="#B"> &lt; --B-- </a>,
<a rel="next" href="#D">  &gt; --D-- </a>
</p>

<!-- ================================= -->
<hr/><a name="CachedSI"></a> <h2>CachedSI</h2>
<h3>Function Name: CachedSI( ) -- NCONN 32c</h3>

<h3>Synopsis:</h3>
<pre><em>value</em><b> = CachedSI(</b><em>SIcode</em><b>, </b><em>itemreg</em><b>, </b><em>itemID/itemIDset 
[ </em><b>, </b><em> restriction </em><b>, </b><em> Postprocommand </em><b>, </b><em> PLorientation </em><b>, 
</b><em> formatfiles </em><b>, </b><em> formatfunction </em><b>, </b><em> parameters ...] </em><b>);</b></pre>

<h3>Description:</h3>
<p>UNDER CONSTRUCTION</p>

<h3>See Also:</h3>
<p><a href="#CreateSICache">CreateSICache( )</a> <br/>
<a href="#statusindexdirect">statusindexdirect( )</a> <br/>
<a href="#statusindexjor">statusindexjor( )</a> <br/>
<a href="#statusindex">statusindex( )</a> <br/>
<a href="#serverindexdirect">serverindexdirect( )</a> <br/> 
<a href="#serverindex">serverindex( )</a> <br/> 
<a href="#statusindexupward">statusindexupward( )</a> <br/>
</p>

<p> 
<a rel="up" href="#C"> ^ --C-- </a>
</p>

<!-- ================================= -->

<hr/><a name="CalcPerc"></a> <h2>CalcPerc</h2>
<h3>Function Name: CalcPerc( ) -- LCX 16 LCX 32s LCX 32c LCX 64 </h3>

<h3>Synopsis:</h3>
<pre><em>text</em><b> = CalcPerc(</b><em>Numerator</em><b>, </b><em>Denominator</em><b>, </b><em>option</em><b>);</b></pre>

<h3>Description:</h3>
<p> Calculates percentages of the ratio <em>Numerator</em>/<em>Denominator</em>. 
The default is to return 1 decimal place. Changing <em>option</em> to 2
allows for 2 decimal places. Other options may be defined in the future. </p>

<p>If the <em>Denominator</em> is zero, the function returns a blank string. </p>

<h3>See Also:</h3>
<p>
<a href="#MulDiv">MulDiv( )</a>  <br/>
<a href="#FormDecimal">FormDecimal( )</a>  <br/>
</p>

<p>
<a rel="up" href="#C"> ^ --C-- </a>
</p>


<!-- ================================= -->
<hr/><a name="caldat"></a> <h2>caldat</h2>
<h3>Function Name: caldat( ) -- LCX 16 TMGT 32s NCONN 32c TMGT 64s</h3>
<h3>Synopsis:</h3>
<pre><em>date</em><b> = caldat(</b><em>number</em><b>);</b></pre>

<h3>Description:</h3>
<p>Converts an integer Julian day number to the corresponding
date.  The Julian Day number returned will be the 
number of the 24-hour period beginning at noon on this date.</p>

<p>The opposite function is <a href="#julday">julday( ) </a> which
takes a date and returns the Julian Day number of the
24-hour period beginning at noon on this date.  </p>



<h3>Return Value:</h3>
<p>The returned value is the date corresponding to the Julian Day number, in whatever 
standard date format has been set up on the system, as described under 
<a href="#date">date( )</a></p>

<h3>Standalone Replacement:</h3>
<p>Since the date and time are defined by the server in the 
client/server systems,
the standalone version of this function, as made available to the
the LC97, LC64, and LCXT programs, the function is called 
<a href="#zfunctions">
zcaldat()</a></p>

<h3>See Also:</h3>
<p>
<a href="#julday">julday( )</a>,  <br/>
<a href="#DateFromWeek">DateFromWeek( )</a>,   <br/>
<a href="#WeekShift">WeekShift( )</a>, <br/>
<a href="#date">date( )</a> <br/>
</p>

<p>
<a rel="up" href="#C"> ^ --C-- </a>
</p>

<!-- ================================= -->
<hr/><a name="cannedindex"></a> <h2>cannedindex</h2>
<h3>Function Name: cannedindex() -- LCX 16</h3>

<h3>Synopsis:</h3>
<pre><em>handle</em><b> = cannedindex(</b> <em>siname</em><b>, </b><em>table </em><b>, </b><em>repfile </em><b>, </b><em>Ffiles </em><b>, </b><em>Ffunction </em><b>, </b><em>Forient </em><b>, </b><em>Fparam </em><b>);</b></pre>

<h3>Description:</h3>
<p>This reads a stored status index and produces the report from that file, using the same formatting 
code as the regular status index would. </p>

<h3>See Also:</h3>
<p><a href="#varSI">varSI( )</a>
</p>

<p>
<a rel="up" href="#C"> ^ --C-- </a>
</p>


<!-- ================================= -->
<hr/><a name="capital"></a> <h2>capital</h2>
<h3>Function Name: capital() -- LCX 16 LCX 32s LCX 32c LCX 64</h3>
<h3>Synopsis:</h3>
<pre><em>TEXT</em><b> = capital(</b><em>Text</em><b>);</b></pre>

<h3>Description:</h3>
<p>The <b>capital( )</b> function converts text to upper-case (capitals). </p>

<p>The <a href="#minuscule">minuscule( )</a>  function converts to lower case (minuscules).  </p>

<h3>Return Value:</h3>
<p>The text of the argument where all lower-case letters are converted to upper case. </p>

<h3>See Also:</h3>
<p>
<a href="#minuscule"> minuscule( ) </a> 
</p>
<p>
<a rel="up" href="#C"> ^ --C-- </a>
</p>

<!-- ================================= -->
<hr/><a name="cleantext"></a> <h2>cleantext</h2> 
<h3>Function Name: cleantext() -- NCONN 32c TMGT 32s TMGT 64s</h3>
<h3>Synopsis:</h3>
<pre><em>text</em><b> = cleantext(</b><em>intextbase</em><b>);</b></pre>
<h3>Description:</h3>

<p>This function takes a text that may contain various nonprintable characters 
in the range 0x1 to 0x1f and removes all of them. Only line-break, 0xa, will be
left.  High-bit characters, from 0x80 and up are passed through. 
</p>

<h3>See Also:</h3>
<p>
<a href="#CleanFileName">CleanFileName( )</a> <br/>
<a href="#EncodeTag">EncodeTag( )</a> <br/>
<a href="#URLEncode">URLEncode( )</a> <br/>
</p>
<p>
<a rel="up" href="#C"> ^ --C-- </a>
</p>

<!-- ================================= -->
<hr/><a name="CleanFileName"></a> <h2>CleanFileName</h2>
<h3>Function Name: CleanFileName() -- LCX 32 LCX 64</h3>
<h3>Synopsis:</h3>
<pre><em>name</em><b> = CleanFileName(</b><em>filename</em><b>,</b><em>degree</em><b>);</b></pre>

<h3>Description:</h3>

<p>This function takes a file-name and cleans it of all illegal or nuisance characters, 
leaving a name that is legal in the file-system. </p>

<p>If <em>degree</em> is 0, only actually illegal characters, that would preclude the file with 
this name from being created, are removed. <br/> 
On Windows, these are: <tt> / \ : * ? " &lt; &gt; | </tt><br/>
On Linux, this is: <tt> / </tt><br/>
</p>

<p>If <em>degree</em> is 1, additional otherwise legal characters that are unadvised are also removed. <br/> 
On Windows, these are: <tt> ~ .  </tt><br/>
On Linux, these are: <tt> ~ : </tt>
</p>

<p>If <em>degree</em> is 2, additional otherwise legal characters that interfere with a shell are also removed. <br/>
On Windows, these are: <tt> space ' &amp; </tt><br/>
On Linux, these are: <tt> space ' &amp; \ * ? " ` &lt; &gt; | </tt>
</p>

<p>If <em>degree</em> is 3, everything but letters, digits, and underscores are replaced by underscores. 
This will make the name suitable for being used as part of an LCX function name.  This will always be the same
for all operating systems.  </p>

<p>If <em>degree</em> is 4, everything but letters, digits, spaces, and periods
are replaced by spaces. 
This will make the name suitable for being used as a description string, and
possibly less useful as a file-name, because of all the spaces.
This works the same for all operating systems.  </p>

<p>The sets of characters that are removed at each level 0-2 varies with the OS; 
Windows outlaws more characters than Unix, their sets of inadvised characters are different, 
and the shells on the two systems also differ. All removed characters are replaced by
underscores; this makes this function non-reversible. The functions
<a href="#EncodeTag">EncodeTag( )</a> generates a reversible name that may also be a legal
filename, depending on the selected escape-character, and this can be undone with the 
<a href="#DecodeTag">DecodeTag( )</a> function.  Similarly, 
<a href="#URLEncode">URLEncode( )</a> and <a href="#URLDecode">URLDecode( )</a> 
are available for generating and converting strings that are used with HTML. </p> 

<p>The filename should be the file-name part, not a full path-name or a filename.extension pair; 
as the path-separators are illegal characters in file-names, and multiple periods in file-names 
is unadvised on Windows.</p>

<h3>See Also:</h3> 
<p>
<a href="#EncodeTag">EncodeTag( )</a> <br/>
<a href="#DecodeTag">DecodeTag( )</a> <br/> 
<a href="#MakeAlfa">MakeAlfa( )</a> <br/>
<a href="#URLDecode">URLDecode( )</a> <br/>
<a href="#URLEncode">URLEncode( )</a> <br/>
</p>

<p>
<a rel="up" href="#C"> ^ --C-- </a>
</p>
<!-- ================================= -->
<hr/><a name="clear"></a> <h2>clear</h2>
<h3>Function Name: clear() -- RCONN 16 NCONN 32c TMGT 32s TMGT 64s</h3>
<h3>Synopsis:</h3>
<pre><em>message</em><b> = clear(</b><em>table</em><b>);</b></pre>

<h3>Description:</h3>
<p> This function clears out the current record in the named table.  
Numerical fields in the table are set to 0, and text fields are set to blank.</p>

<h3>Return Value:</h3>
<p>Status of the operation, encoded as a set where the first value is the 
numeric code and the second value is a standard error message. 
Use <a href="#setitem">setitem( )</a>  to pick out the value for use in 
<a href="#if.2delse">if-else</a> tests.</p>

<h3>See Also:</h3> 
<p>
<a href="#put">put( )</a> <br/>
<a href="#insert"> insert( ) </a><br/>
</p>
<p>
<a rel="up" href="#C"> ^ --C-- </a>
</p>


<!-- ================================= -->
<hr/><a name="concat"></a> <h2>concat</h2>
<h3>Function Name: concat( ) -- LCX 16 LCX 32c LCX 32s LCX 64</h3>
<h3>Synopsis:</h3>
<pre>
<em>text</em><b> = concat(</b><em>item ...</em><b>)</b>
<em>text</em><b> = CONCAT(</b><em>item ...</em><b>)</b>
</pre>

<h3>Description:</h3>
<p>This function concatenates its arguments and returns the result.   This can in general 
not be picked apart in an exact reverse manner. If this is desired, use the 
<a href="#makeset">makeset( )</a>
function instead. <b>concat( )</b> is also used to feed multi-part data into functions like 
<a href="#yesno">yesno( )</a>  and 
<a href="#trace">trace( ) (16-bit)</a>  that only take one argument to be displayed.</p>

<h3>Return Value:</h3>
<p>The left-to right concatenation of the arguments.</p>

<h3>See Also:</h3>
<p><a href="#makeset">makeset( )</a> <br/> 
<a href="#substr">substr( ) </a><br/>
</p>

<h3>Example:</h3>
<pre>
abcd( )
{
    string x, y;
    y = "Value Y";
    x = concat("Example ", 4, " of concat( ) ", y);
    return(x);
}
</pre>
<p>
This function will return the text:</p>
<pre> Example 4 of concat( ) Value Y</pre>
<p>
<a rel="up" href="#C"> ^ --C-- </a>
</p>


<!-- also quickconnect NCONN 32c -->

<!-- ================================= -->
<hr/><a name="connect"></a> <h2>connect</h2>
<h3>Function Name: connect( ) -- RCONN 16 NCONN 32c TMGT 32s TMGT 64s</h3>
<h3>Function Name: quickconnect( ) -- NCONN 32c</h3>

<h3>Synopsis:</h3>
<pre>
<em>status</em><b> = connect(</b><em>operation</em><b>, </b><em>itembase</em><b>,</b><em>itemid</em><b>, </b><em>relid</em><b>)</b>
<em>status</em><b> = connect(</b><em>operation</em><b>, </b><em>itembase</em><b>,</b><em>itemid</em><b>, </b><em>relid</em><b>, </b><em>parameter</em><b>)</b>
</pre>

<h3>Description:</h3>
<p>This function makes a connection defined in the RCONN record pair matching the given 
<em>operation</em> and <em>itembase</em>.  The connection is done between the two objects identified as 
<em>itemid</em> in the table <em>itembase</em> and <em>relid</em> in the table <em>relbase</em>, 
defined in the RCONN record. After the <b>connect( )</b>
call the current record in RCONN is this description record. The two tables'  
current records are the records of the two given identities, and the connection table's 
current record is the connection between them. You may use 
<a href="#get">get( )</a>, <a href="#multiget">multiget( )</a>, or <a href="#InValue">InValue( )</a>
to read the values in the fields in the record, and 
<a href="#put">put( )</a>, <a href="#multiput">multiput( )</a>, or <a href="#OutValue">OutValue( )</a>
and <a href="#update">update( )</a> to modify the record values in these tables.</p>

<p>The optional last argument, <em>parameter</em> is passed to this connection function. It may be used
for site-codes or other invariant data that needs to be made available to the 
<a href="call3204.html">connection callback-function</a> when the connection is being made. 
If this argument is not present, the callback-function will receive a blank string.  </p> 

<p>On 32-bit systems, the function specified in the relevant records of RCONN field ONMAKE are called on 
the server or client as per the code in the field ONMAKEMODE of RCONN.  Most configurations will use this, 
but there is an option of a server-side only call to a function specified in <a href="serverini.html">
SERVER.INI</a>, section [RCONN] entry MAKECONTROL=. </p>

<p>On 16-bit systems, the preferred definition of these callback functions is the MAKECONTROL= entry in 
winpcs.ini section [RCONN]. The MAKE= callback functions in STADLG.INI may also called if defined, 
but these are deprecated as they only can be found when making connections in one direction and not the other. </p>

<h3>Return Value:</h3>
<p>Status of the operation, encoded as a set where the first value is the numeric code and 
the second value is a standard error message. Use <a href="#setitem"> setitem( )</a>  
to pick out the value for use in <a href="#if.2delse">if-else</a> tests.</p>

<h3>See Also:</h3>
<p><a href="#reconnectall">reconnectall( )</a><br/>
<a href="#update"> update( ) </a><br/>
<a href="#InValue"> InValue( ) </a><br/>
<a href="#OutValue"> OutValue( ) </a><br/>
<a href="call3204.html">Make and Break callbacks (32-bit) </a><br/>
<a href="call1604.html">Make and Break callbacks (16-bit) </a><br/>
</p>

<h3>Example:</h3>
<p>(presupposes that there are two tables REFITR and ENGEQUIP that have a connection 
defined)</p>
<pre>
MakeMech(string tag, string itr)
{
    string cs;
    cs = connect("REFITR", "ENGEQUIP", tag, itr);
    if(setitem(cs, 0) == 0)
    {
        message("Connection", "Connection between ", tag, 
            " and", itr, " failed: ",
            setitem(cs, 1));
    }
    return(1);
}
</pre>

<p>
<a rel="up" href="#C"> ^ --C-- </a>
</p>


<!-- ================================= -->
<hr/><a name="connrelations"></a> <h2>connrelations</h2>
<h3>Function Name: connrelations( ) -- TMGT 32s NCONN 32c</h3>
<h3>Synopsis:</h3>
<pre><em>set</em><b> = connrelations(</b><em>itembase</em><b>);</b></pre>

<h3>Description</h3>
<p>Returns a set containing the names of all the possibly connected tables 
to the given tablename argument.</p>

<p>
<a rel="up" href="#C"> ^ --C-- </a>
</p>

<!-- ================================= -->
<hr/><a name="connset"></a> <h2>connset</h2>
<h3>Function Name: connset( ) -- RCONN 16 TMGT 32s NCONN 32c TMGT 64s</h3>

<h3>Synopsis:</h3>
<pre><em>set</em><b> = connset(</b><em>operation</em><b>, </b><em>itembase</em><b>, </b><em>itemID</em><b>);</b></pre>

<h3>Description</h3>
<p> Performs the search of a connection identified by the operation and itembase to some 
object known by its itemID.  The found identifiers are returned in the set. This is empty if 
none was found. The functions 
<a href="#setlen">setlen( )</a> , 
<a href="#setitem">setitem( )</a> , and 
<a href="#sortset">sortset( )</a>  may be used on this 
set to extract the information. This function is most useful when a simple list of 
identifiers are desired. For  complicated looping on 16-bit systems, the 
<a href="#startconnscann">startconnscann( )</a> family might be a better choice.  These functions exist
on the 32bit client also, but their semantics are not very well matched to the network
requirements and the way we want to do things.  </p>

<p>An example of using <b>connset( )</b> is shown in the 
<a href="dde.html#DDE.20server.20example">DDE server example</a> . </p>

<h3>See Also:</h3>
<p>
<a href="#startconnscan">startconnscan( )</a> <br/> 
<a href="#sortset">sortset( )</a> <br/> 
<a href="#Text">Text( )</a> <br/>
<a href="#traceconn">traceconn( )</a> <br/>
</p>

<p>
<a rel="up" href="#C"> ^ --C-- </a>
</p>

<!-- ================================= -->
<hr/><a name="ConSelect"></a> <h2>ConSelect</h2>
<h3>Function Name: ConSelect( ) -- VREP 32c TMGT 32s TMGT 64s</h3>
<h3>Synopsis:</h3>
<pre><em>Rhandle</em><b> = ConSelect(</b><em>intable</em><b>, </b><em>fieldset</em><b>, </b><em>filterexpr</em><b>, </b><em>leftset</em><b>, </b><em>rightset</em><b>);</b></pre>

<h3>Description:</h3>
<p>This function performs a variant of listing report on the server, 
and returns the values of the specified fields 
<em>fieldset</em> from the table <em>intable</em>, possibly where 
the <em>filterexpr</em> expression matches
the value in the table. This expression is set to 1 for passing 
everything.</p>

<p>For instance-tables or connection-tables, data from the two 
connected tables may also be included, these are
identified by two of the first four fields in <em>fieldset</em> 
and their fields themselves are given in the 
<em>leftset</em> and <em>rightset</em> lists.</p>

<h3>Arguments</h3>
<p>The <em>intable</em> that data is listed from can be any table. 
For the regular, non-connection, tables, only the <em>fieldset</em>
is used, and the two other lists of fields, <em>leftset</em> and
<em>rightset</em> will be ignored and should be left blank. </p>

<p> Some special considerations apply when this is a connection
or instance table, that is, a table identified as a CONBASE
in RCONN. In this case, the first four fields in the <em>fieldset</em>
should be the four table-name and record-number fields for the two
connected tables, usually these are called WLEFT (or LEFT), LEFT_RSERIAL, WRIGHT (or RIGHT), and RIGHT_RSERIAL. 
The fields in <em>leftset</em> will be expected to be from the table
and record identified via the first two fields,  similarly the fields
in <em>rightset</em> will be expected to be from the table and record 
identified via the second two fields. Should any of these four fields not
be of interest to the user of the report, the field-name can be prefixed
with a ! (exclamation mark). This will make the server omit the field 
in the returned report, possibly saving network bandwidth. </p>

<p>The fieldnames can be on the form <tt>#<em>cxdictname</em></tt> 
in order to handle variations in field-naming, for identifiers or 
descriptions. These names are discussed further under
<a href="#StdField">StdField( )</a> 
and
<a href="cxdict.html">the CXDICT table</a> 
</p>

<h3>Return Value:</h3>
<p>The data is returned as a "naked" report data set, identified as a 
numeric value.  The data may be accessed
using the <a href="#RepGet ">RepGet( )</a> function, in a manner 
similar to any other report. Some of the options of 
<a href="#RepControl ">RepControl( )</a> and 
<a href="#RepInfo ">RepInfo( )</a> 
are also available.  When the report-data is no longer needed, 
the <a href="#RepClose ">RepClose( )</a> 
function should be used to deallocate the report data.  The columns 
of this data corresponds to the 
fields referenced in the three sets,  fieldset, leftset, rightset. </p>

<p>The <a href="#RepInfo ">RepInfo( )</a> 
calls that are meaningful for these internal reports are
<br/><b>RepInfo("rows", </b><em>Rhandle</em><b>)</b>, which returns 
the number of rows or records in the report-set. 
<br/><b>RepInfo("cols", </b><em>Rhandle</em><b>)</b>, which returns 
the number of column or fields in the report-set.
This number of colums will start out the same as 
<b> <a href="#setlen">setlen</a> ( <a href="#concat">concat</a> 
(<em>fieldset</em>, <em>leftset</em>, <em>rightset</em>))</b></p>

<p>The <a href="#RepControl ">RepControl( )</a> 
commands that are meaningfil for these internal reports are
<br/><b>RepControl("L:#</b><em>n</em><b>",</b><em>Rhandle</em><b>)</b>  
for selecting the columns to be used in sorting, and
<br/><b>RepControl("P:SORTA",</b><em>Rhandle</em><b>)</b> for 
performing sorting in ascending order
<br/><b>RepControl("P:SORTD",</b><em>Rhandle</em><b>)</b> for 
performing sorting in descending order</p>

<h3>Interaction with the Odometer:</h3>
<p>If an Odometer has been opened by <a href="#CounterHere">CounterHere( )</a> 
prior to calling this function, it will be discovered and incremented a 
number of times depending on data traffic from the server.  The purpose 
of this is to give the user feedback that there is something happening, 
and to indicate progress.  The activity will however not stop if the 
odometer is closed, so it is necessary to discover and handle this 
using the <a href="#CounterCheck">CounterCheck( )</a> 
function after <b>ConSelect( )</b> is called. </p>

<a name="ConSelectExample1"/>
<h3>Example 1: using a connection-table</h3>

<p>This is typically done as part of a larger, listing-style report. </p>

<pre>
ConData(string table, string dlimit)
{
    string stafield, vpx, rcount, j;
    string ttable, tag, ac1s;

    stafield = "STATUS";
    if("CONPMR" == table) { stafield = "WSTATE"; }

    vpx = ConSelect(table,
        makeset("WLEFT", "!LEFT_RSERIAL", "!WRIGHT", "!RIGHT_RSERIAL",
            "RSERIAL", stafield),
        dlimit,
        makeset("#ITEMFLD", "#ITEMDESFLDS", "ICON", "ENG_STATUS"),
        makeset("#ITEMFLD", "#ITEMDESFLDS") );

    rcount = RepInfo("rows", vpx);

    RepControl("L:#0", vpx);
    RepControl("P:SORTA", vpx);
    
    for(j = 0; j &lt; rcount; j+=1)
    {
        ttable = RepGet(j-rcount, 0, vpx);
        tag = RepGet(j-rcount, 3, vpx);

        ac1s = connset("CERTAC1", ttable, tag);
        ac1s = setitem(ac1s,0);
        RepPut(j-rcount, 1, ac1s, vpx);
    }
    return(vpx);
}
</pre>


<a name="ConSelectExample2"/>
<h3>Example 2: using a non-connection-table</h3>

<p>This example is typically seen in the client-side file <b>global.lcx</b>, where 
some reference table is being read into a report structure, and this is then stored as
a global object in the client, for later quick reference. Typical such tables are things 
like discipline, cable types, system numbers, area numbers, inspectors ... all of which are 
quite small, and the expense of reading the entire table once is found to be much less 
than looking up individual records across the network whenever one is needed. </p>

<pre>
CacheCBase(string table)
{
    string dvpx;

    dvpx = GlobalFind(table);
    if(notext(dvpx))
    {
        dvpx = ConSelect(table,
            makeset(StdField(table, "ITEMFLD"), StdField(table, "ITEMDESFLDS"), "RSERIAL"), 
            1, "", "");

        RepControl("L:#0", dvpx);
        RepControl("P:ASORT", dvpx);
        GlobalDefine(table, dvpx);
    }
    return(dvpx);
}
</pre>

<p>Notice the arguments to <b>ConSelect()</b> here: the first one is a table-name, there are then three
fields listed as the <em>fieldset</em>, but since this is not expected to be a connection table,
the <em>leftset</em> and <em>rightset</em> are both blank as they will be ignored here. </p>
<p>The resulting report will have three columns, corresponding to the item-field, description-field, and
record number, as per the elements of the <em>fieldset</em>. Later uses of a global report like this
can be either lookup calls using 
<a href="#RepSearch">RepSearch( )</a> or
<a href="#RepSearchSet">RepSearchSet( )</a>,
or generating selection-lists using
<a href="#selectdialogr">selectdialogr( )</a>. See the 
<a href="#selectdialogrexample"> example for selectdialogr( )</a>
</p>

<h3>See Also:</h3>
<p><a href="#RepControl">RepControl( )</a><br/>
<a href="#RepPut">RepPut( )</a> <br/>
<a href="#RepGet">RepGet( )</a> <br/>
<a href="#RepInfo">RepInfo( )</a> <br/>
<a href="#RepClose">RepClose( )</a> <br/>
<a href="#RepSearch">RepSearch( )</a> <br/>
<a href="#RepSearchSet">RepSearchSet( )</a> <br/>
<a href="#selectdialogr">selectdialogr( )</a> <br/>
<a href="#CounterHere">CounterHere( )</a> <br/>
<a href="#CounterCheck">CounterCheck( )</a> <br/>
</p>

<p>
<a rel="up" href="#C"> ^ --C-- </a>
</p>

<!-- ================================= -->
<hr/><a name="converttoset"></a> <h2>converttoset</h2>
<h3>Function Name: converttoset( ) -- LCX 16 LCX 32s LCX 32c LCX 64</h3>
<h3>Synopsis:</h3>
<pre><em>set</em><b> = converttoset(</b><em>inbound</em><b>, </b><em>codes</em><b>);</b></pre>

<h3>Description:</h3>
<p>Convert a composite string to a set. </p>

<p> Codes are: <br/>
<b>=</b><em>x</em> which means separate at the nth matching character <em>x</em>, which is to be removed 
and replaced by the proper set character.<br/>
<b>|0</b> means separate at a numeric character (0--9)<br/>
<b>|A</b> means separate at first following alphabetic (A--Z or a--z) character <br/>
<b>$</b><em>count</em> means take out a substring of length <em>count</em> at this point<br/>
</p>

<p>Any remaining tail set parts are left as the last part of the set.</p>

<h3>Examples:</h3>
<p>1. Input <b>94.21.03</b>  Control <b>=.=.</b><br/>
<b> converttoset("94.21.03", "=.=.") </b><br/>
gives a set <b>94+21+03+</b></p>

<p>2. Input:   <b>1.5"-1435BX-DGY-9923G </b> Control: <b>=-$4=-=-|A</b><br/>
<b>converttoset("1.5\x22 -1435BX-DGY-9923G", "=-$4=-=-|A")</b><br/>
gives: <b> 1.5"+1435+BX+DGY+9923+G+</b></p>

<p>3. The expression <b> set = converttoset(date(), "|/|/") </b><br/>
will give <b>1997+11+23+</b><br/>
on November 23 1997 provided the system date-formatting is YYYY/MM/DD.</p>

<h3>See Also:</h3>
<p>
<a href="#makeset">makeset( ) </a><br/>
<a href="#setitem">setitem( ) </a><br/>
<a href="#tabtoset">tabtoset( ) </a><br/>
<a href="#date">date( ) </a><br/>
</p>

<p>
<a rel="up" href="#C"> ^ --C-- </a>
</p>

<!-- ================================= -->
<hr/><a name="CopyFile"></a> <h2>CopyFile</h2>
<h3>Function Name: CopyFile( ) -- LCX 16 LCX 32s LCX 32c LCX 64</h3>
<h3>Synopsis:</h3>
<pre><em>status</em><b> = CopyFile(</b><em>originalpath</em><b>, </b><em>copypath</em><b>);</b></pre>

<h3>Description:</h3>
<p>Copy a file from the <em>originalpath</em> to the <em>copypath</em>. The function returns -1 on errors, and 
0 on OK. The copy is done by opening the original in read-only mode and the copy as a 
create and overwrite, and then reading and writing 8192 bytes at a time until all are 
copied. 
</p>

<h3>See Also:</h3>
<p><a href="#filexists">filexists( )</a> <br/> 
<a href="#DeleteFile">DeleteFile( )</a> <br/> 
<a href="#MakeDir">MakeDir( )</a><br/> 
</p>

<p>
<a rel="up" href="#C"> ^ --C-- </a>
</p>

<!-- ================================= -->
<hr/><a name="CounterHere"></a> <h2>CounterHere</h2>
<h3>Function Name: CounterHere( ) -- LCX 16 LCXCLI 32c </h3>
<h3>Synopsis:</h3>
<pre><b>CounterHere(</b><em>text</em><b>, </b><em>digits</em><b>)
CounterHere(</b><em>text</em><b>,</b><em>digits</em><b>, </b><em>title</em><b>);</b></pre>

<h3>Description:</h3>
<p>Opens an odometer window, and gives it the desired heading text. 
If the title argument is present, a large odometer-window is opened, 
otherwise it will be a small odometer-window.</p>

<p>If any odometer window is up within the same execution context, 
its heading text and title, if present, is replaced.  </p>

<p>On the 32-bit systems, there may be several simultaneous reporting
processes running at the same time and, some of which can
have their own odometer window that they show their progress in.  Thus,
more than one odometer window up at the same time ticking away is possible.</p>

<p>The following is an example of what a small odometer window looks like. 
The call opening it was:</p>
<pre>
<b>CounterHere("Hallo", -1);</b></pre>

<img src="smallodo.jpg" alt="Small Odometer window"/>
<p>and it clearly shows one decimal place. </p>

<p>The following is an example of what a large odometer window looks like. The call opening it was:</p>
<pre><b> CounterHere("Title in Counter", 1, "This is a bigger text");</b></pre>

<img src="bigodo.jpg" alt="Big Odometer window"/>
<p>This shows one fixed zero to the right. </p>

<p>These windows are typically used during long-winded operations 
when the user may need the option to cut the operation short. 
To this end, the Stop button is used. To update the display the 
<a href="#CounterStep">CounterStep( )</a>  function will nudge 
the last movable digit 1/10 step ahead, and the 
<a href="#CounterSet">CounterSet( )</a>  function will set 
any numerical value into the display.Updating with 
<a href="#CounterStep">CounterStep( )</a>  causes the visual 
display to resemble a mechanical counting device, such 
as the odometer in a car, hence that name for the window.</p>

<p> When the Stop button is pushed, the odometer window will notify 
the underlying code (which is done via the 
<a href="#CounterCheck">CounterCheck( )</a>  function for 
LCX code) and then close. The underlying code then must react to 
this event and break off its operation at a time when it is OK to 
do so. For example, when copying records, the copying process would 
normally be allowed to complete the current record before stopping. </p>

<p> When an operation is allowed to complete normally, the odometer 
winow is closed using the 
<a href="#CounterAway">CounterAway( )</a>  function. This 
function may be called even if the odometer window was 
already closed, in which case it does nothing.</p>

<p> The digits parameter, if zero or positive, indicates how many 
fixed zeroes are to be shown to the right. If negative, 
the value indicates how many fractional digits are to be shown. 
Fixed zeros and whole number parts are shown with white figures on black, 
fractional parts are shown with  black figures on white, as shown in 
the example pictures.  
The standard odometer window always has 6 digits total, however. </p>

<h3>See Also:</h3>
<p>
<a href="#CounterAway">CounterAway( )</a> <br/> 
<a href="#CounterCheck">CounterCheck( )</a> <br/> 
<a href="#CounterStep">CounterStep( )</a> <br/> 
<a href="#CounterSet">CounterSet( )</a> <br/> 
<a href="#Odometer.20Example"> Odometer Example </a><br/>
</p>

<p>
<a rel="up" href="#C"> ^ --C-- </a>
</p>

<!-- ================================= -->
<hr/><a name="Odometer.20Example"></a> <h2>Odometer Example</h2>

<p>The following <b>main( )</b> function opens an odometer window, runs a loop counting to 500 
and then closes it. If the user hits the Stop button, the loop will be broken off 
prematurely.</p>

<pre>
main( )
{
    int a;

    CounterHere ("Hallo", 1);

    for (a = 0; a&lt;500; a+= 1)
    {
        CounterStep( ) ;
        if(CounterCheck( )  == 1)
        {
            break ;
        }
    }
    message ("Afterwards", "Now you see it");
    CounterAway( ) ;
    message ("Afterwards", "Now you dont");
    return (0);
}
</pre>

<h3>See Also:</h3>
<p> Other Examples <br/>
<a href="#CounterHere">CounterHere( ) </a><br/>
</p>

<p>
<a rel="up" href="#C"> ^ --C-- </a>
</p>

<!-- ================================= -->
<hr/><a name="CounterAway"></a> <h2>CounterAway</h2> 

<h3>Function Name: CounterAway( ) -- LCX 16 LCXCLI 32c </h3>
<h3>Synopsis:</h3>
<pre><b>CounterAway( );</b></pre>

<h3>Description:</h3>
<p>Closes any opened odometer window.</p>

<h3>See Also:</h3>
<p><a href="#CounterHere">CounterHere( )</a> <br/> 
<a href="#CounterCheck">CounterCheck( )</a> <br/> 
<a href="#CounterStep">CounterStep( )</a> <br/> 
<a href="#CounterSet">CounterSet( )</a> <br/>
</p>

<p>
<a rel="up" href="#C"> ^ --C-- </a>
</p>

<!-- ================================= -->
<hr/><a name="CounterCheck"></a> <h2>CounterCheck</h2> 

<h3>Function Name: CounterCheck( ) -- LCX 16 LCXCLI 32c </h3>
<h3>Synopsis:</h3>
<pre><em>status</em><b> = CounterCheck( );</b></pre>

<h3>Description:</h3>
<p>Checks to see if the odometer window is still up. Returns <b>1</b> if it is gone, <b>0</b> if it still there.</p>

<h3>See Also:</h3>
<p><a href="#CounterHere">CounterHere( )</a> <br/> 
<a href="#CounterAway">CounterAway( )</a> <br/> 
<a href="#CounterStep">CounterStep( )</a> <br/> 
<a href="#CounterSet">CounterSet( )</a><br/>
</p>

<p>
<a rel="up" href="#C"> ^ --C-- </a>
</p>

<!-- ================================= -->
<hr/><a name="CounterStep"></a> <h2>CounterStep</h2>

<h3>Function Name: CounterStep( ) -- LCX 16 LCXCLI 32c </h3>
<h3>Synopsis:</h3>
<pre><b>CounterStep( );</b></pre>

<h3>Description:</h3>
<p>Steps the odometer one tenth of the last moveable digit forwards.
</p>
<h3>See Also:</h3>
<p><a href="#CounterHere">CounterHere( )</a> <br/> 
<a href="#CounterAway">CounterAway( )</a> <br/> 
<a href="#CounterCheck">CounterCheck( )</a> <br/> 
<a href="#CounterSet">CounterSet( )</a><br/>
</p>

<p>
<a rel="up" href="#C"> ^ --C-- </a>
</p>

<!-- ================================= -->
<hr/><a name="CounterSet"></a> <h2>CounterSet</h2> 

<h3>Function Name: CounterSet( ) -- LCX 16 LCXCLI 32c </h3>
<h3>Synopsis:</h3>
<pre><b>CounterSet(value);</b></pre>

<h3>Description:</h3>
<p>Sets the counter's active digits to the indicated value. </p>

<h3>See Also:</h3>
<p>
<a href="#CounterHere">CounterHere( )</a> <br/> 
<a href="#CounterAway">CounterAway( )</a> <br/> 
<a href="#CounterCheck">CounterCheck( )</a> <br/> 
<a href="#CounterStep">CounterStep( )</a><br/>
</p>

<p>
<a rel="up" href="#C"> ^ --C-- </a>
</p>

<!-- ================================= -->
<hr/><a name="CreateAuto"></a> <h2>CreateAuto</h2>
<h3>Function Name: CreateAuto( ) -- NCONN 32c </h3>

<h3>Synopsis:</h3>
<pre><em>text</em><b> = CreateAuto(</b><em>dialogref</em><b>, </b><em>autotable</em><b>, </b><em>autotype</em><b>, </b><em>autofield</em><b>, </b><em>prefix</em><b>, </b><em>digits</em><b>, </b><em>tagtable</em><b>, </b><em>tagnumber</em><b>, </b><em>cstable</em><b>, </b><em>csnumber</em><b>);</b></pre>

<pre><em>text</em><b> = CreateAuto(</b><em>dialogref</em><b>, </b><em>autotable</em><b>, </b><em>autotype</em><b>, </b><em>autofield</em><b>, </b><em>prefix</em><b>, </b><em>digits</em><b>, </b><em>tagtable</em><b>, </b><em>tagnumber</em><b>);</b></pre>

<h3>Description:</h3>
<p> UNDER CONSTRUCTION </p>

<p>This function runs through the creation process of some automatic object (typically punchitems) with only two
passes to the server. After the object has been created it is connected to the given tag-number, and if there is
a sibling check-sheet involved, as it may be for punchitems in some systems, the reference to this is included
as well, in the first version shown above.</p>

<p><em>dialogref</em> refers to a section in STADLG.INI, where the status values,
and controls relevant to entering values for the new record, are defined. In additon
to these, there are reference to 3 LCX functions, with the entries
prepare=, accept=, and collect=, which are used to customize the 
production. </p>

<p>prepare is run on the server. Its purpose is to establish initial values for
the dialog-box controls prior to them being displayed to the user. This function
is called with 19 arguments as follows:</p>

<pre>
preparefunction(
	string pltable, 	 		// Table for punchitems or similar
	string plshortfield, 		// item-field in this table
	string plshortno, 			// short number later long number
	string edescr, 				// blank
	string econbase, 			// blank
	string ecarrierfield, 		// blank
	string estatusfield, 		// blank
	string ecatflag, 			// blank
	string wherefrom, 			// blank
	string tagtable, 			// Table of object having the punchitem on it
	string tagno, 				// identifier of this object
	string ecarrier, 			// blank
	string pltype, 				// Type as given in the function call
	string prefix, 				// Prefix as given in the function call
	string plserial, 			// record number of the new record
	string hierinfo, 			// blank
	string checkrefbase, 		// any check-sheet reference table
	string checkrefno, 			// any check-sheet reference number
	string createdialog) 		// Section in stadlg.ini 
</pre>

<p>This function should populate the various globals associated with the
dialog box. Its return value is a set, of which the first element becomes
the title of the dialog box.</p>

<p>accept is run on the client, when the dialog-box is to be OK'd. This
is analogous to the accept callback function in 
<a href="#wildstatus">wildstatus( )</a> .  Its purpose is to look at
the values in the dialog-box and refuse to accept bad values, and 
pass the good values. The function should return 1 for pass and 
acceptable values, and 0 for no pass and rejecting bad values. It is called
with one argument: </p>

<pre>
acceptfunction(string status);
</pre>

<p>Since this function is run on the client, it can open dialog-boxes and 
message boxes to inform the user about why values aren't acceptable.</p>

<p>collect is run on the server afterwards, when the dialog-box is
exited with OK, in order to gather the values from
the dialog-box elements, and put them into the table. It should return 0
to indicate that all is well. It has the following arguments: </p>

<pre>
collectfunction(
	string pltable, 	 		// Table for punchitems or similar
	string plshortfield, 		// item-field in this table
	string plshortno, 			// short number later long number
	string edescr, 				// blank
	string econbase, 			// blank
	string ecarrierfield, 		// blank
	string estatusfield, 		// blank
	string ecatflag, 			// blank
	string wherefrom, 			// blank
	string tagtable, 			// Table of object having the punchitem on it
	string tagno, 				// identifier of this object
	string ecarrier, 			// blank
	string pltype, 				// Type as given in the function call
	string prefix, 				// Prefix as given in the function call
	string plserial, 			// record number of the new record
	string hierinfo, 			// blank
	string checkrefbase, 		// any check-sheet reference table
	string checkrefno, 			// any check-sheet reference number
	string createdialog) 		// Section in stadlg.ini 
</pre>



<!-- <h3>Return Value:</h3> -->

<h3>See Also:</h3>
<p>
<a href="#nextinseq">nextinseq( )</a> <br/>
<a href="call0003.html"> Category 3, info-init function calls</a><br/>
</p>

<p>
<a rel="up" href="#C"> ^ --C-- </a>
</p>

<!-- ================================= -->
<hr/><a name="CreateSICache"></a> <h2>CreateSICache</h2>
<h3>Function Name: CreateSICache( ) -- NCONN 32c </h3>

<h3>Synopsis:</h3>
<pre><em>text</em><b> = CreateSICache(</b><em> table, </em><b>, </b><em> siname </em><b>);</b></pre>

<h3>Description:</h3>
<p> UNDER CONSTRUCTION </p>
<p>This function starts and runs the cached status-index, that stores
connection-information in the tables SCAHIER and SCAEQP. On mature projects,
this allows for faster reports, and it is also useful when checking, as
the lookups in SCAEQP tend to be simpler and faster than 
traceconn
processing. </p>

<p>Note that this is fairly sensitive to errors in the specifications
in STATREES.INI.</p>

<h3>Return Value:</h3>
<p>The function returns a 2-part set, first part is numeric. If this is 0 the
creation went OK, if this is non-zero, the caching job failed, and the second
part of the set will indicate why it failed. </p>

<h3>See Also:</h3>
<p>
<a href="#CachedSI">CachedSI( )</a> <br/>
<a href="#statusindexdirect">statusindexdirect( )</a> <br/>
<a href="#statusindexjor">statusindexjor( )</a> <br/>
<a href="#statusindex">statusindex( )</a> <br/>
<a href="#serverindexdirect">serverindexdirect( )</a> <br/> 
<a href="#serverindex">serverindex( )</a> <br/>
<a href="#statusindexupward">statusindexupward( )</a> <br/>
</p>

<p> 
<a rel="up" href="#C"> ^ --C-- </a>
</p>

<!-- ================================= -->
<hr/><a name="csvtoset"></a> <h2>csvtoset</h2>
<h3>Function Name: csvtoset( ) -- LCX 16 LCX 32s LCX 32c LCX 64 </h3>

<h3>Synopsis:</h3>
<pre><em>set</em><b> = csvtoset(</b> <em>record</em><b>,</b><em>fieldseparator</em><b>,</b><em>quote</em><b>);</b></pre>

<h3>Description:</h3>
<p>This function converts a CSV record, such as would be read in from a CSV file
using the
<a href="#FiReadLine">FiReadLine( )</a> 
funcion, to obtain the <em>record</em> argument. The <em>fieldseparator</em> and 
the <em>quote</em>
characters must be specified for the function call.  These should be 
specified simply as strings.  Unlike <a href="#tabtoset">tabtoset( )</a>, 
this function does not modify separators found within quoted strings in the input record. </p>

<h3>Return Value:</h3>
<p>The returned string is a set of the fields of the record. Field separators and quote characters inside 
quoted strings in the input are passed through to the output. </p>

<h3>Limitation:</h3>
<p>If the data itself contains any set-separating characters, the function will fail.  For the time
being, this is the plus sign character, but we might want to change this if it turns out
to be a problem, and use something like a high-8th-bit tab (ordinal 137) plus sign (ordinal 171) 
or space (ordinal 160) instead. </p>

<h3>See Also:</h3>
<p><a href="#converttoset">converttoset( )</a> <br/>
<a href="#tabtoset">tabtoset( )</a> <br/>
<a href="#FiStartRead">FiStartRead( )</a> <br/>
<a href="#FiReadLine">FiReadLine( )</a><br/>
</p>

<p>
<a rel="up" href="#C"> ^ --C-- </a>
</p>

<!-- ================================= -->
<hr/><a name="currency"></a> <h2>currency</h2>
<h3>Function Name: currency( ) -- LCX 16 </h3>

<h3>Synopsis:</h3>

<h3>Description:</h3>

<h3>Availability:</h3>
UNDER CONSTRUCTION. 32-bit version to be added.

<h3>See Also:</h3>

<p>
<a rel="up" href="#C"> ^ --C-- </a>
</p>

<!-- ================================= -->
<hr/><a name="CWULIB"/> <h2>CWULIB</h2>
<h3>Function Name: CWULIB( ) -- LCX 16 LCX 32s LCX 32c LCX 64 </h3>

<h3>Synopsis:</h3>
<pre><em>value</em><b> = CWULIB(</b><em>channel</em><b>,</b><em>parameter</em><b>);</b></pre>

<h3>Description:</h3>
<p>This function controls were debug-information as produced with
<a href="#trace">trace( )</a> 
goes. Traditionally, this was on the serial line COM1:, but since
serial ports no longer are universal, or USB-based ones are 
not necessarily COM1:, the possible places where debugging
information can be sent has been increased. In the WinPCS.INI there
is the DEBUG= entry that controls this overall, but the function here
may be used to override the WinPCS.INI setting and redirect the debug-
information. </p>

<p>
The <em>channel</em> and <em>parameter</em> indicates where the 
trace-printing from WinPCS and the <a href="#trace">trace( )</a> 
calls is going, as follows:</p>

<table border="1" cellspacing="1" cellpadding="2">
<tbody>

<tr valign="top"> 
<td> <em>channel</em> </td> 
<td> <em>parameter</em></td>
<td> Description</td>
<td> Example</td>
</tr>

<tr valign="top"> 
<td> 0 </td> 
<td> (anything) </td>
<td> Turns debug output off </td>
<td> CWULIB(0, 0) </td>
</tr>

<tr valign="top"> 
<td> 1, 2 </td> 
<td> Baud rate </td>
<td> Aim at serial port COM1 or COM2, with the given baud rate, 
usually 9600</td>
<td> CWULIB(1, 9600) </td>
</tr>

<tr valign="top"> 
<td> 3--7 </td> 
<td> varies </td>
<td> This applies to various reserved internal locations. </td>
<td> (no meaningful ones) </td>
</tr>

<tr valign="top"> 
<td> 8 </td> 
<td> IP-address </td>
<td> Send text to a receiving <a href="netdebug.html#netrx">netrx</a> program listening on the 
specified ip-address and port 16385</td>
<td> CWULIB(8, "10.0.1.104") </td>
</tr>

<tr valign="top"> 
<td> 8 </td> 
<td> IP-address:port </td>
<td> Send text to a receiving <a href="netdebug.html#netrx">netrx</a> program listening on the 
specified ip-address and port</td>
<td> CWULIB(8, "10.0.1.104:16386") </td>
</tr>

<tr valign="top"> 
<td> 9 </td> 
<td> IP-address </td>
<td> Send text to a receiving <a href="netdebug.html#udprx">udprx</a> program listening on the 
specified ip-address and port 16385</td>
<td> CWULIB(9, "10.0.1.104") </td>
</tr>

<tr valign="top"> 
<td> 9 </td> 
<td> IP-address:port </td>
<td> Send text to a receiving <a href="netdebug.html#udprx">udprx</a> program listening on the 
specified ip-address and port</td>
<td> CWULIB(9, "10.0.1.104:16386") </td>
</tr>


<tr valign="top"> 
<td> 11--18 </td> 
<td> Baud rate </td>
<td> Aim at one of the serial ports COM1 thru COM8, with the
given baud rate, usually 9600</td>
<td> CWULIB(14, 9600) </td>
</tr>

</tbody></table>

<h3>Availability:</h3>
<p>Serial ports links used to be the most common and are still supported. Obviously the
required hardware have to be present, which may no longer be the case on more recent
machines, although a USB-Serial converter will work once its COMn port is determined. </p>

<p>More common now is the network links, the net (8) or udp (9) variants that talk to a
<a href="netdebug.html#netrx">netrx</a> or <a href="netdebug.html#udprx">udprx</a> 
program at the other end. Several of these may be listening on different ports at the same time.
These listeners are available for Windows and Linux. </p>

<p>Note that for these network links, there
must not be any firewalling or other mechanisms that block the communication.
Only 32- and 64-bit systems have the capability of talking over a network link, 
or high-numbered COM ports; 16-bit systems are limited to using 
serial ports COM1 and COM2. </p>

<h3>See Also:</h3>
<p>
<a href="#trace">trace( )</a><br/> 
<a href="#AimDebugOutput">AimDebugOutput( )</a><br/>
<a href="netdebug.html#netrx">netrx</a> <br/>
<a href="netdebug.html#udprx">udprx</a> <br/>
</p>

<p>
<a rel="up" href="#C"> ^ --C-- </a>
</p>

<!-- ================================= -->
<!-- D -->


<hr/><a name="D"></a><h2>--D--</h2>
<p>
<a href="#date">          date( )</a><br/>
<a href="#DateAust">DateAust( )</a> <br/>
<a href="#DateCanonical"> DateCanonical( )</a><br/>
<a href="#DateFormatted">DateFormatted( )</a> <br/>
<a href="#DateFromWeek">  DateFromWeek( )</a> <br/>
<a href="#DDEsvclist">    DDEsvclist( )</a><br/>
<a href="#DDEconnect">    DDEconnect( )</a><br/>
<a href="#DDEdisconnect"> DDEdisconnect( )</a><br/>
<a href="#DDEexecute">    DDEexecute( )</a><br/>
<a href="#DDEpoke">       DDEpoke( )</a><br/>
<a href="#DDErequest">    DDErequest( )</a><br/>
<a href="#DDEstatus">     DDEstatus( )</a> <br/>
<a href="#ddeexecute">    ddeexecute( )</a><br/>
<a href="#ddelinktopic">  ddelinktopic( )</a><br/>
<a href="#ddepoke">       ddepoke( )</a> <br/>
<a href="#DebugLog">      DebugLog( )</a><br/>
<a href="#DecimalToInt">  DecimalToInt( )</a><br/>
<a href="#DecodeTag">     DecodeTag( )</a><br/>
<a href="#DefinedUser">DefinedUser( )</a> <br/>
<a href="#Delay">         Delay( )</a><br/>
<a href="#delete">        delete( )</a><br/>
<a href="#DeleteFile">    DeleteFile( )</a><br/>
<a href="#deletetag">     deletetag( )</a> <br/>
<a href="#dialogOK">      dialogOK( )</a><br/>
<a href="#dialogchange">  dialogchange( )</a> <br/>
<a href="#disconnect">    disconnect( )</a><br/>
<a href="#DisconnectAll"> DisconnectAll( )</a><br/>
<a href="#DisconnectAll"> disconnectall( )</a><br/>
<a href="#DisconnectClass"> DisconnectClass( )</a><br/>
<a href="#dynalink">      dynalink( )</a><br/>
</p><p>
<a rel="up" href="#Functions.20Reference"> ^ Functions Reference </a> 
<a rel="previous" href="#C"> &lt; --C-- </a>
<a rel="next" href="#E"> &gt; --E-- </a>
</p>

<!-- ================================= -->
<hr/><a name="date"></a> <h2>date</h2> 

<h3>Function Name: date( ) -- LCX 16 TMGT 32s NCONN 32c TMGT 64s</h3>
<h3>Synopsis:</h3>
<pre>value = date( )</pre>
<pre>value = DATE( ) (LCX 16 only) </pre>

<h3>Description and return value:</h3>
<p>This function returns the current date as defined in the system calendar,
in whatever format is defined in the configuration. </p>

<p>On 32-bit systems, this function gives the date at the server,  in the
format defined there, and not whatever is the current date and format on
any particular client. </p>

<h3>Standalone Replacement:</h3>
<p>Since the date and time are defined by the server in the 
client/server systems,
the standalone version of this function, as made available to the
the LC97, LC64, and LCXT programs, the function is called 
<a href="#zfunctions">
zdate()</a></p>

<h3>See Also:</h3>
<p><a href="#week"> week( ) </a>,  <br/>
<a href="#time"> time( ) </a>, <br/>
<a href="#caldat"> caldat( )</a>  <br/>
</p>

<p>
<a rel="up" href="#D"> ^ --D-- </a>
</p>

<!-- ================================= -->
<hr/><a name="DateAust"></a> <h2>DateAust</h2>
<h3>Function Name: DateAust( ) -- TMGT 32s NCONN 32c</h3>
<h3>Synopsis:</h3>
<pre><em>datestring</em><b> = DateAust(</b><em>stddate</em><b>);</b></pre>

<h3>Description:</h3>
<p>This takes a string <em>stddate</em> which is a date formatted according 
to system rules, and converts it to the format DD/MM/YYYY, typically 
associated with Australia or Europe, but also commonly used by Javascript
code.</p>

<p>If the incoming date is blank, the returned value will be blank also.</p>

<h3>See Also:</h3>
<p>
<a href="#DateCanonical">DateCanonical( )</a> 
<a href="#DateFormatted">DateFormatted( )</a> 
</p>

<p>
<a rel="up" href="#D"> ^ --D-- </a>
</p>

<!-- ================================= -->
<hr/><a name="DateCanonical"></a> <h2>DateCanonical</h2>

<h3>Function Name: DateCanonical( ) -- LCX 16 TMGT 32s NCONN 32c TMGT 64s</h3>

<h3>Synopsis:</h3>
<pre><em>value</em><b> = DateCanonical(</b><em>regdate</em><b>);</b></pre>

<h3>Description:</h3>
<p>This takes a string <em>regdate</em> which is a date formatted according 
to system rules, and converts it to the standardized format YYYY/MM/DD.
This makes it possible to obtain the year, month, and day using 
<a href="#substr"> substr( )</a> on the returned value: </p>

<pre>
dc = DateCanonical(regdate);
year = substr(dc, 1, 4);
month = substr(dc, 6, 2);
day = substr(dc, 9, 2);
</pre>

<p>All other functions producing dates, such as
<a href="#date"> date( ) </a>, 
<a href="#caldat"> caldat( ) </a>, 
<a href="#WeekToDate"> WeekToDate( ) </a>, as well as 
<a href="#get"> get( ) </a> called on a field of type Date, 
return the system-formatted date.</p>

<p>If the incoming date is blank, the returned value will be blank also.</p>

<h3>Standalone Replacement:</h3>
<p>Since the date-format is defined by the server in the client/server systems,
the standalone version of this function, as made available to the
the LC97, LC64, and LCXT programs, the function is called 
<a href="#zfunctions">
zDateCanonical()</a></p>

<h3>See Also:</h3>
<p>
<a href="#AssembleDate">AssembleDate( )</a>, <br/>
<a href="#date"> date( ) </a>,  <br/>
<a href="#julday">julday( )</a>,  <br/>
<a href="#caldat"> caldat( ) </a>, <br/>
<a href="#substr"> substr( ) </a> <br/>
</p>

<p>
<a rel="up" href="#D"> ^ --D-- </a>
</p>


<!-- ================================= -->
<hr/><a name="DateFormatted"></a> <h2>DateFormatted</h2>
<h3>Function Name: DateFormatted( ) -- TMGT 32s NCONN 32c</h3>
<h3>Synopsis:</h3>
<pre><em>datestring</em><b> = DateFormatted(</b><em>stddate</em><b>, </b><em>formatstring</em><b>);</b></pre>

<h3>Description:</h3>
<p>This takes a string <em>regdate</em> which is a date formatted according 
to system rules, and converts it to the format specified as the 
<em>formatstring</em></p>

<p>The possible format strings are the same as discussed for the 
<a href="serverini.html#options.dateformat">DATEFORMAT entry 
in server.ini</a>. They are some combination of strings identifying
year, month, or day in various forms, and with separator characters
such as - or / between them.</p> 

<p>The elements are are: </p>
<table>
<tbody>
<tr><td>Element</td><td>Description </td></tr>
<tr><td><b>yy</b></td><td> 2-digit year</td></tr>
<tr><td><b>yyyy</b></td><td> 4-digit year</td></tr>
<tr><td><b>m</b></td><td> month number 1-12</td></tr>
<tr><td><b>mm</b></td><td> 2-digit month number 01-12</td></tr>
<tr><td><b>mmm</b></td><td> abbreviated month name Jan Feb Mar etc.</td></tr>
<tr><td><b>mmmm</b></td><td> full month name January February March etc.</td></tr>
<tr><td><b>d</b></td><td> day number 1-31</td></tr>
<tr><td><b>dd</b></td><td> 2-digit day number 01-31</td></tr>
<tr><td><b>ddd</b></td><td> abbreviated weekday Mon Tue Wed etc.</td></tr>
<tr><td><b>dddd</b></td><td> full weekday name Monday Tuesday Wednesday and so on</td></tr>
</tbody>
</table>

<p>Examples: <b>yyyy/mm/dd</b> or <b>yyyy-mm-dd</b> give two
common variations on the ISO standard date format. (the second is
the same as the <a href="#DateCanonical">DateCanonical( )</a> 
function gives.) <b>dd/mm-yyyy</b> is the
format seen in Australia and some parts of Europe, (and also 
returned by the <a href="#DateAust">DateAust( )</a> 
function. Americans would probably recognize <b>mm/dd/yyyy</b>.
</p>

<p>If the incoming date is blank, the returned value will be blank also.</p>

<h3>See Also:</h3>
<p>
<a href="#DateCanonical">DateCanonical( )</a> <br/>
<a href="#DateAust">DateAust( )</a> <br/>
<a href="serverini.html#options.dateformat ">Server.ini section [options] entry DATEFORMAT=</a> <br/>
<a href="y2k.html">WinPCS and Year 2000</a>
</p>


<p>
<a rel="up" href="#D"> ^ --D-- </a>
</p>


<!-- ================================= -->
<hr/><a name="DateFromWeek"></a> <h2>DateFromWeek</h2> 

<h3>Function Name: DateFromWeek( ) -- LCX 16 TMGT 32s NCONN 32c TMGT 64s</h3>
<h3>Synopsis:</h3>
<pre><em>date</em><b> = DateFromWeek(</b><em>week</em><b>, </b><em>day</em><b>);</b></pre>

<h3>Description</h3>
<p>Given a week and the day in that week (0 is Monday 1 is Tuesday and so on), 
this function will return the date of that day in that week. This is the opposite 
of <a href="#WeekFromDate">WeekFromDate( )</a>.</p>

<h3>Standalone Replacement:</h3>
<p>Since the date-format is defined by the server in the client/server systems,
the standalone version of this function, as made available to the
the LC97, LC64, and LCXT programs, the function is called 
<a href="#zfunctions">
zDateFromWeek()</a></p>

<h3>See Also:</h3>
<p>
<a href="#week">week( )</a> ,  <br/>
<a href="#date">date( )</a>,   <br/>
<a href="#julday">julday( )</a>,  <br/>
<a href="#caldat"> caldat( ) </a>, <br/>
<a href="#WeekShift">WeekShift( )</a> ,  <br/>
<a href="#WeekDelta">WeekDelta( )</a> ,  <br/>
<a href="#WeekFromDate">WeekFromDate( )</a>  <br/>
</p>
<p>
<a rel="up" href="#D"> ^ --D-- </a>
</p>

<!-- ================================= -->
<hr/><a name="DDEsvclist"></a> <h2>DDEsvclist</h2> 

<h3>Function Name: DDEsvclist( ) -- LCX 16 LCX 32s LCX 32c</h3>
<h3>Synopsis:</h3>
<pre><em>services</em><b> = DDEsvclist( );</b></pre>

<h3>Description and return value</h3>
<p>
This function determines the DDE services available for use at the moment.
The returned value is a set of names of the servers; these may be picked out and used 
with <a href="#DDEconnect">DDEconnect( )</a> .
</p>

<h3>See Also:</h3>
<p>
<a href="#setitem">setitem( )</a> ,  <br/>
<a href="#DDEconnect">DDEconnect( )</a>  <br/>
</p> 

<p>
<a rel="up" href="#D"> ^ --D-- </a>
</p>

<!-- ================================= -->
<hr/><a name="DDEconnect"></a> <h2>DDEconnect</h2> 

<h3>Function Name: DDEconnect( ) -- LCX 16 LCX 32s LCX 32c</h3>
<h3>Synopsis:</h3>
<pre><em>hconv</em><b> = DDEconnect(</b><em>server</em><b>, </b><em>topic</em><b>);</b></pre>

<h3>Description:</h3>
<p>
This function connects to a DDE server <em>server</em> and a 
topic <em>topic</em> within this server, and makes it ready to receive 
<a href="#DDEpoke">DDEpoke( )</a> , 
<a href="#DDEexecute">DDEexecute( )</a>  or 
<a href="#DDErequest">DDErequest( )</a>  requests. To close the connection, use 
<a href="#DDEdisconnect">DDEdisconnect( )</a> .
</p>

<p>The server program must have been started, for example via 
<a href="#invoke">invoke( ) </a>, 
<a href="#invoke2">invoke2( )</a>, 
or found via <a href="#DDEsvclist">DDEsvclist( )</a>. See the example under  
<a href="#invoke">invoke( ) </a> for more details on this. 
</p>

<h3>Return Value:</h3>
<p>
A value identifying the connection. Depending on the server programs, 
several connections may be going at the same time. 
The return value from <b>DDEconnect( ) </b>
is an identifier to be used with the other DDE functions such as 
<a href="#DDEpoke">DDEpoke( )</a> , 
<a href="#DDEexecute">DDEexecute( )</a> or 
<a href="#DDErequest">DDErequest( )</a> to identify this particular
conversation. Don't forget to close the conversation with
<a href="#DDEdisconnect">DDEdisconnect( )</a> when done.
</p>

<h3>See Also:</h3>
<p>
<a href="#DDEdisconnect">DDEdisconnect( )</a><br/> 
<a href="#DDEpoke">DDEpoke( )</a> <br/> 
<a href="#DDEexecute">DDEexecute( )</a> <br/>
<a href="#DDErequest">DDErequest( )</a> <br/>
<a href="#invoke">invoke( ) </a><br/>
<a href="#DDEsvclist">DDEsvclist( )</a> <br/>
</p>

<p>
<a rel="up" href="#D"> ^ --D-- </a>
</p>

<!-- ================================= -->
<hr/><a name="DDEdisconnect"></a> <h2>DDEdisconnect</h2> 

<h3>Function Name: DDEdisconnect( ) -- LCX 16 LCX 32s LCX 32c</h3>
<h3>Synopsis:</h3>
<pre><b>DDEdisconnect(</b><em>hconv</em><b>);</b></pre>

<h3>Description:</h3>
<p>This function disconnects and closes a DDE conversation identified by 
<em>hconv</em> that was opened with 
<a href="#DDEconnect">DDEconnect( ) </a></p>

<h3>Return Value:</h3>
<p>None</p>

<h3>See Also:</h3>
<p><a href="#DDEconnect">DDEconnect( ) </a><br/>
</p>


<p>
<a rel="up" href="#D"> ^ --D-- </a>
</p>

<!-- ================================= -->
<hr/><a name="DDEexecute"></a> <h2>DDEexecute</h2> 

<h3>Function Name: DDEexecute() -- LCX 16 LCX 32s LCX 32c</h3>

<h3>Synopsis:</h3>
<pre><b>DDEexecute(</b><em>hconv</em><b>, </b><em>command</em><b>);</b></pre>

<h3>Description:</h3>
<p>Issues a command to the DDE server with which a conversation has been started. The 
actual command is defined by the particular server being conversed with. </p>

<h3>Return Value:</h3>
<p>Any data returned by te application, or an error message if something went wrong. </p>

<h3>See Also:</h3>
<p><a href="#DDEconnect">DDEconnect( ) </a>,<br/>
<a href="#DDEpoke">DDEpoke( ) </a>,<br/>
<a href="#DDErequest">DDErequest( ) </a><br/>
</p>

<p>
<a rel="up" href="#D"> ^ --D-- </a>
</p>


<!-- ================================= -->
<hr/><a name="DDEpoke"></a> <h2>DDEpoke</h2>

<h3>Function Name: DDEpoke( ) -- LCX 16 LCX 32s LCX 32c</h3>

<h3>Synopsis:</h3>
<pre><b>DDEpoke(</b><em>hconv</em><b>, </b><em>address</em><b>, </b><em>value</em><b>);</b></pre>

<h3>Description:</h3>
<p>This function sends data to a DDE server at its specified address. 
The format of this is determined by the application. </p>

<h3>Return Value:</h3>
<p>The data being sent or an error  message from the application or the system.</p>

<h3>See Also:</h3>
<p><a href="#DDEexecute">DDEexecute( ) </a>,<br/>
<a href="#DDErequest">DDErequest( ) </a>,<br/>
<a href="#DDEconnect">DDEconnect( ) </a><br/>
</p>


<p>
<a rel="up" href="#D"> ^ --D-- </a>
</p>

<!-- ================================= -->
<hr/><a name="DDErequest"></a> <h2>DDErequest</h2> 

<h3>Function Name: DDErequest( ) -- LCX 16 LCX 32s LCX 32c</h3>

<h3>Synopsis:</h3>
<pre><em>value</em><b> = DDErequest(</b><em>hconv</em><b>, </b><em>address</em><b>, </b><em>converttabs</em><b>);</b></pre>

<h3>Description:</h3>
<p>This function requests and returns the value identified by address from a DDE server. If 
the value is in a list form (several values returned at once), the returned value will be a 
set provided the converttabs is set to <b>1</b>.  If <em>cvttabs</em> is set 
to <b>0</b> the original tab-separated 
data (which is DDEs standard) is returned.</p>

<h3>Return Value:</h3>
<p>The value requested.</p>

<h3>See Also:</h3>
<p><a href="#tabtoset">tabtoset( )</a> , <br/>
<a href="#DDEpoke">DDEpoke( )</a> , <br/>
<a href="#DDEsvclist">DDEsvclist( )</a> , <br/>
<a href="#DDEconnect">DDEconnect( )</a> , <br/>
<a href="#DDEexecute">DDEexecute( )</a> , <br/>
<a href="#DDEdisconnect">DDEdisconnect( )</a> <br/>
</p>

<p>
<a rel="up" href="#D"> ^ --D-- </a>
</p>

<!-- ================================= -->
<hr/><a name="DDEstatus"></a> <h2>DDEstatus</h2> 

<h3>Function Name: DDEstatus( ) -- LCX 16 LCX 32s LCX 32c</h3>

<h3>Synopsis:</h3>
<pre><em>status</em><b> = DDEstatus(</b><em>hconv</em><b>);</b></pre>

<h3>Description:</h3>
<p>UNDER CONSTRUCTION</p>

<h3>Return Value:</h3>
<p>UNDER CONSTRUCTION</p>

<h3>See Also:</h3>
<p><a href="#DDEdisconnect">DDEdisconnect( )</a> <br/>
</p>

<p>
<a rel="up" href="#D"> ^ --D-- </a>
</p>


<!-- ================================= -->
<hr/><a name="ddeexecute"></a> <h2>ddeexecute</h2>

<h3>Function Name: ddeexecute( ) -- RCONN 16</h3>
<h3>Synopsis:</h3>
<pre><em>status</em><b> = ddeexecute(</b><em>command</em><b>);</b></pre>

<h3>Description: </h3>
<p>Executes a macro command in another application via DDE, as part of a callback-DDE 
process. The actual format of the command is dependent on the application. </p>

<h3>Return Value:</h3>
<p><b>"OK"</b> on success, explanation of error on failure</p>

<h3>Availability:</h3>
<p><b>Obsolete.</b>  Only available in DDE callback functions called from rundde( )  or runddeA( ) </p>

<h3>See Also:</h3>
<p><a href="#rundde">rundde( )</a> , <br/>
<a href="#ddelinktopic">ddelinktopic( )</a> , <br/>
<a href="#ddepoke">ddepoke( )</a><br/>
</p>

<p>
<a rel="up" href="#D"> ^ --D-- </a>
</p>

<!-- ================================= -->

<hr/><a name="ddelinktopic"></a> <h2>ddelinktopic</h2>

<h3>Function Name: ddelinktopic( ) -- RCONN 16</h3>
<h3>Synopsis:</h3>
<pre><em>status</em><b> = ddelinktopic(</b><em>context</em><b>);</b></pre>

<h3>Description: </h3>
<p>Connects to another topic in another application using callback-DDE. Usually this is one 
of several documents or worksheets, or the system. The actual format of the context is 
dependent on the particular application. </p>

<h3>Return Value:</h3>
<p><b>0</b> on failure, nonzero on success.</p>

<h3>Availability:</h3>
<p><b>Obsolete.</b>  Only available in DDE callback functions.</p>

<h3>See Also:</h3>
<p><a href="#ddeexecute">ddeexecute( )</a> , <br/>
<a href="#rundde">rundde( )</a> , <br/>
<a href="#ddepoke">ddepoke( )</a><br/>
</p>

<p>
<a rel="up" href="#D"> ^ --D-- </a>
</p>

<!-- ================================= -->
<hr/><a name="ddepoke"></a> <h2>ddepoke</h2> 

<h3>Function Name: ddepoke( ) -- RCONN 16</h3>
<h3>Synopsis:</h3>
<pre><em>status</em><b> = ddepoke( </b><em>cell</em><b>, </b><em>value</em><b>);</b></pre>

<h3>Description:</h3>
<p>This function places a value into a cell in the application connected to during the 
callback-DDE. The details of the cell and value identifiers depend on the particular 
application and on any other macro sheets or such that may be in scope.</p>

<h3>Return Value:</h3>
<p><b>"OK"</b> on success, explanation of error on failure</p>

<h3>Availability:</h3>
<p><b>Obsolete.</b>  Only available in DDE callback functions.</p>

<h3>See Also:</h3>
<p><a href="#ddeexecute">ddeexecute( )</a> , <br/>
<a href="#rundde">rundde( )</a> , <br/>
<a href="#ddelinktopic">ddelinktopic( )</a><br/>
</p>

<p>
<a rel="up" href="#D"> ^ --D-- </a>
</p>

<!-- ================================= -->
<hr/><a name="DebugLog"></a> <h2>DebugLog</h2>
<h3>Function Name: DebugLog( ) -- TMGT 32s NCONN 32c</h3>

<h3>Synopsis:</h3>
<pre><b>DebugLog(</b><em>logfile</em><b>, </b><em>module</em><b>, </b><em>codefile</em><b>, </b><em>codeline</em><b>, </b><em>text</em><b>, </b><em>...</em><b>);</b></pre>

<h3>Description:</h3>
<p>This function emits a line of text into a log file. </p>

<p>Each call is identified with date, time,
process or thread identity number, as well as the module, file, and line specified in the call, then
one or more text argument further detailing the information to be logged. Typically, the <b>__FILE__</b> 
and <b>__LINE__</b> will be useful arguments for <em>codefile</em> and <em>codeline</em>, in the same way
<b>__HERE__</b> is useful in the title of <a href="#message">message( )</a> or <a href="#trace">trace( )</a> 
calls. </p>

<h3>See Also:</h3>
<p>
<a href="#Predefined.20Constants"> __FILE__ </a> and <a href="#Predefined.20Constants"> __LINE__</a>,<br/>
<a href="#trace">trace( )</a> , <br/>
<a href="#message">message( )</a> , <br/>
<a href="#FiStartWrite">FiStartWrite( )</a> <br/>
<a href="#FiStartAppend">FiStartAppend( )</a> <br/>
</p>

<p>
<a rel="up" href="#D"> ^ --D-- </a>
</p>


<!-- ================================= -->
<hr/><a name="DecimalToInt"></a> <h2>DecimalToInt</h2>
<h3>Function Name: DecimalToInt( ) -- LCX 16 LCX 32s LCX 32c LCX 64 </h3>

<h3>Synopsis:</h3>
<pre><em>value</em><b> = DecimalToInt(</b><em>text</em><b>, </b><em>ndec</em><b>, </b><em>dpoint</em><b>);</b></pre>

<h3>Description:</h3>
<p>This function takes a string, <em>text</em>, expected to look like 
a decimal number and converts it to an integer where the number of 
decimal places have moved.</p>

<p>Effectively, it becomes the value of <em>text * 10^ndec</em>, so if the input
is a monetary value in dollars, euro, NOK, Pounds Sterling, and ndec is 
2, the returned value would be the equivalent number of cents, 
&oslash;re, or pence. </p>

<p>The function
<a href="#FormDecimal">FormDecimal( )</a> 
does the opposite job of making the larger integer into a decimal number. </p>

<h3>See Also:</h3>
<p>
<a href="#FormDecimal">FormDecimal( )</a>.<br/>
</p>

<p>
<a rel="up" href="#D"> ^ --D-- </a>
</p>

<!-- ================================= -->
<hr/><a name="DefinedUser"></a> <h2>DefinedUser</h2>

<h3>Function Name: DefinedUser( ) -- NCONN 32c</h3>
<h3>Synopsis:</h3>
<pre><em>status</em><b> = DefinedUser(</b><em>username</em><b>, </b><em>password</em><b>);</b></pre>

<h3>Description:</h3>
<p>This function makes a call to the WinPCS server and 
checks if the supplied username and password refers to a 
user defined in the system. </p>

<h3>Return Value:</h3>
<p>The returned value is a single numeric value, this is 0 if the username
and/or password are not present, and 1 if the username and password do
match an existing record in WUSER. </p>

<h3>See Also:</h3>
<p>
<a href="#SetEUser">SetEUser( )</a> 
</p>

<p>
<a rel="up" href="#D"> ^ --D-- </a>
</p>


<!-- ================================= -->
<hr/><a name="Delay"></a> <h2>Delay</h2> 

<h3>Function Name: Delay( ) -- LCX 16 LCX 32s LCX 32c LCX 64</h3>
<h3>Synopsis:</h3>
<pre><em>time</em><b> = Delay(</b><em>time</em><b>);</b></pre>

<h3>Description:</h3>
<p>This function causes an executing process to wait for the specified number of 
milliseconds. Though the number of milliseconds are specified, the timer resolution is 
about 18 ms and therefore the resolution of the Delay function is also about 18 ms. For 
delays on the order of seconds, this is not a problem. The return value is the same as 
the argument.</p>

<h3>Return Value:</h3>
<p>The value of the argument is returned.</p>


<p>
<a rel="up" href="#D"> ^ --D-- </a>
</p>

<!-- ================================= -->
<hr/><a name="delete"></a> <h2>delete</h2> 

<h3>Function Name: delete( ) -- RCONN 16 NCONN 32c TMGT 32s TMGT 64s</h3>
<h3>Synopsis:</h3>
<pre><em>status</em><b> = delete(</b><em>table</em><b>);</b></pre>

<h3>Description:</h3>
<p>This operation removes the current record in a database table, provided no connections exist 
between the object in this record and anything else.</p>

<h3>Return Value:</h3>
<p>Status of the Delete operation, encoded as a set where the first value is the numeric 
code and the second value is a standard error message. Use 
<a href="#setitem">setitem( )</a>  to pick out the value for use in 
<a href="#if.2delse">if-else</a> tests.</p>

<h3>See Also:</h3>
<p><a href="#DisconnectClass"> DisconnectClass( )</a><br/>
<a href="#DisconnectAll">DisconnectAll( ) </a><br/>
</p>

<p>
<a rel="up" href="#D"> ^ --D-- </a>
</p>

<!-- ================================= -->
<hr/><a name="DeleteFile"></a> <h2>DeleteFile</h2>
<h3>Function Name: DeleteFile( ) -- LCX 16 LCX 32s LCX 32c LCX 64</h3>
<h3>Synopsis:</h3>
<pre><em>code</em><b> = DeleteFile(</b><em>path</em><b>);</b></pre>

<h3>Description:</h3>
<p>Delete the file identified as path. Returns a positive value on OK, -1 if an error (such as 
no file to be deleted) occurred.</p>

<h3>See Also:</h3>
<p>
<a href="#CopyFile">CopyFile( )</a> , <br/>
<a href="#RemoveDir">RemoveDir( )</a> <br/>
</p>

<p>
<a rel="up" href="#D"> ^ --D-- </a>
</p>

<!-- ================================= -->

<hr/><a name="deletetag"></a><h2>deletetag</h2>

<a href="#deletetag">deletetag( )</a> 
<h3>Function Name: deletetag( ) -- TMGT 32s</h3>

<h3>Synopsis:</h3>
<pre><b>deletetag(</b><em>table</em><b>,</b><em>tag</em><b>);</b></pre>

<h3>Description:</h3>
<p>UNDER CONSTRUCTION</p>

<h3>See Also:</h3>
<p>
<a href="#delete">delete( )</a> <br/>
</p>

<p>
<a rel="up" href="#D"> ^ --D-- </a>
</p>


<!-- ================================= -->
<hr/><a name="dialogOK"></a> <h2>dialogOK</h2>

<h3>Function Name: dialogOK( ) -- RCONN 16 NCONN 32c</h3>
<h3>Synopsis:</h3>
<pre><em>state</em><b> = dialogOK( );</b></pre>

<h3>Description:</h3>
<p>This function reads an internal flag indicating status of the most recently run dialog. 
This flag is set or cleared indirectly by the following functions:<br/>
<a href="#selectdialog"> selectdialog( ) </a><br/>
<a href="#selectdialog"> selectdialoga( ) </a><br/>
<a href="#selectdialog"> selectdialogb( ) </a><br/>
<a href="#selectdialogr"> selectdialogr( ) </a><br/>
<a href="#entrydialog"> entrydialog( ) </a><br/>
<a href="#viewdialog"> viewdialog( ) </a><br/>
<a href="#selectinistring"> selectinistring( ) </a><br/>
where it is set to <b>0</b> for Cancel and <b>1</b> for OK.</p>

<p>It may also be set by a direct call to <a href="#FlagDialog">FlagDialog( )</a> , 
where it will take on the value of 
<a href="#FlagDialog">FlagDialog( )</a>'s first argument.</p>

<p>On 16-bit systems, the function
<a href="#selectfromset">selectfromset( )</a> 
also sets this flag. On 32-bit systems
<a href="#selectfromset">selectfromset( )</a> 
does not, and the return value should be checked with 
<a href="#notext">notext( )</a> 
instead, as discussed under the entry for
<a href="#selectfromset">selectfromset( )</a>. </p>

<h3>Return Value:</h3>
<p>Value of the flag. This is <b>0</b> for Cancel and <b>1</b> for OK.</p>

<h3>Availability:</h3>
<p>The return value of calls to this functions are meaningless unless one of the 
dialog-functions listed, or the <a href="#FlagDialog">FlagDialog( )</a> function, 
have been called and have returned.</p>

<h3>See Also:</h3>
<p><a href="#selectdialog"> selectdialog( ) </a>,<br/>
<a href="#selectdialog"> selectdialoga( ) </a>,<br/>
<a href="#selectdialog"> selectdialogb( ) </a>,<br/>
<a href="#entrydialog"> entrydialog( ) </a>,<br/>
<a href="#viewdialog"> viewdialog( ) </a>,<br/>
<a href="#selectinistring"> selectinistring( ) </a>,<br/>
<a href="#dialogchange"> dialogchange( ) </a>,<br/>
<a href="#FlagDialog"> FlagDialog( ) </a><br/>
</p>

<p>
<a rel="up" href="#D"> ^ --D-- </a>
</p>

<!-- ================================= -->
<hr/><a name="dialogchange"></a> <h2>dialogchange</h2> 
<h3>Function Name: dialogchange( ) -- RCONN 16 NCONN 32c</h3>
<h3>Synopsis:</h3>
<pre><em>state</em><b> = dialogchange( );</b></pre>

<h3>Description:</h3>
<p>This function reads an internal flag indicating changes in selections of the most recently 
run dialog. This flag is set or cleared indirectly by the following functions:

<br/><a href="#selectdialog"> selectdialog( ) </a>
<br/><a href="#selectdialog"> selectdialoga( ) </a>
<br/><a href="#selectdialog"> selectdialogb( ) </a>
<br/><a href="#entrydialog"> entrydialog( ) </a>
<br/><a href="#viewdialog"> viewdialog( ) </a>
<br/>
where it is set to <b>0</b> for No Change and <b>1</b> for Changes made.</p>

<p>
It may also be set by a direct call to <a href="#FlagDialog">FlagDialog( )</a> , 
where it will take on the value of 
<a href="#FlagDialog">FlagDialog( )</a>'s second argument.</p>

<p>
This change flag is used internally in Status Dialog select control Callback functions, 
where the text of the control's data is changed only if the Change flag is set. Normally, 
this is done by the <b>selectdialog...( )</b> functions, but in these cases where a simpler 
function such as <a href="#input">input( )</a>
is used, this flag needs to be set manually. This is done using the 
<a href="#FlagDialog">FlagDialog( )</a> function.</p>


<h3>Return Value:</h3>
<p>Value of the flag. This is 0 for No change, 1 for Change.</p>


<h3>Availability:</h3>
<p>The return value of calls to this functions are meaningless unless one of the dialog-
functions listed, or the <a href="#FlagDialog">FlagDialog( )</a> function, have been called and have returned.</p>


<h3>See Also:</h3>
<p><a href="#statusdialog"> statusdialog( ) </a>,<br/>
<a href="#selectdialog"> selectdialog( ) </a>,<br/>
<a href="#selectdialog"> selectdialoga( ) </a>,<br/>
<a href="#selectdialog"> selectdialogb( ) </a>,<br/>
<a href="#entrydialog"> entrydialog( ) </a>,<br/>
<a href="#viewdialog"> viewdialog( ) </a>,<br/>
<a href="#dialogOK"> dialogOK( ) </a>,<br/>
<a href="#FlagDialog"> FlagDialog( ) </a><br/>
</p>

<p>
<a rel="up" href="#D"> ^ --D-- </a>
</p>

<!-- ================================= -->
<hr/><a name="disconnect"></a> <h2>disconnect</h2> 

<h3>Function Name: disconnect( ) -- RCONN 16 NCONN 32c TMGT 64s</h3>
<h3>Synopsis:</h3>
<pre><em>status</em><b> = disconnect(</b><em>operation</em><b>, </b><em>itembase</em><b>, </b><em>itemid</em><b>, </b><em>relid</em><b>);</b></pre>

<h3>Description:</h3>
<p>This function breaks a connection defined in the RCONN record pair matching the given 
operation and itembase.  After the 
<b> disconnect( )</b> call the current record in RCONN is this 
description record. The record in the connection table is removed. The two tables' 
current records are the records of the two given identities. You may use 
<a href="#get">get( )</a> , <a href="#put">put( )</a> , and <a href="#update">update( )</a>
to modify or examine the values in these tables.</p>
<p>
BREAKCONTROL functions in WinPCS.INI are called if defined. </p>
<p>
The BREAK= callback functions in STADLG.INI are called if defined, but these are deprecated.</p>

<h3>Return Value:</h3>
<p>
Status of the operation, encoded as a set where the first value is the numeric code and 
the second value is a standard error message. Use 
<a href="#setitem">setitem( )</a>  to pick out the value for use in 
<a href="#if.2delse">if-else</a> tests.</p>

<h3>See Also:</h3>
<p>
<a href="#connect">connect( )</a> , <br/>
<a href="#DisconnectAll">DisconnectAll( ) </a>,<br/>
<a href="#DisconnectClass"> DisconnectClass( )</a><br/>
<a href="#reconnectall">reconnectall( )</a> , <br/>
<a href="#update">update( )</a> , <br/>
<a href="#delete">delete( )</a> <br/>
</p>


<p>
<a rel="up" href="#D"> ^ --D-- </a>
</p>

<!-- ================================= -->
<hr/><a name="DisconnectAll"></a> <h2>DisconnectAll</h2> 

<h3>Function Name: DisconnectAll( ) -- NCONN 32c</h3>
<h3>Function Name: disconnectall( ) -- RCONN 16</h3>

<h3>Synopsis:</h3>
<pre><em>status</em><b> = DisconnectAll(</b><em>table</em><b>,</b><em>item</em><b>);</b></pre>
<pre><em>count</em><b> = disconnectall(</b><em>table</em><b>);</b></pre>

<h3>Description:</h3>
<p>The <b>DisconnectAll( )</b> function disconnects all related 
objects connected to the object identified by 
the <em>item</em> in the table <em>table</em>. This is useful prior
to deletion.</p>

<p>The <b>disconnectall( )</b> function disconnects all related 
objects connected to the object identified by the 
current record in the named database table <em>table</em>.</p>

<p>Note that these functions are not identical between the two systems. 
The 16-bit one requires a previous 
<a href="#findexact">findexact( )</a> call.</p>

<h3>Return Value:</h3>
<p><b>DisconnectAll( )</b> returns some status information 
indicating success or failure.</p>
<p><b>disconnectall( )</b> returns a number 
indicating how many connections were disconnected.</p>

<h3>See Also:</h3>
<p>
<a href="#delete">delete( )</a>,<br/>
<a href="#DisconnectClass">DisconnectClass( )</a> <br/>
</p>

<p>
<a rel="up" href="#D"> ^ --D-- </a>
</p>

<!-- ================================= -->
<hr/><a name="DisconnectClass"></a> <h2>DisconnectClass</h2>

<h3>Function Name: DisconnectClass( ) -- NCONN 32c</h3>
<h3>Synopsis:</h3>
<pre><em>status</em><b> = DisconnectClass(</b><em>relation</em><b>,</b><em>table</em><b>,</b><em>item</em><b>);</b></pre>

<h3>Description:</h3>
<p>This function disconnects all related objects of the type or in the table
<em>relation</em>, that may be connected to the object identified
by the tablename <em>table</em> and identity <em>item</em>. </p> 

<h3>See Also:</h3>
<p>
<a href="#DisconnectAll">DisconnectAll( )</a>,<br/>
<a href="#disconnect">disconnect( )</a> <br/>
</p>

<p>
<a rel="up" href="#D"> ^ --D-- </a>
</p>

<!-- ================================= -->
<hr/><a name="dynalink"></a> <h2>dynalink</h2>

<h3>Function Name: dynalink( ) -- LCX 16 LCX 32s LCX 32c</h3>
<h3>Synopsis:</h3>
<pre><em>returned</em><b> = dynalink(</b><em>file</em><b>, </b><em>functionname</em><b>, </b><em>arg0</em><b>, ... );</b></pre>

<h3>Description:</h3>
<p>Make a call to a function in the DLL identified by file, defined in that DLL as </p>

<pre>
int LCXAPI functionname(HGLOBAL hlcx, char LCXSPC *retval, int rvlen, int argc, char 
LCXSPC * LCXSPC *argv);
</pre>

<p>The DLL function is called once, under execution. The DLL is loaded and unloaded in 
the cause of each LCX call. Leading underscore on the C-declared (<b>CDECL</b> from 
<b>LCXAPI</b>) function is prepended.</p>

<p> Its arguments and return value is expected to be as follows:</p>

<p>
Return Value<br/>
>= 0 execution went OK<br/>
&lt; 0 execution failed.</p>

<p>
Arguments:<br/>
hlcx    -- The LCX environment handle.<br/>
retval  -- The data array to place the value seen as return value to LCX in.<br/>
rvlen   -- The number of bytes available in retval<br/>
argc    -- number of arguments <br/>
argv    -- array of arguments. These are zero-terminated strings with text of the LCX 
arguments given.</p>

<h3>Availability:</h3>
<p>The functions available in DLLs to be called via <b>dynalink( )</b> is not presently defined. You 
will need a development package including the <b>LCX.H</b> and <b>LCX.LIB</b> files in order to 
make this kind of DLL function.  An LCX 64 version of this function is under construction. </p>

<p>
<a rel="up" href="#D"> ^ --D-- </a>
</p>

<!-- ================================= -->
<!-- E -->

<hr/><a name="E"></a><h2>--E--</h2>
<p>
<a href="#editdialog">editdialog( )</a><br/>
<a href="#EncodeTag">EncodeTag( )</a><br/>
<a href="#entrydialog">entrydialog( )</a><br/>
<a href="#ExpandPath">ExpandPath( )</a> <br/>
<a href="#extract">extract( ) </a><br/>
</p>

<p>
<a rel="up" href="#Functions.20Reference"> ^ Functions Reference </a> 
<a rel="previous" href="#D"> &lt; --D-- </a>
<a rel="next" href="#F"> &gt; --F-- </a>
</p>

<!-- ================================= -->
<hr/><a name="editdialog"></a> <h2>editdialog</h2> 
<h3>Function Name: editdialog( ) -- RCONN 16</h3>
<h3>Synopsis:</h3>
<pre><b>editdialog(</b><em>file</em><b>, </b><em>rwflag</em><b>);</b></pre>

<h3>Description:</h3>
<p>This opens a text editor view on the named file which must be given with a full path (for 
example as a result of <a href="#concat">concat( )</a> or other operations). The capabilities of the editor 
window is controlled by the five-character string, rwflag, as follows:</p>

<p>First character: <br/>
        R for read-only. Others are Read-write </p>
<p>Second character: <br/>
        I for iconic (minimized). M for Maximized. Others result in a Normal window.</p>
<p>Third character:<br/>
        A 1-digit hexadecimal number which controls the presence and absence of 
three pushbuttons. A bit set hides the corresponding pushbutton as follows:<br/>
        Bit 2 (weight 4) -- Find<br/>
        Bit 1 (weight 2) -- Undo<br/>
        Bit 0 (weight 1) -- Delete</p>

<p>Fourth character:<br/>
        A 1-digit hexadecimal number which controls the presence and absence of 
four pushbuttons. A bit set hides the corresponding pushbutton as follows:<br/>
        Bit 3 (weight 8) -- Paste<br/>
        Bit 2 (weight 4) -- Copy<br/>
        Bit 1 (weight 2) -- Cut<br/>
        Bit 0 (weight 1) -- Print</p>

<p>Fifth character:<br/>
        A 1-digit hexadecimal number which controls the presence and absence of 
four pushbuttons. A bit set hides the corresponding pushbutton as follows:<br/>
        Bit 3 (weight 8) -- Save<br/>
        Bit 2 (weight 4) -- Open<br/>
        Bit 1 (weight 2) -- Help<br/>
        Bit 0 (weight 1) -- Exit</p>
<p>
It should be noted that there are a number of possible combinations that are quite 
unreasonable.  Hiding Exit is probably not a good idea, and Save is disabled in the 
Read-only mode anyway.
</p>

<h3>Availability</h3>
<p>
The 32-bit system does not use an internal editor, so this function does not have an equivalent there.
To open a text editor here, the function (TBD) is provided instead. </p>

<h3>See Also:</h3>
<p>
<a href="#entrydialog">entrydialog( )</a> , <br/>
<a href="#viewdialog">viewdialog( )</a> , <br/>
<a href="#dialogOK">dialogOK( )</a> .<br/>
</p>

<p>
<a rel="up" href="#E"> ^ --E-- </a>
</p>

<!-- ================================= -->
<hr/>
<a name="EncodeTag"></a> <h2>EncodeTag</h2>
<a name="DecodeTag"></a> <h2>DecodeTag</h2>

<h3>Function Name: EncodeTag( ) -- LCX 32 LCX 64</h3>
<h3>Function Name: DecodeTag( ) -- LCX 32 LCX 64</h3>

<h3>Synopsis:</h3>
<pre><em>codedtag</em><b>= EncodeTag(</b><em>tagnumber</em><b>, </b><em>escapechar</em><b>);</b></pre>
<pre><em>tagnumber</em><b>= DecodeTag(</b><em>encodedtag</em><b>, </b><em>escapechar</em><b>);</b></pre>

<h3>Description:</h3>
<p>The <b>EncodeTag( )</b> function takes a string <em>tagnumber</em> and replaces all characters that 
are not letters or digits or the hyphen with strings consisting of the <em>escapechar</em> followed by 
two hex digits.  The <b>DecodeTag( )</b> function converts these encoded tag-number strings back to 
their original form. Thus, these two functions are the opposites of each other.  </p>

<p>The main use of these functions is for encoding tag-numbers with irregular characters in them for use
with barcodes. The
<b>EncodeTag( )</b> function and the <b>DecodeTag( )</b> functions are implemented in terms of the
internal system functions CVB_Encode() and CVB_Decode() from the CWULIB.DLL, which can be used by 
related programs. </p>

<p>The string <em>codedtag</em> returned from <b>EncodeTag( )</b> will only contain letters, digits, hyphens, 
and the escape-character, and no other characters, leaving all other characters available for reserved
uses. </p>

<p>The difference between the <b>EncodeTag( )</b> function and the
<a href="#CleanFileName">CleanFileName( )</a> function
is that <b>EncodeTag( )</b> is reversible, but
<a href="#CleanFileName">CleanFileName( )</a> 
is not.</p>

<h3>See Also:</h3>
<p>
<a href="#CleanFileName">CleanFileName( )</a> <br/>
<a href="#URLEncode">URLEncode( )</a> <br/>
<a href="#URLDecode">URLDecode( )</a> <br/>
</p>

<p>
<a rel="up" href="#D"> ^ --D-- </a>
<a rel="up" href="#E"> ^ --E-- </a>
</p>


<!-- ================================= -->
<hr/><a name="entrydialog"></a> <h2>entrydialog</h2>

<h3>Function Name: entrydialog( ) -- RCONN 16 NCONN 32c</h3>
<h3>Synopsis:</h3>
<pre><em>status</em><b> = entrydialog(</b><em>table</em><b>, </b><em>inifile</em><b>, </b><em>keyfield</em><b>, </b><em>initvalue</em><b>);</b></pre>

<h3>Description:</h3>
<p>This opens an Entry Form on the named table, using the named .INI file, which should 
have contents matching the table; and the initial record in the table is the one where the 
value of keyfield is equal to initvalue. If this is duplicated, the first duplicate is entered. </p>
<p>
Control does not return to the LCX code after the call until the dialog box is closed.  The 
.INI file should provide for two buttons, equivalent to OK and Cancel, possibly combined 
with an Update function. The UPDATEEXIT, CANCEL, and EXIT operations in the .INI file 
are suitable for this.</p>

<h3>Return Value:</h3>
<p>The status defined on the UPDATEEXIT, CANCEL, or EXIT pushbuttons. The current 
record in this and other tables may have changed if any Find or Get operations were 
done in the entry form.</p>

<h3>Important note: </h3>
<p>Since <b>entrydialog( )</b> opens the databases it works on in its own enviroment, a subsequent 
<a href="#update">update( )</a>  or 
<a href="#delete">delete( )</a>  may fail on a `Conflict error`. This can be avoided by 
issuing a 
<a href="#findexact">findexact(table, keyfield, initvalue)</a> call on the table immediately after the call 
to <b>entrydialog( )</b>. This also will eliminate the effect of any repositioning that the user 
might have done during the dialog's existence, if he had been allowed to do any.
If this call to <b>entrydialog( )</b> is started from another window, this window must remain 
open until the entrydialog is closed. Otherwise, a crash is guaranteed.</p>

<h3>See Also:</h3>
<p>
<a href="#runentry">runentry( )</a>, <br/>
<a href="#findstdINI">findstdINI( )</a>, <br/>
<a href="evini.html#Introduction"> View and Entry .INI files reference.  </a><br/>
</p>

<p>
<a rel="up" href="#E"> ^ --E-- </a>
</p>

<!-- ================================= -->
<hr/><a name="ExpandPath"></a> <h2>ExpandPath()</h2>

<h3>Function Name: ExpandPath( ) -- RCONN 16 NCONN 32c TMGT 32s TMGT 64s</h3>
<h3>Synopsis:</h3>
<pre><em>longpath</em><b> = ExpandPath(</b><em>shortpath</em><b>);</b></pre>

<h3>Description:</h3>
<p><b>ExpandPath( )</b> converts WinPCS local paths such as <b>0:\GLOBAL.LCX</b> into the proper full 
path including drive and directories, where applicable. 
<a href="#ReducePath">ReducePath( )</a> converts full paths into the WinPCS local (reduced) paths.</p>

<p> The advantage of these reduced paths is that there is no dependency on a system drive 
letter; the WinPCS installation may be easily moved from one place to another. By 
design, the reduced path <b>0:\</b> (or <b>0:/</b> using the forward slash on unix systems) 
is the system path where the 
ANCHORC.DLL, anchors.so, ANCHORS.DLL or ANCHOR.DLL is located. </p>

<p>The other drives <b>1:</b> thru <b>9:</b> default to the same as <b>0:</b>, but 
these may be changed in BTRS.INI (on 16 bit systems), in 
<a href="clientini.html#section.20drives">CLIENT.INI</a> (on 32-bit clients), or 
<a href="serverini.html#section.20drives">SERVER.INI</a> (on all servers) 
in the [DRIVES] section there.  As these pseudo-drives are tried by <a href="#ReducePath">ReducePath( )</a> 
in numerical order, Drive <b>9:</b> should be the most general one.</p>

<p> On 16bit systems, the function <a href="#sysdir">sysdir( )</a> is defined, and this gives the same
result as <b>ExpandPath("0:\");</b>. </p>

<p>The argument is not converted if it looks like a UNC path or an URL. Neither is it converted on 
the Windows systems if it is a lettered drive, or on unix systems if it begins with slash. </p>


<p>UNC paths begin with two slashes, both in the same direction. (\\ or //) </p>
<p>URLs begin with a string of letters, then a colon followed by two forward slashes.</p>

<p>Although the convention is that Windows systems use backslashes (\) and 
unix systems use forward slashes (/), WinPCS code treats them all as 
directory separators. </p>

<h3>See Also:</h3>
<p>
<a href="#getinistring"> getinistring( ) </a>,<br/>
<a href="#ReducePath">ReducePath( )</a> <br/>
<a href="#stadlginistring">stadlginistring( )</a> <br/>
<a href="#stadlginientries">stadlginientries( )</a> <br/>
</p>

<p>
<a rel="up" href="#E"> ^ --E-- </a>
</p>


<!-- ================================= -->
<!-- F -->

<hr/><a name="F"></a><h2>--F--</h2>
<p>
<a href="#fetchnext"> fetchnext( ) </a>,<br/>
<a href="#fetchprev"> fetchprev( ) </a>,<br/>
<a href="#FHStatus">FHStatus( )</a>, <br/>
<a href="#FiClose">FiClose( )</a>,<br/>
<a href="#FieldInfo">FieldInfo( )</a>,<br/>
<a href="#FileCompare">FileCompare( )</a>,<br/>
<a href="#FileGet">FileGet( )</a>,<br/>
<a href="#FileHierarchy">FileHierarchy( )</a>,<br/>
<a href="#FileInfo">FileInfo( )</a> ,<br/>
<a href="#FilePut">FilePut( )</a>, <br/>
<a href="#FilePutShadow">FilePutShadow( )</a>, <br/>
<a href="#FiReadChar">FiReadChar( )</a>,<br/>
<a href="#FiReadLine">FiReadLine( )</a>,<br/>
<a href="#FiReadParagraph">FiReadParagraph( )</a>,<br/>
<a href="#FiReadParagraphSet">FiReadParagraphSet( )</a>,<br/>
<a href="#FiReadUntil">FiReadUntil( )</a>, <br/>
<a href="#FiSize">FiSize( )</a>,<br/>
<a href="#FiStartAppend">FiStartAppend( )</a>,<br/>
<a href="#FiStartRead">FiStartRead( )</a>,<br/>
<a href="#FiStartWrite">FiStartWrite( )</a>,<br/>
<a href="#FiStatus">FiStatus( )</a>,<br/>
<a href="#FiWriteCSVRecord">FiWriteCSVRecord( )</a>, <br/>
<a href="#FiWriteString">FiWriteString( )</a>, <br/>
<a href="#fieldexists">fieldexists( ) </a>,<br/>
<a href="#filexists">  filexists( ) </a>,<br/>
<a href="#findallconn">findallconn( ) </a>,<br/>
<a href="#findconn">   findconn( ) </a>,<br/>
<a href="#finddual">   finddual( ) </a>,<br/>
<a href="#findexact">  findexact( ) </a>,<br/>
<a href="#findexactset">  findexactset( ) </a>,<br/>
<a href="#findfirst">  findfirst( ) </a>,<br/>
<a href="#findlast">   findlast( ) </a>,<br/>
<a href="#findlessequal">findlessequal( )</a>,<br/>
<a href="#findnear">   findnear( ) </a>,<br/>
<a href="#findop">   findop( ) </a>,<br/>
<a href="#findstdINI"> findstdINI( ) </a>,<br/>
<a href="#FlagDialog"> FlagDialog( ) </a>,<br/>
<a href="#FlagsColFromX">FlagsColFromX( )</a>,<br/>
<a href="#format">     format( ) </a>,<br/>
<a href="#FormDecimal">FormDecimal( )</a> <br/>
</p>
<p>
<a rel="up" href="#Functions.20Reference"> ^ Functions Reference </a> 
<a rel="previous" href="#E"> &lt; --E-- </a>
<a rel="next" href="#G"> &gt; --G-- </a>
</p>

<!-- ================================= -->
<hr/>
<a name="fetchnext"></a> 
<a name="fetchprev"></a> 
<h2>fetchnext and fetchprev</h2>

<h3>Function Name: fetchnext( ) -- RCONN 16 NCONN 32c TMGT 32s TMGT 64s</h3>
<h3>Function Name: fetchprev( ) -- RCONN 16 NCONN 32c TMGT 32s</h3>
<h3>Synopsis:</h3>
<pre><em>value</em><b> = fetchnext(</b><em>table</em><b>);</b></pre>
<pre><em>value</em><b> = fetchprev(</b><em>table</em><b>);</b></pre>

<h3>Description:</h3>
<p>
<b>fetchnext( )</b> repositions the table <em>table</em> to the next record. 
<b>fetchprev( )</b> repositions the table <em>table</em> to the previous record. 
You should have done a searching operation of some sort, like 
<a href="#findexact">findexact( )</a> , <a href="#findnear">findnear( )</a> , or 
<a href="#finddual">finddual( )</a> .</p>

<p>Note, that instead of running a loop beginning with
one of these searching operations, then repeatedly calling 
<b>fetchnext( )</b>,  consider using one of the reporting functions such as
<a href="#ConSelect">ConSelect( )</a>. This is most important on client-side code.</p>

<h3>Return Value:</h3>
<p><b>0</b> if OK, non-zero indicating errors. A common value is <b>9</b> for end of file.</p>

<h3>See Also:</h3>
<p> <a href="#findexact">findexact( )</a>  <br/>
<a href="#findnear">findnear( )</a>  <br/>
<a href="#finddual">finddual( )</a><br/>
</p>

<p> <a rel="up" href="#F"> ^ --F-- </a> </p>
<!-- ================================= -->

<hr/><a name="FHStatus"></a> <h2> FHStatus </h2>
<h3>Function Name: FHStatus() -- NCONN 32c</h3>
<h3>Synopsis:</h3>

<h3>Description:</h3>
<p>UNDER CONSTRUCTION</p>
<pre>
    case 138: /* FHStatus(wherefrom, hierinfo, statusset...)
            Record activities such as creation of notes and Punch Items
            for a FileHierarchy. Fairly hardcoded, not very flexible, 
            not yet (we have to begin somewhere). Also uses the code in the
            hierarchy, so we have to dynlink through to the 
            implementation of it there. */

        bs = DynHIER_FHStatus(FR->hMDI, argc, argv); 
        zprintf(*retval, LCXLIMIT, "%d", bs);
        break;
</pre>
<h3>See Also:</h3>

<p> <a rel="up" href="#F"> ^ --F-- </a> </p>
<!-- ================================= -->

<hr/><a name="FiClose"></a> <h2>FiClose</h2>
<h3>Function Name: FiClose( ) -- LCX 16 LCX 32s LCX 32c LCX 64 </h3>

<h3>Synopsis:</h3>
<pre><b>FiClose(</b><em>ident</em><b>);</b></pre>

<h3>Description:</h3>
<p>This function closes a file opened with either 
<a href="#FiStartRead">FiStartRead( )</a>, 
<a href="#FiStartAppend">FiStartAppend( )</a> or 
<a href="#FiStartWrite">FiStartWrite( )</a> when the reading
and writing is completed and the file no longer is to be accessed.</p>

<p>Failing to close the file may result in leakage of system resources, 
partially written files and other problems. </p>

<h3>See Also:</h3>
<p><a href="#FiStartRead">FiStartRead( )</a>, <br/>
<a href="#FiStartAppend">FiStartAppend( )</a> <br/>
<a href="#FiStartWrite">FiStartWrite( )</a> <br/> <br/>
<a href="#Text.20File.20reading.20functions"> Text File reading functions </a> <br/>
</p>

<p>
<a rel="up" href="#F"> ^ --F-- </a>
</p>

<!-- ================================= -->
<hr/><a name="FieldInfo"></a> <h2>FieldInfo</h2>
<h3>Function Name: FieldInfo( ) -- LCX 32s LCX 32c </h3>

<h3>Synopsis:</h3>
<pre><em>infoset</em><b> = FieldInfo(</b><em>table</em><b>, </b><em>field</em><b>);</b></pre>

<h3>Description:</h3>
<p>UNDER CONSTRUCTION</p>

<h3>See Also:</h3>
<p>
<a href="#ListTableNames">ListTableNames( )</a> ,
<a href="#ListFieldNames">ListFieldNames( )</a> ,
<a href="#fieldexists">fieldexists( )</a> 
</p>

<p>
<a rel="up" href="#F"> ^ --F-- </a>
</p>


<!-- ================================= -->
<hr/><a name="FileCompare"></a> <h2> FileCompare </h2> 
<h3>Function Name: FileCompare( ) -- NCONN 32c</h3>
<h3>Synopsis:</h3>
<pre><em>status</em><b>= FileCompare(</b><em>serverpath</em><b>,</b><em>clientpath</em><b>);</b></pre>

<h3>Description:</h3>
<p>This function compares a file on the server-side with a file on the client-side, and tells
if they are the same or not. </p>

<p>Both arguments may use numbered paths, in which case the <em>serverpath</em> will resolve
according to the definitions for the server, and the <em>clientpath</em> 
similarly will resolve according to the path definitions on the client, in both cases as per the
rules shown under <a href="#ExpandPath">ExpandPath( )</a>.</p>


<h3>Return Value:</h3>
<p>The function returns 0 if the files' contents were found to be identical, and 1 if they were at
all different. The return value can also be various negative values indicating file not found, 
server not available, etc. </p>


<h3>See Also:</h3>
<p>
<a href="#ExpandPath">ExpandPath( )</a> <br/>
<a href="#FileGet">FileGet( )</a> <br/>
<a href="#FilePut">FilePut( )</a> <br/>
<a href="#FilePutShadow">FilePutShadow( )</a> <br/>
</p>

<p>
<a rel="up" href="#F"> ^ --F-- </a>
</p>

<!-- ================================= -->
<hr/><a name="FileGet"></a> <h2> FileGet </h2>
<h3>Function Name: FileGet( ) -- NCONN 32c</h3>
<h3>Synopsis:</h3>
<pre><em>status</em><b>= FileGet(</b><em>serverpath</em><b>,</b><em>localpath</em><b>);</b></pre>

<h3>Description:</h3>
<p>Copies the contents of some file accessible to the server over to the client 
using the same method as is used for status index data and other large 
data sets. Both paths may be absolute or may be WinPCS numbered-drive paths.
</p>

<p>
<a href="#FilePut">FilePut( )</a> 
moves data in the other direction. </p>

<h3>Return Value:</h3>
<p>The function returns a negative value for errors causing failure,
and 0 or a positive value for success.</p>

<h3>See Also:</h3>
<p>
<a href="#FilePut">FilePut( )</a> <br/>
<a href="#FilePutShadow">FilePutShadow( )</a> <br/>
</p>

<p> <a rel="up" href="#F"> ^ --F-- </a> </p>

<!-- ================================= -->
<hr/><a name="FileHierarchy"></a> <h2> FileHierarchy </h2>
<h3>Function Name: FileHierarchy( ) -- NCONN 32c</h3>
<h3>Synopsis:</h3>

<h3>Description:</h3>
<pre>
    case 136: /* FileHierarchy(rootname, datadir, statusfile ...)
            Given a CSV-style text-file, described in a companion INI file,
            datadir\rootname.csv and datadir\rootname.ini, 
            open a hierarchy on this and have it behave somewhat like 
            the table-based hierarchy.  Have it record the status-changes 
            in the datadir\statusfile. */

        Zhwnd = DynHIER_Start(FR->hMDI, 1, 6, argv[0], argv+1);
        zprintf(*retval, LCXLIMIT, "%d", Zhwnd);
        break;
</pre>

<h3>See Also:</h3>


<p> <a rel="up" href="#F"> ^ --F-- </a> </p>

<!-- ================================= -->
<hr/><a name="FileInfo"></a> <h2> FileInfo </h2>

<h3>Function Name: FileInfo( ) -- NCONN 32c TMGT 32s</h3>
<h3>Synopsis:</h3>
<pre><em>infoset</em><b>= FileInfo(</b><em>pathname</em><b>);</b></pre>

<h3>Description</h3>
<p>This function looks at the information about some file. The <em>pathname</em> may
contain numbered paths: the <a href="#ExpandPath">ExpandPath( )</a> 
function is run on the supplied name prior to checking in the file system. </p>

<h3>Return Value</h3>
<p>The function returns a 4-part set, where the elements are:</p>

<table border="1" cellspacing="1" cellpadding="2">
<tbody>
<tr><td>Element</td><td>Description
</td></tr>
<tr><td><b>setitem(</b><em>infoset</em><b>, 0)</b></td><td><b>0</b> if the file was found and there is 
    anything useful in the following elements</td></tr>
<tr><td><b>setitem(</b><em>infoset</em><b>, 1)</b></td><td>Date of file in YYYY/MM/DD format</td></tr>
<tr><td><b>setitem(</b><em>infoset</em><b>, 2)</b></td><td>Time of file in HH:MM:SS format</td></tr>
<tr><td><b>setitem(</b><em>infoset</em><b>, 3)</b></td><td>Size of file </td></tr>
<tr><td><b>setitem(</b><em>infoset</em><b>, 4)</b></td><td>Julian Day number of the file's date</td></tr>
</tbody>
</table>

<h3>See Also:</h3>
<p> <a href="#ExpandPath">ExpandPath( )</a> , <br/>
<a href="#DateCanonical">DateCanonical( )</a> ,<br/>
<a href="#time">time( )</a> <br/>
<a href="#julday">julday( )</a> <br/>
<a href="#caldat">caldat( )</a> <br/>
</p>

<p> <a rel="up" href="#F"> ^ --F-- </a> </p>

<!-- ================================= -->

<hr/><a name="FilePut"></a> <h2> FilePut </h2>
<a name="FilePutShadow"></a> <h2> FilePutShadow </h2>
<h3>Function Name: FilePut( ) -- NCONN 32c</h3>
<h3>Function Name: FilePutShadow( ) -- NCONN 32c</h3>
<h3>Synopsis:</h3>
<pre><em>status</em><b>= FilePut(</b><em>localpath</em><b>,</b><em>serverpath</em><b>);</b></pre>

<pre><em>status</em><b>= FilePutShadow(</b><em>localpath</em><b>,</b><em>serverpath</em><b>);</b></pre>

<h3>Description:</h3>
<p>Copies the contents of some file accessible to the client over to the server 
using the same method as is used for status index data and other large 
data sets. Both paths may be absolute or may be WinPCS numbered-drive paths.  </p>

<p>The copying will fail if the WinPCS server process does not have write 
access to the drive or other location where it wants to put the data. 
Existing files will be overwritten.</p>

<p><a href="#FileGet">FileGet( )</a> 
moves data in the other direction. </p>

<p>The variant named <b>FilePutShadow( )</b> generates a shadow 
or backup copy of the file having been sent to the server, 
this is controlled by the entry 
<b>shadow=</b> in <b>server.ini</b> section <b>[options]</b>.</p> 

<p>If this entry is absent the 
<b>FilePutShadow( )</b> function will behave the same as
<b>FilePut( )</b>.</p>

<h3>Return Value:</h3>
<p>The function returns a negative value for errors causing failure,
and 0 or a positive value for success.</p>

<h3>See Also:</h3>
<a href="#FileGet">FileGet( )</a> <br/>
<a href="serverini.html#options.shadow">Server.ini section [options] entry shadow=</a><br/>
<p> <a rel="up" href="#F"> ^ --F-- </a> 
</p>

<!-- ================================= -->
<hr/><a name="FiReadChar"></a> <h2>FiReadChar</h2>
<h3>Function Name: FiReadChar( ) -- LCX 16 LCX 32s LCX 32c LCX 64 </h3>

<h3>Synopsis:</h3>
<pre><em>value</em><b>= FiReadChar(</b><em>handle</em><b>);</b></pre>

<h3>Description:</h3>
<p>FiReadChar() reads a single character out of the file, identified
by the <em>handle</em>, as this has been returned from an earlier call to 
<a href="#FiStartRead">FiStartRead( )</a>. </p>

<h3>Return Value:</h3>
<p>The returned value is this character.  (End of file conditions?)</p>

<h3>See Also:</h3>
<p><a href="#FiStartRead">FiStartRead( )</a>, <br/>
<a href="#FiClose">FiClose( )</a> <br/> 
<a href="#Text.20File.20reading.20functions"> Text File reading functions </a> <br/>
</p>

<p>
<a rel="up" href="#F"> ^ --F-- </a>
</p>

<!-- ================================= -->
<hr/><a name="FiReadLine"></a> <h2>FiReadLine</h2>
<h3>Function Name: FiReadLine( ) -- LCX 16 LCX 32s LCX 32c LCX 64 </h3>

<h3>Synopsis:</h3>
<pre><em>line</em><b>= FiReadLine(</b><em>handle</em><b>);</b></pre>

<h3>Description:</h3>
<p>FiReadLine() reads a single whole line ending with a newline character, 
out of the file, identified by the <em>handle</em>, as this has been 
returned from an earlier call to 
<a href="#FiStartRead">FiStartRead( )</a>. </p>

<p>The end-of line newline character itself is included at the end of 
the line returned. The <a href="#csvtoset">csvtoset( )</a> 
function may be used to convert the read-in line from a CSV file record
into a set, with specified quotes and separators.</p>

<h3>Return Value:</h3>
<p>The returned value is the line read.  (Empty lines? End of file conditions?)</p>

<h3>See Also:</h3>
<p><a href="#FiStartRead">FiStartRead( )</a>, <br/>
<a href="#FiClose">FiClose( )</a> <br/> <br/>
<a href="#Text.20File.20reading.20functions"> Text File reading functions </a> <br/>
</p>

<p>
<a rel="up" href="#F"> ^ --F-- </a>
</p>

<!-- ================================= -->
<hr/><a name="FiReadParagraph"></a> <h2>FiReadParagraph</h2>
<h3>Function Name: FiReadParagraph( ) -- LCX 16 LCX 32s LCX 32c LCX 64 </h3>

<h3>Synopsis:</h3>
<pre><em>text</em><b>= FiReadParagraph(</b><em>handle</em><b>);</b></pre>

<h3>Description:</h3>
<p>
<b>FiReadParagraph( )</b> reads a number of lines in one go, and 
returns all the text including line-break characters (check) 
until a blank line is encountered. A "paragraph" therefore ends in 
a blank line. </p>

<p>If it is of interest to separate some text into lines or words, use the 
<a href="#converttoset">converttoset( )</a> 
function using the line-break character or 
space character as the separator. </p>

<h3>Availability:</h3>
<p>UNDER CONSTRUCTION</p>

<h3>See Also:</h3>
<p>
<a href="#FiStartRead">FiStartRead( )</a>, <br/>
<a href="#FiClose">FiClose( )</a> <br/> 
<a href="#Text.20File.20reading.20functions"> Text File reading functions </a> <br/>
</p>
<p>
<a rel="up" href="#F"> ^ --F-- </a>
</p>

<!-- ================================= -->
<hr/><a name="FiReadParagraphSet"></a> <h2>FiReadParagraphSet</h2>
<h3>Function Name: FiReadParagraphSet( ) -- LCX 16 LCX 32s LCX 32c LCX 64 </h3>

<h3>Synopsis:</h3>
<pre><em>value</em><b>= FiReadParagraphSet(</b><em>handle</em><b>);</b></pre>

<h3>Description:</h3>
<p><b>FiReadParagraphSet( )</b> reads a number of lines in a file and stops
when it finds a blank line. The data returned is in the form of a set
where each element corresponds to a line in the file.  </p>

<p>If it is of interest to separate some text into words, use the 
<a href="#converttoset">converttoset( )</a> 
function using the space character as the separator on
each element.  </p>

<h3>Availability:</h3>
<p>UNDER CONSTRUCTION</p>

<h3>See Also:</h3>
<p>
<a href="#FiStartRead">FiStartRead( )</a>, <br/>
<a href="#FiClose">FiClose( )</a> <br/> 
<a href="#Text.20File.20reading.20functions"> Text File reading functions </a> <br/>
</p>

<p>
<a rel="up" href="#F"> ^ --F-- </a>
</p>

<!-- ================================= -->
<hr/><a name="FiReadUntil"></a> <h2>FiReadUntil</h2>
<h3>Function Name: FiReadUntil( ) -- LCX 16 LCX 32s LCX 32c LCX 64 </h3>

<h3>Synopsis:</h3>

<h3>Description:</h3>
<p><b>FiReadUntil( )</b> returns whatever is in the file up to, but not 
including (check), the specified value <em>stop</em>. </p>

<h3>Availability:</h3>
<p>UNDER CONSTRUCTION</p>

<h3>See Also:</h3>
<p>
<a href="#FiStartRead">FiStartRead( )</a>, <br/>
<a href="#FiClose">FiClose( )</a> <br/> <br/>
<a href="#Text.20File.20reading.20functions"> Text File reading functions </a> <br/>
</p>

<p>
<a rel="up" href="#F"> ^ --F-- </a>
</p>

<!-- ================================= -->
<hr/><a name="FiSize"></a> <h2>FiSize</h2>
<h3>Function Name: FiSize( ) -- LCX 16 LCX 32s LCX 32c LCX 64 </h3>

<h3>Synopsis:</h3>

<h3>Description:</h3>

<h3>Availability:</h3>
<p>
UNDER CONSTRUCTION
</p>

<h3>See Also:</h3>
<p>
<a href="#FiStartRead">FiStartRead( )</a>, <br/>
<a href="#FiClose">FiClose( )</a> <br/> 
<a href="#Text.20File.20reading.20functions"> Text File reading functions </a> <br/>
</p>

<p>
<a rel="up" href="#F"> ^ --F-- </a>
</p>

<!-- ================================= -->
<hr/><a name="FiStartAppend"></a> <h2>FiStartAppend</h2>
<h3>Function Name: FiStartAppend( ) -- LCX 32  </h3>

<h3>Synopsis:</h3>
<em>ident</em><b> = FiStartAppend(</b><em>path</em><b>)</b><br/>

<h3>Description:</h3>
<p>This function opens a file for writing. </p>

<p>if the file does not exist it will be created. </p>

<p>If the file already exists it will have text appended to it.</p>

<p>To put contents into the file, use calls such as 
<a href="#FiWriteString">FiWriteString( )</a>. After 
use, the file should be closed with
<a href="#FiClose">FiClose( )</a>. </p>

<p>In order to open files and truncate existing ones,
use the function 
<a href="#FiStartWrite">FiStartWrite( )</a> instead.</p>

<p>For opening files for reading, there is another function called
<a href="#FiStartRead">FiStartRead( )</a>, which returns a similar
handle. Files may be open for either writing or reading, not both at the
same time. </p>

<p>The path must refer to a general valid file name, it cannot be the
"numbered drives" file. Use <a href="#ExpandPath">ExpandPath( )</a> as necessary.  </p>

<h3>See Also:</h3>
<p>
<a href="#FiStartRead">FiStartRead( )</a>, <br/>
<a href="#FiStartWrite">FiStartWrite( )</a>, <br/>
<a href="#FiWriteString">FiWriteString( )</a> <br/>
<a href="#FiClose">FiClose( )</a> <br/> <br/>
<a href="#Text.20File.20reading.20functions"> Text File reading functions </a> <br/>
</p>

<p>
<a rel="up" href="#F"> ^ --F-- </a>
</p>



<!-- ================================= -->
<hr/><a name="FiStartRead"></a> <h2>FiStartRead</h2>
<h3>Function Name: FiStartRead( ) -- LCX 16 LCX 32s LCX 32c LCX 64 </h3>

<h3>Synopsis:</h3>
<em>ident</em><b> = </b>FiStartRead<b>(</b><em>path</em><b>)</b><br/>

<h3>Description:</h3>
<p>This opens a text file found as <em>path</em> for reading.  
Note that this must be a general valid file name, it cannot be the
"numbered path" file. Use 
<a href="#ExpandPath">ExpandPath( )</a> as necessary.  </p>

<p>The return value is a handle which identifies that file, and thus we may
have several files open at a time.  </p>

<p>Any one of the <b>FiRead</b><em>XXX</em><b>()</b> 
functions may be used for reading, then the <a href="#FiClose">FiClose( )</a>
function is used to close the file afterwards. </p>

<p>For opening files for writing, there are two other functions called
<a href="#FiStartWrite">FiStartWrite( )</a> and
<a href="#FiStartAppend">FiStartAppend( )</a> which returns a similar
handle. Files may be open for either writing or reading, not both at the
same time. </p>

<h3>See Also:</h3>
<p>
<a href="#FiClose">FiClose( )</a>,<br/>
<a href="#FiReadChar">FiReadChar( )</a>,<br/>
<a href="#FiReadLine">FiReadLine( )</a>,<br/>
<a href="#FiReadParagraph">FiReadParagraph( )</a>,<br/>
<a href="#FiReadParagraphSet">FiReadParagraphSet( )</a>,<br/>
<a href="#FiReadUntil">FiReadUntil( )</a>,<br/>
<a href="#FiStartWrite">FiStartWrite( )</a> <br/>
<a href="#FiStartAppend">FiStartAppend( )</a> <br/>
<a href="#Text.20File.20reading.20functions"> Text File reading functions </a> <br/>
</p>

<p>
<a rel="up" href="#F"> ^ --F-- </a>
</p>

<!-- ================================= -->
<hr/><a name="FiStartWrite"></a> <h2>FiStartWrite</h2>
<h3>Function Name: FiStartWrite( ) -- LCX 16, LCX 32  </h3>

<h3>Synopsis:</h3>
<em>ident</em><b> = FiStartWrite(</b><em>path</em><b>)</b><br/>

<h3>Description:</h3>
<p>This function opens a file for writing. If the file already exists, it will be overwritten,
if the file does not exist it wll be created. To put contents into the file, use calls
<a href="#FiWriteString">FiWriteString( )</a>. After use, the file should be closed with
<a href="#FiClose">FiClose( )</a>. </p>

<p>For opening a file and allowing text to be added to it, use
<a href="#FiStartAppend">FiStartAppend( )</a> instead.</p>

<p>For opening files for reading, there is another function called
<a href="#FiStartRead">FiStartRead( )</a>, which returns a similar
handle. Files may be open for either writing or reading, not both at the
same time. </p>

<p>The path must refer to a general valid file name, it cannot be the
"numbered drives" file. Use <a href="#ExpandPath">ExpandPath( )</a> as necessary.  </p>

<h3>See Also:</h3>
<p>
<a href="#FiStartRead">FiStartRead( )</a>, <br/>
<a href="#FiStartAppend">FiStartAppend( )</a>, <br/>
<a href="#FiWriteString">FiWriteString( )</a> <br/>
<a href="#FiClose">FiClose( )</a> <br/> <br/>
<a href="#Text.20File.20reading.20functions"> Text File reading functions </a> <br/>
</p>

<p>
<a rel="up" href="#F"> ^ --F-- </a>
</p>

<!-- ================================= -->
<hr/><a name="FiStatus"></a> <h2>FiStatus</h2>
<h3>Function Name: FiStatus( ) -- LCX 16 LCX 32s LCX 32c LCX 64 </h3>

<h3>Synopsis:</h3>
<pre><em>value</em><b> = FiStatus(</b><em>handle</em><b>);</b></pre>
<pre><em>value</em><b> = FiStatus(</b><em>handle</em><b>, </b><em>request</em><b>);</b></pre>

<h3>Description:</h3>
<p>This function is supposed to give some status-information on an opened file. 
So far, it returns 0 if the file is open for reading and reading has not come to the
end, and 1 for end-of-file. The <em>request</em> argument is ignored. Further options
are expected to appear in the future.</p>

<h3>Availability:</h3>
<p>UNDER CONSTRUCTION</p>

<h3>See Also:</h3>
<p>
<a href="#FiStartRead">FiStartRead( )</a>, <br/>
<a href="#FiStartWrite">FiStartWrite( )</a>, <br/>
<a href="#FiStartAppend">FiStartAppend( )</a>, <br/>
<a href="#FiClose">FiClose( )</a> <br/> <br/>
<a href="#Text.20File.20reading.20functions"> Text File reading functions </a> <br/>
</p>

<p>
<a rel="up" href="#F"> ^ --F-- </a>
</p>

<!-- ================================= -->
<hr/><a name="FiWriteCSVRecord"></a> <h2>FiWriteCSVRecord</h2>
<h3>Function Name: FiWriteCSVRecord( ) -- LCX 16  </h3>

<h3>Synopsis:</h3>

<h3>Description:</h3>

<h3>Availability:</h3>
<p>UNDER CONSTRUCTION.</p>

<h3>See Also:</h3>
<p>
<a href="#FiStartWrite">FiStartWrite( )</a>, <br/>
<a href="#FiStartAppend">FiStartAppend( )</a>, <br/>
<a href="#FiClose">FiClose( )</a> <br/> 
<a href="#Text.20File.20reading.20functions"> Text File reading functions </a> <br/>
</p>

<p>
<a rel="up" href="#F"> ^ --F-- </a>
</p>



<!-- ================================= -->
<hr/><a name="FiWriteString"></a> <h2>FiWriteString</h2>
<h3>Function Name: FiWriteString( ) -- LCX 32  </h3>

<h3>Synopsis:</h3>
<pre><em>value</em><b> = FiWriteString(</b><em>handle</em><b>, </b><em>text</em><b>);</b></pre>

<h3>Description:</h3>
<p>This function writes a string to a file opened for writing with 
<a href="#FiStartWrite">FiStartWrite( )</a> or
<a href="#FiStartAppend">FiStartAppend( )</a> 
The contents of the variable <em>text</em> is written as it is, with no additional new-lines 
or similar framing being added. </p>

<p>This function can be called repeatedly, it will then put the text into the file in the order
that the calls to <b>FiWriteString( )</b> are made. </p>

<p>When finished, the file should be closed with <a href="#FiClose">FiClose( )</a> </p>


<h3>See Also:</h3>
<p>
<a href="#FiStartWrite">FiStartWrite( )</a>, <br/>
<a href="#FiStartAppend">FiStartAppend( )</a>, <br/>
<a href="#FiClose">FiClose( )</a> <br/> 
</p>

<p>
<a rel="up" href="#F"> ^ --F-- </a>
</p>


<!-- ================================= -->
<hr/><a name="fieldexists"></a> <h2>fieldexists</h2>

<h3>Function Name: fieldexists( ) -- LCX 16 NCONN 32c TMGT 32s TMGT 64s</h3>
<h3>Synopsis:</h3>
<pre><em>code</em><b> = fieldexists( </b><em>tablename</em><b>, </b><em>fieldname</em><b>);</b></pre>

<h3>Description: </h3>
<p>This function checks if a field is present in a table.</p>

<h3>Return Value:</h3>
<p>
<b>2</b> if the field exists and is a key field, <br/>
<b>1</b> if the field exists and is not a key field, <br/>
<b>0</b> if it does not exist.</p>

<h3>See Also:</h3>
<p>
<a href="#getany">getany( )</a><br/>
</p>

<p>
<a rel="up" href="#F"> ^ --F-- </a>
</p>

<!-- ================================= -->
<hr/><a name="filexists"></a> <h2>filexists</h2> 

<h3>Function Name: filexists( ) -- LCX 16 LCX 32s LCX 32c LCX 64</h3>
<h3>Synopsis:</h3>
<pre><em>boolean</em><b> = filexists(</b><em>path</em><b>);</b></pre>

<h3>Description: </h3>
<p>This function checks if a file is present.</p>

<h3>Return Value:</h3>
<p> <b>1</b> if the file exists, <b>0</b> if it does not.</p>

<p>
<a rel="up" href="#F"> ^ --F-- </a>
</p>

<!-- ================================= -->
<hr/><a name="findallconn"></a> <h2>findallconn</h2>


<h3>Function Name: findallconn( ) -- RCONN 16</h3>

<h3>Availability:</h3>
<p>UNDER CONSTRUCTION </p>

<p>
<a rel="up" href="#F"> ^ --F-- </a>
</p>


<!-- ================================= -->
<hr/><a name="findconn"></a> <h2>findconn</h2>

<h3>Function Name: findconn( )  -- RCONN 16 NCONN 32c TMGT 32s TMGT 64s</h3>
<h3>Synopsis:</h3>
<pre><em>status</em><b> = findconn(</b><em>cursor</em><b>, </b><em>operation</em><b>);</b></pre>

<h3>Description:</h3>
<p>Search connections started using <a href="#startconnscan">startconnscan( )</a>.  
After the search is at an end, the <a href="#stopconnscan">stopconnscan( ) </a>
function is to be used to clean up.  
<br/><em>operation</em><b>=0</b> searches for the first connection, 
<br/><em>operation</em><b>=1</b> finds the next connection.</p>

<h3>Return Value:</h3>
<p>The function returns a a 2-part set, where the first part is a numeric value,
and one of<br/>
<b>0</b> on success, <br/>
<b>4</b> for no connection found, <br/>
<b>9</b> for end of connections. <br/>
If non-zero, the value is used to identify the error status. The second part
is an explanation of this status code. </p>

<h3>Availability:</h3>
<p>Construction:</p>
<p> On the 32-bit clients, we may have to change the semantics of 
the startconnscan() and findconn() functions
so as to make them return data on several specified fields, rather than 
any "current record".</p>

<h3>See Also:</h3>
<p>
<a href="#startconnscan">startconnscan( )</a>,  <br/>
<a href="#stopconnscan">stopconnscan( ) </a>, <br/>
<a href="#fetchnext">fetchnext( ) </a>, <br/>
</p>

<p>
<a rel="up" href="#F"> ^ --F-- </a>
</p>

<!-- ================================= -->

<hr/><a name="finddual"></a> <h2>finddual</h2>
<h3>Function Name: finddual( ) -- RCONN 16 NCONN 32c TMGT 32s TMGT 64s</h3>

<h3>Synopsis:</h3>
<pre><em>status</em><b> = finddual(</b><em>relbase</em><b>, </b><em>itembase</em><b>, </b><em>itembasekey</em><b>, </b><em>itembasekval</em><b>, </b><em>relbasekey</em><b>, </b><em>relbasekval</em><b>);</b></pre>

<h3>Description:</h3>
<p>This function will position a pair of tables, 
<em>itembase</em> and <em>relbase</em> linked in an 
RCONN record to the specific records where 
the value in the field <em>itembasekey</em> matches <em>itembasekval</em>
and the value in the field <em>relbasekey</em> matches <em>relbasekval</em>.  
</p>

<p> After the operation, if it is 
successful, the two tables will be positioned on the matching records.  
If possible, the connection table and RCONN will also be positioned
to the relevant records. RCONN will be positioned so that the fields
ITEMBASE and RELBASE contain the names of the <em>itembase</em> and 
<em>relbase</em>.
</p>

<p>The name of the connection table can be found by reading RCONN's 
field CONBASE, this table will be positioned on the record 
identifying the connection. 
</p>

<h3>Return Value:</h3>
<p>Status of the internal Get-Equal operations, encoded as a set where the 
first value is the numeric code 
and the second value is a standard error message. Use 
<a href="#setitem">setitem( )</a>  to pick out the value for use in 
<a href="#if.2delse">if-else</a> tests.
</p>


<h3>See Also:</h3>
<p><a href="#findexact">findexact( ) </a>, <br/>
<a href="#findnear">findnear( ) </a> <br/>
</p>

<p>
<a rel="up" href="#F"> ^ --F-- </a>
</p>

<!-- ================================= -->
<hr/><a name="findexact"></a> <h2>findexact</h2>
<h3>Function Name: findexact( ) -- RCONN 16 NCONN 32c TMGT 32s</h3>
<h3>Synopsis:</h3>
<pre><em>status</em><b> = findexact(</b><em>table</em><b>, </b><em>keyfield</em><b>, </b><em>keyvalue</em><b>);</b></pre>

<h3>Description:</h3>
<p>
This is used to find an exact matching value to a field <em>keyfield</em> 
in a table ("database") named <em>table</em>.  If there is no match, an error 
status will be returned. On ISAM (Btrieve or BTRS) systems, if the keyfield refers to a multi-segment key, 
the keyvalue should be a set, put together using <a href="#makeset">makeset( )</a> .
</p>

<p>If the system runs SQL, this function will only look for a match to a single field, the 
<em>keyfield</em>, and match the first of the elements in the set <em>keyvalue</em>.  
For finding matches to combinations of fields, the 
<a href="#findexactset">findexactset( )</a> 
function is provided. </p>

<p>For the common case of finding a connection-information record in RCONN, the function
<a href="#findop">findop( )</a> 
will work on all systems. SQL systems keys directly on the 
RELBASE-ITEMBASE combination, while ISAM (BTRS/Btrieve) systems 
key on the UNIOP (OPERATION-ITEMBASE) aliased 
key fields.  There is no UNIOP, OPERATION or COOPERATION fields in the SQL 
systems' RCONN table at all, but the
<a href="#findop">findop( )</a> 
function takes care of this difference and will work on all systems.
</p>

<h3>Return Value:</h3>
<p>
A set consisting of the Btrieve operation status value and a description. 
If successful, the current record of the table is the one where the keyfield has the desired keyvalue.
(WinPCS uses similar operation status codes for the SQL-based systems).
</p>

<p>Commonly seen values are 0 (<b>setitem(status, 0) == 0</b>) for record found, and
4 (<b>setitem(status, 0) == 4</b>) for record was not found. </p>

<h3>See Also:</h3>
<p>
<a href="#findexactset">findexactset( )</a> , <br/>
<a href="#finddual">finddual( )</a> ,<br/>
<a href="#findnear">findnear( )</a> ,<br/>
<a href="#makeset">makeset( )</a>, <br/>
<a href="#findop">findop( )</a> 
</p>

<p>
<a rel="up" href="#F"> ^ --F-- </a>
</p>

<!-- ================================= -->
<hr/><a name="findexactset"></a> <h2>findexactset</h2>
<h3>Function Name: findexactset( ) -- NCONN 32c TMGT 32s</h3>
<h3>Synopsis:</h3>
<pre><em>status</em><b> = findexactset(</b><em>table</em><b>, </b><em>keyfieldset</em><b>, </b><em>keyvalueset</em><b>);</b></pre>

<h3>Description:</h3>
<p>
This function is useful on SQL-based systems to find an exact matching value in a table, where a number of
fields have to have corresponding matching values. The idea of multi-segment keys is not used on these
SQL-based systems, thus, unlike with 
<a href="#findexact">findexact( )</a> 
, each key field has to be specified.  The effect of this is that on Btrieve-based systems, only the first
key name in the <em>keyfieldset</em> will be used, and the behavior becomes the same as for
<a href="#findexact">findexact( )</a>.  Thus, while on an SQL-based system, any combination of 
fields may be specified, on the Btrieve-based systems, only a keyfield which is the first of 
possibly several segments of a key, may be specified here. </p>

<h3>Return Value:</h3>
<p>The function returns a 2-part set, where the first part is a status code. </p>
<p>If there was no match found, this status code will be 4. If there was a match, the status code
will be 0. If there were some other errors, (mis-spelt table, unknown field, etc) some nonzero 
status code corresponding to that error will be returned. </p>
<p>Thus, the commonly seen values are 0 (<b>setitem(status, 0) == 0</b>) for record was found, and
4 (<b>setitem(status, 0) == 4</b>) for record was not found. </p>

<p>Note that for looking for connection information in RCONN, this
table is very different between SQL and non-SQL systems, and the function
<a href="#findop">findop( )</a> 
should be used for this purpose. </p>

<h3>Positioning:</h3>
<p>On Btrieve-based (BTRS) systems, this function positions just like regular
<a href="#findexact">findexact( )</a> 
or the special-purpose function 
<a href="#findop">findop( )</a> 
does.</p>

<p>On SQL-based systems, it will be possible to perform a 
<a href="#fetchnext">fetchnext( )</a> 
call and obtain the next record in the sequence for the key-field combination. If there are duplicates, these
will be the first to be returned. Stepping backwards,
<a href="#fetchprev">fetchprev( )</a> 
, only goes as far as the previous number of recent calls to 
<a href="#fetchnext">fetchnext( )</a>.  
<a href="#fetchprev">fetchprev( )</a> 
will stop with the status code 9, end-of-data, if attempted to step past the point at where
<b>findexactset( )</b> returned. </p>

<p>The special-purpose function 
<a href="#findop">findop( )</a> 
positions in the same way, with the RELBASE-ITEMBASE pair as the key</p>

<h3>See Also:</h3>
<p>
<a href="#findexact">findexact( )</a> , <br/>
<a href="#finddual">finddual( )</a> ,<br/>
<a href="#findnear">findnear( )</a> ,<br/>
<a href="#findop">findop( )</a> , <br/>
<a href="#fetchnext">fetchnext( )</a> , <br/>
<a href="#makeset">makeset( )</a> <br/>
</p>

<p>
<a rel="up" href="#F"> ^ --F-- </a>
</p>

<!-- ================================= -->
<hr/><a name="findfirst"></a> <h2>findfirst</h2> 

<h3>Function Name: findfirst( ) -- RCONN 16 NCONN 32c TMGT 32s TMGT 64s</h3>
<h3>Synopsis:</h3>
<pre><em>status</em><b> = findfirst(</b><em>table</em><b>, </b><em>keyfield</em><b>);</b></pre>

<h3>Description</h3>
<p>
This function searches a table for the first value found for the specified key. 
</p>

<h3>Return Value:</h3>
<p>
A set consisting of the Btrieve operation status value and description. If successful, the 
current record of the table is the one where the keyfield has the lowest value.
</p>

<h3>See Also:</h3>
<p>
<a href="#findexact">findexact( )</a> ,<br/>
<a href="#finddual">finddual( )</a> ,<br/>
<a href="#findlast">findlast( )</a> <br/>
</p>

<p>
<a rel="up" href="#F"> ^ --F-- </a>
</p>

<!-- ================================= -->
<hr/><a name="findlast"></a> <h2>findlast</h2>

<h3>Function Name: findlast( ) -- RCONN 16 NCONN 32c TMGT 32s</h3>
<h3>Synopsis:</h3>
<pre><em>status</em><b> = findlast(</b><em>table</em><b>, </b><em>keyfield</em><b>);</b></pre>

<h3>Description</h3>
<p>
This function searches a table for the last (greatest) value found for the specified key. 
</p>

<h3>Return Value:</h3>
<p>
A set consisting of the Btrieve operation status value and description. If successful, the 
current record of the table is the one where the keyfield has the highest value.
</p>

<h3>See Also:</h3>
<p>
<a href="#findexact">findexact( )</a> ,<br/>
<a href="#finddual">finddual( )</a> ,<br/>
<a href="#findfirst">findfirst( )</a> <br/>
</p>

<p>
<a rel="up" href="#F"> ^ --F-- </a>
</p>

<!-- ================================= -->
<hr/><a name="findlessequal"></a> <h2>findlessequal</h2> 

<h3>Function Name: findlessequal( ) -- RCONN 16 NCONN 32c TMGT 32s</h3>
<h3>Synopsis:</h3>
<pre><em>status</em><b> = findlessequal(</b><em>table</em><b>, </b><em>keyfield</em><b>, </b><em>keyvalue</em><b>);</b></pre>

<h3>Description:</h3>
<p>This function positions the current record to the given value of the keyfield, or to the 
next lower value if there is no match.  If there is no match, an error status will be 
returned. If the keyfield refers to a multi-segment key, the keyvalue should be the result 
of a <a href="#makeset">makeset( )</a> function, where the values of the segments of the key are the set's 
components from left to right.  
</p>

<h3>Return Value:</h3>
<p>A set consisting of the Btrieve operation status value and description. If successful, the 
current record of the table is the one where the keyfield has the desired keyvalue.
</p>

<h3>See Also:</h3>
<p><a href="#findexact">findexact( )</a> ,<br/>
<a href="#finddual">finddual( )</a> ,<br/>
<a href="#makeset">makeset( )</a><br/>
</p>

<p>
<a rel="up" href="#F"> ^ --F-- </a>
</p>

<!-- ================================= -->
<hr/><a name="findnear"></a> <h2>findnear</h2> 

<h3>Function Name: findnear( ) -- RCONN 16 NCONN 32c TMGT 32s</h3>
<h3>Synopsis:</h3>
<pre><em>status</em><b> = findnear(</b><em>table</em><b>, </b><em>keyfield</em><b>, </b><em>keyvalue</em><b>);</b></pre>

<h3>Description:</h3>
<p>
This function positions the current record to the given value of the keyfield, or to the 
next higher value if there is no match.  If there is no match, an error status will be 
returned. If the keyfield refers to a multi-segment key, the keyvalue should be the result 
of a <a href="#makeset">makeset( )</a> function, where the values of the segments of the key are the set's 
components from left to right.  
</p>

<h3>Return Value:</h3>
<p>
A set consisting of the Btrieve operation status value and description. If successful, the 
current record of the table is the one where the keyfield has the desired keyvalue.
</p>

<h3>See Also:</h3>
<p>
<a href="#findexact">findexact( )</a> ,<br/>
<a href="#finddual">finddual( )</a> ,<br/>
<a href="#makeset">makeset( )</a><br/>
</p>

<p>
<a rel="up" href="#F"> ^ --F-- </a>
</p>

<!-- ================================= -->
<hr/><a name="findop"></a> <h2>findop</h2> 
<h3>Function Name: findop( ) -- NCONN 32c TMGT 32s</h3>
<h3>Synopsis:</h3>
<pre><em>status</em><b> = findop(</b><em>relbase</em><b>, </b><em>itembase</em><b>);</b></pre>

<h3>Description:</h3>

<p>Equivalent to </p>
<pre><em>status</em><b> = findexact("RCONN", "UNIOP", makeset(</b><em>relbase</em><b>, </b><em>itembase</em><b>));</b></pre>
<p>which works right on Btrieve systems, but fails on SQL systems since
RCONN does not have the same multi-segment key field UNIOP there. This
function will work right everywhere.
</p>

<h3>Return Value:</h3>
<p>The function returns a 2-part set, where the first part is a status code. </p>
<p>If there was no match found in RCONN for the supplied combination of 
relbase and itembase, this status code will be 4. 
If there was a match, the status code will be 0. At this point, the information
in the RCONN record can be read with <a href="#multiget">multiget( )</a> 
, in the same manner as all other tables. </p>

<h3>See Also:</h3>
<p>
<a href="#findexactset">findexactset( )</a>,<br/>
<a href="#findexact">findexact( )</a>,<br/>
<a href="#makeset">makeset( )</a> ,<br/>
<a href="#multiget">multiget( )</a> 
</p>

<p>
<a rel="up" href="#F"> ^ --F-- </a>
</p>

<!-- ================================= -->
<hr/><a name="findstdINI"></a> <h2>findstdINI</h2> 

<h3>Function Name: findstdINI( ) -- RCONN 16 NCONN 32c</h3>
<h3>Synopsis:</h3>
<pre><em>path</em><b> = findstdINI(</b><em>category</em><b>, </b><em>table</em><b>);</b></pre>

<h3>Description:</h3>
<p>
This makes a query into WinPCS internal structures for the INI file for an Entry or a View 
of the named table.  The <em>category</em> is <b>E</b> for Entry, and <b>V</b> for View.  
These paths can be used to operate the 
<a href="#runentry">runentry( )</a> , 
<a href="#runview">runview( )</a> , 
<a href="#entrydialog">entrydialog( )</a> , and 
<a href="#viewdialog">viewdialog( )</a>  functions.
</p>

<h3>Return Value:</h3>
<p>
The path of the desired .INI file if it is available. A blank string if the path is not available.  
The paths are ultimately based on the ones found in the PCSD.INI file.
</p>

<h3>See Also:</h3>
<p>
<a href="#runentry">runentry( )</a> , <br/>
<a href="#runview">runview( )</a> , <br/>
<a href="#entrydialog">entrydialog( )</a> , <br/>
<a href="#viewdialog">viewdialog( )</a> <br/>
<a href="#ExpandPath">ExpandPath( )</a> , <br/>
<a href="evini.html#Introduction"> View and Entry .INI files reference.  </a><br/>
</p>

<p>
<a rel="up" href="#F"> ^ --F-- </a>
</p>

<!-- ================================= -->
<hr/><a name="FlagDialog"></a> <h2>FlagDialog</h2> 


<h3>Function Name: FlagDialog( ) -- RCONN 16 NCONN 32c</h3>
<h3>Synopsis:</h3>
<pre><em>state</em><b> = FlagDialog(</b><em>OKflag</em><b>, </b><em>changeflag</em><b>);</b></pre>

<h3>Description:</h3>
<p>This function sets values to the internal OK and Change flags as these are reported by 
the <a href="#dialogOK">dialogOK( )</a> or <a href="#dialogchange">dialogchange( )</a>  functions.
These flags are used internally in Status Dialog select control Callback functions, where 
the text of the control's data is changed only if the OK and Change flags both are set. 
Normally, this is done by the <a href="#selectdialog"> selectdialog...( )</a> functions, but in these cases where a 
simpler function such as <a href="#input">input( )</a>  is used, this flag needs to be set manually. This is 
done using the <b>FlagDialog( )</b> function.
</p>

<h3>Return Value:</h3>
<p>Value of the OK flag as set.
</p>

<h3>See Also:</h3>
<p><a href="#selectdialog"> selectdialog( )</a>, <br/>
<a href="#selectdialog"> selectdialoga( )</a>,<br/>
<a href="#selectdialog"> selectdialogb( )</a>, <br/>
<a href="#entrydialog"> entrydialog( )</a>, <br/>
<a href="#viewdialog"> viewdialog( )</a>,<br/>
<a href="#dialogOK"> dialogOK( )</a>, <br/>
<a href="#dialogchange"> dialogchange( )</a>,<br/>
<a href="#input"> input( )</a><br/>
</p>

<p>
<a rel="up" href="#F"> ^ --F-- </a>
</p>

<!-- ================================= -->
<hr/><a name="FlagsColFromX"></a> <h2>FlagsColFromX</h2>
<h3>Function Name: FlagsColFromX( ) -- PPVIEW 32 </h3>

<h3>Synopsis:</h3>

<h3>Description:</h3>

<h3>Availability:</h3>
<p>UNDER CONSTRUCTION
</p>

<h3>See Also:</h3>

<p>
<a rel="up" href="#F"> ^ --F-- </a>
</p>


<!-- ================================= -->
<hr/><a name="format"></a> <h2>format</h2> 

<h3>Function Name: format( ) -- LCX 16 LCX 32s LCX 32c LCX 64</h3>
<h3>Synopsis:</h3>
<pre><em>text</em><b> = format(</b><em>formatspec</em><b>, </b><em>value</em><b>);</b></pre>

<h3>Description:</h3>
<p>This formats a numeric value to other than standard decimal notation, according to the 
formatspec. The formatspec is a string of one of the forms:</p>
<p>
        0 width code<br/>
        - width code<br/>
        width code<br/>
        code</p>
<p>
0 width code: The value returned has leading zeros to fill out the width.<br/>

width code: The value returned has leading spaces to fill out the width.<br/>

- width code: The value returned has trailing spaces to fill out the width.</p>
<p>
code: This character determines how the value is formatted:<br/>
        d -- Signed Decimal notation<br/>
        o -- octal notation<br/>
        x -- hexadecimal notation, using a--f<br/>
        X -- hexadecimal notation, using A--F</p>
<p>
Some examples of these are shown. The call is <br/>
<b> format(formatspec, 153);</b></p>

<p>
Then for various values of formatspec the following holds:</p>
<p>
        d -- Normal decimal format: 153<br/>
        05d -- Two digits decimal, with leading zeros: 00153<br/>
        4d -- Four positions decimal, with spaces: ` 153`<br/>
        -6u -- Six positions, left-justified: `153   `<br/>
        04X -- 4-digit hexadecimal: 0099</p>

<h3>Return Value:</h3>
<p>The formatted text of the argument. Non-numeric input is treated as if it were zero: the 
value 0 comes out properly formatted.</p>

<h3>See Also:</h3>
<p>
<a href="#concat"> concat( ) </a>, <br/>
reference to the printf( ) family of C functions<br/>
</p>

<p>
<a rel="up" href="#F"> ^ --F-- </a>
</p>

<!-- ================================= -->
<hr/><a name="FormDecimal"></a> <h2>FormDecimal</h2>
<h3>Function Name: FormDecimal( ) -- LCX 16 LCX 32s LCX 32c LCX 64 </h3>

<h3>Synopsis:</h3>
<pre><em>text</em><b> = FormDecimal(</b><em>value</em><b>, </b><em>ndec</em><b>, </b><em>dpoint</em><b>);</b></pre>

<h3>Description:</h3>
<p>This function takes a larger integer and forms a decimal string
corresponding to <em>value / 10^ndec</em>. </p>

<p>As an example, if 
the value is in millimeters, 
<b>FormDecimal(</b><em>value</em><b>, 3, ".")</b> would return the
corresponding number of meters. </p>

<p>The function 
<a href="#DecimalToInt">DecimalToInt( )</a> 
provides the opposite function, making an integer of a certain power
of 10 of some value.</p>

<h3>See Also:</h3>
<p>
<a href="#DecimalToInt">DecimalToInt( )</a>, <br/>
<a href="#CalcPerc">CalcPerc( )</a> <br/>
</p>

<p>
<a rel="up" href="#F"> ^ --F-- </a>
</p>


<!-- ================================= -->
<!-- G -->

<hr/><a name="G"></a><h2>--G--</h2>
<p>
<a href="#get">get( )</a>,<br/>
<a href="#getany">getany( )</a>,<br/>
<a href="#getfilepath">getfilepath( )</a>,<br/>
<a href="#getfilext">getfilext( )</a>,<br/>
<a href="#getfilename">getfilename( )</a>,<br/>
<a href="#getinistring">getinistring( )</a>,<br/>
<a href="#GetPath">GetPath( )</a>,<br/>
<a href="#GetScreen">GetScreen( )</a> ,<br/>
<a href="#GlobalClear">GlobalClear( )</a>,<br/>
<a href="#GlobalDefine">GlobalDefine( )</a> ,<br/>
<a href="#GlobalFind">GlobalFind( )</a> ,<br/>
<a href="#GlobalList">GlobalList( )</a> ,<br/>
<a href="#GrandReport">GrandReport( )</a> ,<br/>
<a href="#GRControl">GRControl( )</a> ,<br/>
<a href="#GSQLDF">GSQLDF( )</a> ,<br/>
<a href="#GrowHistory">GrowHistory( )</a><br/>
</p>
<p>
<a rel="up" href="#Functions.20Reference"> ^ Functions Reference </a> 
<a rel="previous" href="#F"> &lt; --F-- </a>
<a rel="next" href="#H"> &gt; --H-- </a>
</p>

<!-- ================================= -->
<hr/><a name="get"></a> <h2>get</h2> 

<h3>Function Name: get( ) -- RCONN 16 NCONN 32c TMGT 32s TMGT 64s</h3>
<h3>Function Name: extract( ) -- RCONN 16 NCONN 32c</h3>
<h3>Synopsis:</h3>
<pre><em>item</em><b> = get(</b><em>table</em><b>, </b><em>field</em><b>);</b></pre> 
<pre><em>item</em><b> = extract(</b><em>table</em><b>, </b><em>field</em><b>);</b></pre> 

<h3>Description:</h3>
<p><b>get( )</b> and <b>extract( )</b> are two names for the same function. 
The value of the named field <em>field</em> in the current record 
of the named table <em>table</em> is copied and returned.
</p>

<h3>Expensive Function warning</h3>

<p>On the client side of the 32-bit systems, the use of 
a single or a few calls to <a href="#multiget">multiget( )</a> 
is preferrable to many calls to <b>get( )</b> since 
the action has to take place across the network, and a lot
of calls to <b>get( )</b> is more expensive than fewer calls to
<a href="#multiget">multiget( )</a>.
</p>

<p>On the server-side, the <b>get( )</b> 
function is inexpensive, so network load is no problem here. 
</p>

<h3>Return Value:</h3>
<p>The value of the field in the current record of the named table.  </p>

<h3>See Also:</h3>
<p>
<a href="#put">put( ) </a>,<br/>
<a href="#getany">getany( ) </a>,<br/>
<a href="#multiget">multiget( )</a> <br/>
</p>

<p>
<a rel="up" href="#G"> ^ --G-- </a>
</p>

<!-- ================================= -->
<hr/><a name="getany"></a> <h2>getany</h2> 

<h3>Function Name: getany( ) -- RCONN 16 NCONN 32c TMGT 64s</h3>
<h3>Synopsis:</h3>
<pre><em>item</em><b> = getany(</b><em>table</em><b>, </b><em>field</em><b>, </b><em>default</em><b>);</b></pre> 

<h3>Description:</h3>
<p><b>getany( )</b>, like <a href="#get">get( ) </a> , takes the value of a field <em>field</em> in the current record 
of the named table <em>table</em> and returs it, if the field exists. Whereas <a href="#get">get( ) </a>
fails with an error, <b>getany( )</b> returns the specified <em>default</em> value instead. </p>

<h3>Return Value:</h3>
<p>The value of the field in the current record of the named table, or the default, if there was any error.</p>

<h3>See Also:</h3>
<p><a href="#put">put( ) </a><br/>
<a href="#get">get( ) </a><br/>
</p>

<p>
<a rel="up" href="#G"> ^ --G-- </a>
</p>

<!-- ================================= -->
<hr/><a name="getfilename"></a> <h2>getfilename</h2>
<h3>Function Name: getfilename( ) -- LCX 16 LCX 32s LCX 32c LCX 64</h3>
<h3>Synopsis</h3>
<pre><em>name</em><b> = getfilename(</b><em>fullname</em><b>);</b></pre>
<h3>Description</h3>
The <b>getfilename()</b>function takes the full filepath and returns the file-name part.

<p>
<a rel="up" href="#G"> ^ --G-- </a>
</p>

<a name="getfilenameexample"></a> <h3>Example</h3>

<pre>
main( )
{
    string ex, n0, p0, name;
    name = "C:\WINPCS\HELLO.LCX";

    ex = getfilext(name,  "ABC");
    n0 = getfilename(name);
    p0 = getfilepath(name);
    message(name, "Ex = ", ex,
        " N0 = ", n0, " P0 = ", p0);
    
    return(0);
}
</pre>

<h3>See Also:</h3>
<p>
<a href="#concat">concat( )</a> , <br/>
<a href="#substr">substr( )</a> , <br/>
<a href="#strstr">strstr( )</a> , <br/>
<a href="#strchr">strchr( )</a> , <br/>
<a href="#strrchr">strrchr( )</a> , <br/>
<a href="#getpath">getpath( )</a> , <br/>
<a href="#ExpandPath">ExpandPath( )</a> , <br/>
<a href="#ReducePath">ReducePath( )</a> ,<br/>
<a href="#getfilepath">getfilepath( )</a>,<br/>
<a href="#getfileext">getfileext( )</a><br/>
</p>

<p>
<a rel="up" href="#G"> ^ --G-- </a>
</p>

<!-- ================================= -->
<hr/><a name="getfilepath"></a> <h2>getfilepath</h2>
<h3>Function Name: getfilepath( ) -- LCX 16 LCX 32s LCX 32c LCX 64</h3>

<h3>Synopsis</h3>
<pre><em>path</em><b> = getfilepath(</b><em>fullname</em><b>);</b></pre>

<h3>Description</h3>
<p>The <b>getfilepath()</b>function takes the full filepath and returns the directory path to the file.
See the <a href="#getfilenameexample">example</a> in the entry for <a href="#getfilename">getfilename( )</a></p>

<h3>See Also:</h3>
<p>
<a href="#concat">concat( )</a> , <br/>
<a href="#substr">substr( )</a> , <br/>
<a href="#strstr">strstr( )</a> , <br/>
<a href="#strchr">strchr( )</a> , <br/>
<a href="#strrchr">strrchr( )</a> , <br/>
<a href="#getpath">getpath( )</a> , <br/>
<a href="#ExpandPath">ExpandPath( )</a> , <br/>
<a href="#ReducePath">ReducePath( )</a> ,<br/>
<a href="#getfilename">getfilename( )</a>,<br/>
<a href="#getfileext">getfileext( )</a><br/>
</p>

<p>
<a rel="up" href="#G"> ^ --G-- </a>
</p>

<!-- ================================= -->
<hr/><a name="getfilext"></a> <h2>getfilext</h2>
<h3>Function Name: getfilext( ) -- LCX 16 LCX 32s LCX 32c LCX 64</h3>

<h3>Synopsis</h3>
<pre><em>extension</em><b> = getfilext(</b><em>fullname</em><b>,</b><em>default_extension</em><b>);</b></pre>

<h3>Description</h3>
<p>The <b>getfilepath()</b>function takes the full filepath and returns the extension of the file.
See the <a href="#getfilenameexample">example</a> in the entry for <a href="#getfilename">getfilename( )</a></p>

<h3>See Also:</h3>
<p>
<a href="#concat">concat( )</a> , <br/>
<a href="#substr">substr( )</a> , <br/>
<a href="#strstr">strstr( )</a> , <br/>
<a href="#strchr">strchr( )</a> , <br/>
<a href="#strrchr">strrchr( )</a> , <br/>
<a href="#getpath">getpath( )</a> , <br/>
<a href="#ExpandPath">ExpandPath( )</a> , <br/>
<a href="#ReducePath">ReducePath( )</a> ,<br/>
<a href="#getfilepath">getfilepath( )</a>,<br/>
<a href="#getfilename">getfilename( )</a><br/>
</p>

<p>
<a rel="up" href="#G"> ^ --G-- </a>
</p>

<!-- ================================= -->
<hr/><a name="getinistring"></a> <h2>getinistring</h2>

<h3>Function Name: getinistring( ) -- RCONN 16 NCONN 32c TMGT 32s TMGT 64s</h3>
<h3>Synopsis:</h3>
<pre><em>string</em><b> = getinistring(</b><em>filename</em><b>, </b><em>section</em><b>, </b><em>entry</em><b>);</b></pre>

<h3>Description and return value:</h3>
<p>This finds and returns a value of an entry in a section in some .INI file.  If this is not 
found, a blank value is returned. The filename may contain numerical drive references, 
which will be expanded as per the 
<a href="#ExpandPath">ExpandPath( )</a> function before looking at the file.</p>

<p>Note that there is a way for the client program to look at INI files for the server, the function for
doing this is <a href="#serverinistring">serverinistring( )</a>,
or for stadlg.ini, the optimized variant <a href="#stadlginistring">stadlginistring( )</a>.</p>

<h3>Example</h3>
<p>The WinPCS.INI has a section [RCONN] in it with some miscellaneous information, as shown here:</p>
<pre>
[RCONN]
HIERWIDTH=60
</pre>
<p>In order to read the value of the entry HIERWIDTH we use <br/>
<b>hwidth = getinistring("0:\winpcs.ini", "rconn", "hierwidth");</b><br/>
and will get the variable <b>hwidth</b> set to the <b>60</b> found in the ini file. 
Note that the file, section, and entry names are not case-sensitive. </p>

<h3>See Also:</h3>
<p>
<a href="#stadlginistring">stadlginistring( )</a> <br/>
<a href="#stadlginientries">stadlginientries( )</a> <br/>
<a href="#serverinistring">serverinistring( )</a> <br/>
<a href="#sysdir">sysdir( )</a>,<br/>
<a href="#Text.20File.20reading.20functions"> Text File reading functions </a>, <br/>
<a href="#GetPath">GetPath( )</a>,<br/>
<a href="#ExpandPath">ExpandPath( )</a><br/>
</p>
<p>
<a rel="up" href="#G"> ^ --G-- </a>
</p>

<!-- ================================= -->
<hr/><a name="GetPath"></a> <h2>GetPath</h2>
<h3>Function Name: GetPath( ) RCONN 16 NCONN 32c</h3>
<h3>Synopsis: </h3>
<pre><em>path</em><b> = GetPath(</b><em>key</em><b>, </b><em>usebs</em><b>);</b></pre>

<h3>Description:</h3>
<p><b>GetPath( )</b> looks up a key in the [PATHS] section in WinPCS.INI and returns the right 
hand side. This is approximately equivalent to 
<em>path</em><b> = ExpandPath(getinistring ("0:\WINPCS.INI", "PATHS", </b><em>key</em><b>))</b>
but with the flag <em>usebs</em> determining whether the final backslash is to be included or not. 
When this is <b>0</b> the backslash is omitted, when this is <b>1</b> the backslash is included. </p>

<h3>Example:</h3>
<p>With the [PATHS] section of WinPCS.INI as shown and the drive <b>9:</b> being <b>G:\WINPCS</b>:</p>

<pre>
[PATHS]
ITRFORMS=9:\FORMS
BLANK_FTC=9:\COMMPROC\BLANKFTC
</pre> 

<p>The statement <br/>
<b>GetPath("ITRFORMS", 1)</b><br/>
becomes <b>G:\WINPCS\FORMS\</b></p>

<p>The statement <br/>
<b>GetPath("BLANKFTC", 0)</b><br/>
becomes <b>G:\WINPCS\COMMPROC\BLANKFTC</b></p>

<h3>See Also:</h3>
<p>
<a href="#sysdir">sysdir( )</a>,<br/>
<a href="#ExpandPath">ExpandPath( )</a>,<br/>
<a href="#getinistring">getinistring( )</a>,<br/>
<a href="#serverinistring">serverinistring( )</a> <br/>
<a href="#stadlginistring">stadlginistring( )</a> <br/>
</p>

<p>
<a rel="up" href="#G"> ^ --G-- </a>
</p>

<!-- ================================= -->
<hr/><a name="GetScreen"></a><h2>GetScreen</h2>
<h3>Function Name: GetScreen( ) -- EVIEW 32c </h3>

<h3>Synopsis:</h3>
<pre><em>value</em><b> = GetScreen(</b><em>fieldname</em><b>);</b></pre>

<h3>Description:</h3>
<p>This function reads the value of the referenced field off 
the screen of an Entry or a View during the info or validation 
phases of LCXMACRO fields. The fieldnames are the ones in the table,
not the ones displayed as legends.  The values returned is whatever
is visible in the window, not the most recent values from the table or
other data source -- these may be different and are available through
the <a href="#InValue">InValue( )</a> function. </p>

<h3>Availability:</h3>
<p>Only available in a $LCXMACRO() field-validation function. </p>

<h3>See Also:</h3>
<p>
<a href="#InValue">InValue( )</a>,<br/>
<a href="#PutScreen">PutScreen( )</a> <br/><br/>
<a href="call3206.html"> View, Entry, and Report Pushbuttons </a>. <br/>
</p>

<p>
<a rel="up" href="#G"> ^ --G-- </a>
</p>

<!-- ================================= -->
<hr/><a name="GlobalClear"></a> <h2>GlobalClear</h2>
<h3>Function Name: GlobalClear( ) -- NCONN 32c TMGT 32s</h3>

<h3>Synopsis:</h3>
<pre><b>GlobalClear(</b><em>name</em><b>);</b></pre>

<h3>Description:</h3>
<p>This function removes a global named value identified with <em>name</em>.
If the reference is to a report-data element, this must be retrieved using 
<a href="#GlobalFind">GlobalFind( )</a> and deallocated using
<a href="#RepClose">RepClose( )</a> prior to removing the named value,
lest there is a memory leak.</p>

<h3>See Also:</h3>
<p>
<a href="#GlobalDefine">GlobalDefine( )</a> ,<br/>
<a href="#GlobalFind">GlobalFind( )</a> ,<br/>
<a href="#GlobalList">GlobalList( )</a> ,<br/>
<a href="#RepClose">RepClose( )</a> <br/>
</p>

<p>
<a rel="up" href="#G"> ^ --G-- </a>
</p>

<!-- ================================= -->
<hr/><a name="GlobalDefine"></a> <h2>GlobalDefine</h2>
<h3>Function Name: GlobalDefine( ) -- NCONN 32c TMGT 32s</h3>

<h3>Synopsis:</h3>
<pre><b>GlobalDefine(</b><em>name</em><b>, </b><em>value</em><b>);</b></pre>

<h3>Description:</h3>
<p>This function defines a global named value identified with <em>name</em> and having the
desired value <em>value</em>. These global values last past the end of the
current execution environment until WinPCS exits or they are removed with 
<a href="#GlobalClear">GlobalClear( )</a> 
or redefined with another call to <b>GlobalDefine( )</b></p>

<h3>See Also:</h3>
<p>
<a href="#GlobalClear">GlobalClear( )</a> ,<br/>
<a href="#GlobalFind">GlobalFind( )</a> ,<br/>
<a href="#GlobalList">GlobalList( )</a> <br/>
</p>

<p>
<a rel="up" href="#G"> ^ --G-- </a>
</p>

<!-- ================================= -->
<hr/><a name="GlobalFind"></a> <h2>GlobalFind</h2>
<h3>Function Name: GlobalFind( ) -- NCONN 32c TMGT 32s</h3>

<h3>Synopsis:</h3>
<pre><em> value </em><b> = GlobalFind(</b><em>name</em><b>);</b></pre>

<h3>Description:</h3>
<p>This function looks for a global named value identified with <em>name</em>,
and returns it if it was found. If not found, the function will return a blank.
These global named values will be the ones defined in this or an earlier
execution environment.
</p>

<h3>See Also:</h3>
<p>
<a href="#GlobalClear">GlobalClear( )</a> ,<br/>
<a href="#GlobalDefine">GlobalDefine( )</a> ,<br/>
<a href="#GlobalList">GlobalList( )</a> <br/>
</p>

<p>
<a rel="up" href="#G"> ^ --G-- </a>
</p>
<!-- ================================= -->
<hr/><a name="GlobalList"></a> <h2>GlobalList</h2>
<h3>Function Name: GlobalList( ) -- NCONN 32c TMGT 32s</h3>

<h3>Synopsis:</h3>
<pre><em>listset</em><b> = GlobalList( );</b></pre>

<h3>Description:</h3>
<p>This function returns the names of all known and active global named values, in 
a set form. The values of these can be examined using the
<a href="#GlobalFind">GlobalFind( )</a> function. </p>

<h3>See Also:</h3>
<p>
<a href="#GlobalClear">GlobalClear( )</a> ,<br/>
<a href="#GlobalDefine">GlobalDefine( )</a> ,<br/>
<a href="#GlobalFind">GlobalFind( )</a> ,<br/>
<a href="#setitem">setitem( )</a> ,<br/>
<a href="#setlen">setlen( )</a> <br/>
</p>

<p>
<a rel="up" href="#G"> ^ --G-- </a>
</p>
<!-- ================================= -->
<a href="#GrandReport">GrandReport( )</a> 
<hr/><a name="GrandReport"></a> <h2>GrandReport</h2>
<h3>Function Name: GrandReport( ) -- TMGT 32s NCONN 32c </h3>

<h3>Synopsis:</h3>
<pre>
<em>returned</em><b> = GrandReport(</b><em>command</em><b>, </b><em>parameter</em><b>, ...);</b>

<em>nameset</em><b> = GrandReport("GrandRepList");</b>
<em>status</em><b> = GrandReport("GrandRepMainRefresh", </b><em>reportname</em><b>);</b>
<em>status</em><b> = GrandReport("GrandRepMainRefreshNeeded", </b><em>reportname</em><b>);</b>
<em>status</em><b> = GrandReport("GrandRepMainClear", </b><em>reportname</em><b>);</b>
<em>infoset</em><b> = GrandReport("CacheStatus", </b><em>reportname</em><b>);</b>
<em>infoset</em><b> = GrandReport("CarrierInfo", </b><em>reportname</em><b>);</b>

<b>reportinfoset = GrandReport("GetData", </b><em>reportname</em><b>);</b>
<em>report</em><b> = setitem(reportinfoset, 0);</b>
<em>info</em><b> = setitem(reportinfoset, 1);</b>

<em>reportname</em><b> = GrandReport("Ident", </b><em>treelinelist</em><b>);</b>

<em>path</em><b> = GrandReport("UsedFile");</b>
</pre>


<h3>Description:</h3>
<p>This function is used to control, cache, and read the Grand Reports. 
The first argument indicates one of several actions, and returned values vary
with these. </p>

<h4>GrandRepList</h4>
<p>This returns a list of defined Grand Reports as a set. Use
<a href="#setlen">setlen( )</a> and <a href="#setitem">setitem( )</a> 
to pull the names out from the set.</p>

<h4>GrandRepMainRefresh</h4>
<p>This causes the cache for the named Grand Report to be established
or re-established. 
The return value is an informational string indicating
success or failure. </p>

<h4>GrandRepMainRefreshNeeded</h4>
<p>This indicates the status of the cache for the named Grand Report,
whether it needs to be refreshed.</p>

<h4>GrandRepMainClear</h4>
<p>This causes the cache for the named Grand Report to be cleared.
The cache will be re-built next time a client wants to run the associated
report, or from a command in the control dialog there, or next time the
function 
<b>GrandReport("GrandRepMainRefresh", </b><em>reportname</em><b>);</b>
is called. </p>
<p>The return value is an informational string indicating
success or failure. </p>

<h4>CacheStatus</h4>
<p>This returns a 2-part set indicating the status of caching of
the grand report. The first element of this is a number that indicates
this: 0=no cache, 1=cache present and ok, 2=cache present and outdated,
3=cache is empty. The second element is a string describing the status.</p>

<h4>CarrierInfo</h4>
<em>infoset</em><b> = GrandReport("CarrierInfo", </b><em>reportname</em><b>);</b>

<h4>GetData</h4>
<em>reportinfoset</em><b> = GrandReport("GetData", </b><em>reportname</em><b>);</b>
<p>Returns a 2-part set indicating the data. The first element is a report
handle number referring to the data in the report. The second element is a
status string. </p>

<h4>Ident</h4>
<em>reportname</em><b> = GrandReport("Ident", </b><em>treelinelist</em><b>);</b>

<h4>UsedFile</h4>
<em>path</em><b> = GrandReport("UsedFile");</b>
<p>Returns the pathname of the file that is the one to be used with reading the
grand report data tables.</p>

<h3>See Also:</h3> 
<p>
<a href="#setlen">setlen( )</a> <br/>
<a href="#setitem">setitem( )</a> <br/>
<a href="#makeset">makeset( )</a> <br/>
</p>

<p>
<a rel="up" href="#G"> ^ --G-- </a>
</p>

<!-- ================================= -->
<hr/><a name="GRControl"></a><h2>GRControl</h2>

<a href="#GRControl">GRControl( )</a> 
<h3>Function Name: GRControl( ) -- TMGT 32s</h3>

<h3>Synopsis:</h3>
<pre><b>GRControl(</b><em>command</em><b>,</b><em>parameters</em><b>, ...);</b></pre>

<h3>Description:</h3>
<p>UNDER CONSTRUCTION</p>

<h3>Return Value:</h3>
<p>UNDER CONSTRUCTION</p>

<h3>See Also:</h3>
<p>
<a href="#example">example( )</a> <br/>
</p>

<p>
<a rel="up" href="#G"> ^ --G-- </a>
</p>


<!-- ================================= -->
<hr/><a name="GSQLDF"></a><h2>GSQLDF</h2>

<a href="#GSQLDF">GSQLDF( )</a> 
<h3>Function Name: GSQLDF( ) -- TMGT 32s</h3>

<h3>Synopsis:</h3>
<pre><b>GSQLDF(</b><em>filelist</em><b>,</b><em>omitset</em><b>);</b></pre>
<pre><b>GSQLDF(</b><em>filelist</em><b>);</b></pre>

<h3>Description:</h3>
<p>Generates a set of SQLite equivalent files for the system. The tables are 
organized in several database files, and there is an option for listing
which of these are to be generated, unless we want all of them. </p>
<p>Certain tables in the project set may be of no interest, list their
names in the omitset. </p>

<p>Wildcard characters such as * and ? may be used in the elements in the omitset
to exclude certain name-series of tables, for example, "Z*" will exclude all tables
beginning with Z.</p>


<h3>Example:</h3>
<p>This is from the periodic job functions, in a project where a table
named PIPEPROP and the ones whose names begin with Z are not of interest.</p>
<pre>
ProduceSQLfiles()
{
    GSQLDF("*", makeset("PIPEPROP", "Z*" ));  
    return(0);
}
</pre>

<h3>See Also:</h3>
<p>
<a href="#makeset">makeset( )</a> 
</p>


<p>
<a rel="up" href="#G"> ^ --G-- </a>
</p>


<!-- ================================= -->
<hr/><a name="GrowHistory"></a> <h2>GrowHistory</h2>
<h3>Function Name: GrowHistory( ) -- NCONN 32c TMGT 32s TMGT 64s</h3>

<h3>Synopsis:</h3>
<pre><b>GrowHistory(</b><em>maintable</em><b>, </b><em>historytable</em><b>, </b><em>copyfieldset</em><b>, </b><em>addlfieldset</em><b>, </b><em>addlvalueset</em><b>);</b></pre>

<h3>Description:</h3>
<p>This function allows for easy production of history tables. 
We have a main table <em>maintable</em> and a history table
<em>historytable</em>
which mirrors the main table's fields, but may have other fields
in addition.  Each call to this function causes the specified fields,
the <em>copyfieldset</em>
from the current record in the <em>maintable</em> to be copied 
to the history-table, in addition 
some further fields may be written in the history-table, these are the
<em>addlfieldset</em> with corresponding values <em>addlvalueset</em>. </p>

<p>The effect of this function is roughly equivalent to the following code:</p>
<pre>
        clear(historytable);
        for(j = 0; j &lt; setlen(copyfieldset); j+=1)
        {
            put(historytable, setitem(copyfieldset, j), 
                get(maintable, setitem(copyfieldset, j) ));
        }
        for(j = 0; j &lt; setlen(addlfieldset); j+=1)
        {
            put(historytable, setitem(addlfieldset, j), setitem(addlvalueset, j) );
        }
        insert(historytable);
</pre>
<p> but this is all bunched into the server, so on the client
side there is only the one RPC call, saving a lot 
of network bandwith and time.  If the number of items in the two sets
<em>addlfieldset</em> and <em>addlvalueset</em> 
are different, only the lowest number of fields will be written. </p>

<p>The fields listed in <em>copyfieldset</em> must exist in both tables, 
although their order, size, and data types can be different.</p>

<h3>Return Value</h3>
<p>The function returns <b>0</b> meaning OK; any positive values 
indicate insertion-errors, and any negative values indicate 
server-access errors or data specification errors.</p>

<h3>See Also:</h3> 
<p>
<a href="#makeset">makeset( )</a> <br/> <br/>
</p>

<p>
<a rel="up" href="#G"> ^ --G-- </a>
</p>

<!-- ================================= -->
<!-- H -->

<hr/><a name="H"></a><h2>--H--</h2>
<p>
<a href="#HCDetectAlias">HCDetectAlias( )</a> <br/>
<a href="#HCDetectControlTag">HCDetectControlTag( )</a> <br/>
<a href="#HCReplaceAlias">HCReplaceAlias( )</a> <br/>
<a href="#Height">Height( )</a><br/>
<a href="#hierstatus">hierstatus( )</a><br/>
<a href="#HierService">HierService( )</a> <br/>
<a href="#Hline">Hline( )</a><br/>
<a href="#HTMLCertCmd">HTMLCertCmd( )</a> <br/>
</p>
<p>
<a rel="up" href="#Functions.20Reference"> ^ Functions Reference </a> 
<a rel="previous" href="#G"> &lt; --G-- </a>
<a rel="next" href="#I"> &gt; --I-- </a>
</p>

<!-- ================================= -->
<hr/><a name="HCDetectAlias"></a> <h2>HCDetectAlias</h2>
<h3>Function name: HCDetectAlias( ) -- NCONN 32c</h3>
<h3>Synopsis:</h3>

<pre>
<b>string sett;</b>
<b>sett = HTMLDetectAlias(</b><em>datastring</em><b>);</b>
<em>aliasname</em><b> = setitem (sett, 0);</b>
<em>function</em><b> = setitem (sett, 1);</b>
</pre>

<h3>Description:</h3>
<p>This function takes a html definition string, from 
<a href="#HTMLCertCmd">HTMLCertCmd("TableReadRow" )</a> 
 and returns the alias-name
and function associated with the control. </p>

<h3>Return Value:</h3>
<p>The return value is a two-part set, where the first element is the alias
name, and the second is the name of the function that is set to be called
when the element in HTMLCert has the value changed.</p>

<h3>Availability:</h3>
<p>Mostly useful with HTMLCert running, but the function itself does just 
text-processing, so it will independent of HTMLCert.  </p>

<h3>See Also:</h3>
<a href="#setitem">setitem( )</a> <br/>,
<a href="#HTMLCertCmd">HTMLCertCmd( )</a> <br/>,
<a href="#HCDetectControlTag">HCDetectControlTag( )</a> <br/>,
<a href="#HCReplaceAlias">HCReplaceAlias( )</a> <br/>

<p> <a rel="up" href="#H"> ^ --H-- </a> </p>
<!-- ================================= -->
<hr/><a name="HCDetectControlTag"></a> <h2>HCDetectControlTag</h2>
<h3>Function name: HCDetectControlTag( ) -- NCONN 32c</h3>
<h3>Synopsis:</h3>

<h3>Description:</h3>
<h3>Return Value:</h3>
<h3>Availability:</h3>
<p>Mostly useful with HTMLCert running, but the function itself does just 
text-processing, so it will work whether or not HTMLCert is running.  </p>

<h3>See Also:</h3>
<a href="#HTMLCertCmd">HTMLCertCmd( )</a> <br/>,
<a href="#HCDetectAlias">HCDetectAlias( )</a> <br/>,
<a href="#HCReplaceAlias">HCReplaceAlias( )</a> <br/>
<p> <a rel="up" href="#H"> ^ --H-- </a> </p>

<!-- ================================= -->
<hr/><a name="HCReplaceAlias"></a> <h2>HCReplaceAlias</h2>
<h3>Function name: HCReplaceAlias( ) -- NCONN 32c</h3>

<h3>Synopsis:</h3>
<h3>Description:</h3>
<h3>Return Value:</h3>

<h3>Availability:</h3>
<p>Mostly useful with HTMLCert running, but the function itself does just 
text-processing, so it will work whether or not HTMLCert is running.  </p>

<h3>See Also:</h3>
<a href="#HTMLCertCmd">HTMLCertCmd( )</a> <br/>,
<a href="#HCDetectAlias">HCDetectAlias( )</a> <br/>,
<a href="#HCDetectControlTag">HCDetectControlTag( )</a> <br/>,
<p> <a rel="up" href="#H"> ^ --H-- </a> </p>





<!-- ================================= -->
<hr/><a name="Height"></a> <h2>Height</h2>

<h3>Function Name: Height( ) -- PPVIEW 16 PPVIEW 32</h3>
<h3>Synopsis:</h3>
<pre><em>value</em><b> = Height( );</b></pre>

<h3>Description:</h3>
<p>
The <b>Height( )</b> function gives the height of the paper in 1/10mm units.  This is dependent 
on the Portrait/Landscape printer setting, and on the actual paper size selected. </p>

<h3>Return Value:</h3>
<p>
The returned value is the height of the paper in 1/10mm units.  This is always a positive 
number. </p>

<h3>Availability:</h3>
<p>
Only available in a printing function.</p>

<h3>See Also:</h3>
<p>
<a href="#unicert">unicert( )</a>,<br/>
<a href="#Width">Width( ) </a><br/>
</p>

<p>
<a rel="up" href="#H"> ^ --H-- </a>
</p>


<!-- ================================= -->
<hr/><a name="hierstatus"></a> <h2>hierstatus</h2>

<h3>Function Name: hierstatus( ) -- RCONN 16</h3>
<h3>Synopsis:</h3>
<pre><em>value</em><b> = hierstatus(</b><em>old</em><b>,</b><em> current</em><b>, </b><em>index</em><b>);</b></pre>

<h3>Description:</h3>
<p>Hierarchical status value calculation. The old or new status is used as follows:</p>
<p>
0 = Copy new status across<br/>
1 = Return highest numeric value of old and new status.<br/>
2 = Return sum of old and new<br/>
3 = 3-state status according to the following matrix:</p>
<pre>
        Old  |New:-1 0 1 2 3 Other 
        =================================
          -1 |    -1 0 1 2 3   0
          0  |     0 0 1 1 0   0
          1  |     1 1 1 1 1   1
          2  |     2 1 1 2 1   1
          3  |     3 0 1 1 3   0
        Other|     0 0 1 1 0   0
</pre>
<p>The internal table is declared as:</p>
<pre>
int AAtable3[5][5] = 
{ { -1, 0, 1, 2, 3},
{  0, 0, 1, 1, 0},
{  1, 1, 1, 1, 1},
{  2, 1, 1, 2, 1},
{  3, 0, 1, 1, 3} 
};

4 = 4-state status according to the following matrix:

        Old: | New:  0 1 2 3 Other     
        =================================
         -1  |       0 1 2 3   0
          0  |       0 1 2 0   0
          1  |       1 1 1 1   1
          2  |       2 1 2 2   2
          3  |       0 1 2 3   0
        Other|       0 1 2 0   0



The internal table is declared as:

int AAtable4[6][5] = 
{  {0,1,2,3,0},
{0,1,2,0,0},
{1,1,1,1,1},
{2,1,2,2,2},
{0,1,2,3,0},
{0,1,2,0,0} 
};

</pre>
<p>5 = 4-state and 3-state dual status.</p>

<p>
All other values are reserved for future use. Avoid using these for now.</p>

<h3>Return Value:</h3>
<p>New or old status or a combination thereof according to the value of the index 
argument. </p>

<h3>Availability:</h3>
<p>This function is obsolescent.  </p>

<h3>See Also:</h3>
<p>STADLG.INI, ADD= entries. Function category 2. <br/>
</p>


<p>
<a rel="up" href="#H"> ^ --H-- </a>
</p>

<!-- ================================= -->
<hr/><a name="HierService"></a><h2>HierService</h2>

<a href="#HierService">HierService( )</a> 
<h3>Function Name: HierService( ) -- TMGT 32s</h3>

<h3>Synopsis:</h3>
<pre><em>report</em><b> = HierService(</b><em>action</em><b>,</b><em>...</em><b>);</b></pre>

<pre><em>report</em><b> = HierService("Fill",</b><em>table</em><b>, "*");</b></pre>
<pre><em>report</em><b> = HierService("Fill",</b><em>table</em><b>,</b><em>tag</em><b>,</b><em>Ancestors</em><b>);</b></pre>
<pre><em>report</em><b> = HierService("View",</b><em>table</em><b>,</b><em>tag</em><b>,</b><em>Ancestors</em><b>);</b></pre> 
<pre><em>report</em><b> = HierService("NextViewInfo",</b><em>table</em><b>,</b><em>action</em><b>,</b><em>keycount</em><b>,</b><em>keyfields</em><b>,</b><em>keyvalues</em><b>,</b><em>tag</em><b>);</b></pre> 

<h3>Description:</h3>
<p>This is used typically from webpages, in order to visualize
hierarchies there.  The table and tag refers to some
table and record whose connections or properties is to be displayed.</p>

<h3>Return Value:</h3>
<p>The returned value is a report-data set, which contains the
list of strings that are to be shown.</p>

<h4>Top level</h4>
<pre><em>report</em><b> = HierService("Fill",</b><em>table</em><b>, "*");</b></pre>
<p>This returns the data to be displayed in the top of the hierarchy from the table indicated.</p>

<p>The 9 fields in the returned <tt><em>report</em></tt> for the <b>Fill</b> action are: </p>
<table>
<thead>
<tr><td><b>Field</b></td><td><b>Description</b></td></tr>
</thead>
<tbody>
<tr><td> Table </td><td>Name of the table where this object lives</td></tr>
<tr><td> Tag </td><td>Public identity of the object (itemfield) </td></tr>
<tr><td> Description </td><td>Descriptive string suitable for display. </td></tr>
<tr><td> Icon </td><td>Name of the icon for this object</td></tr>
<tr><td> Rserial </td><td>Record-number for the object</td></tr>
<tr><td> Number </td><td>Sequential number</td></tr>
<tr><td> Basedescr </td><td>CXDICT basedescr, description of the object's nature</td></tr>
<tr><td> Level </td><td>How deep down in the hierarchy we are</td></tr>
<tr><td> Linear </td><td>Storage for strings for checking the hiertop L: limitations</td></tr>
</tbody>
</table>

<h4>Subsequent level</h4>
<pre><em>report</em><b> = HierService("Fill",</b><em>table</em><b>,</b><em>tag</em><b>,</b><em>Ancestors</em><b>);</b></pre>
<p>This returns the data to be displayed in a level of the hierarchy below the top. The ingoing list
<tt><em>Ancestors</em></tt> corresponds to the objects already being shown further up in the hierarchy; this
is used to make sure ancestor items do not re-appear further down in the hierarchy, as well as suppress 
other objects as per the hiertop specs.</p>

<h4>View data</h4>
<pre><em>report</em><b> = HierService("View",</b><em>table</em><b>,</b><em>tag</em><b>,</b><em>Ancestors</em><b>);</b></pre> 
<p>This returns a list of field-names, icons, and data-values suitable for displaying the object
identified as the record <em>tag</em> in the <em>table</em>. <em>tag</em> is the public identifier string 
of the object, as per CXDICT ITEMFLD. </p>

<pre><em>report</em><b> = HierService("NextViewInfo",</b><em>table</em><b>,</b><em>action</em><b>,</b><em>keycount</em><b>,</b><em>keyfields</em><b>,</b><em>keyvalues</em><b>,</b><em>tag</em><b>);</b></pre> 
<p>This returns the record for the found value of the key-fields.</p>

<p>The 5 fields in the returned <tt><em>report</em></tt> for the <b>View</b> and <b>NextViewInfo</b> actions are: </p>
<table>
<thead>
<tr>
<td><b>Report-<br/>legend</b></td><td><b>Field</b></td><td><b>Description</b></td>
</tr>
</thead>
<tbody>
<tr><td>L</td><td> Legend </td><td>Visible legend of the field in the table, as per its View INI file.</td></tr>
<tr><td>P</td><td> Primary </td><td>Primary value of the field.</td></tr>
<tr><td>S</td><td> Secondary </td><td>Secondary value of the field. This is blank if there is no secondary value.</td></tr>
<tr><td>F</td><td> Flag </td><td><b>T</b>: Indicates that the secondary value is a string.<br/>
				<b>I</b>: Indicates that the secondary value is the name of an icon.</td></tr>
<tr><td>N</td><td> Fieldname </td><td>Actual fieldname in the table.</td></tr>
</tbody>
</table>

<p>The Report-legend letter shown is also what will become the element name
in javascript, when the report has become converted to JSON and then being
examined further there.</p>

<p>UNDER CONSTRUCTION</p>

<h3>See Also:</h3>
<p>
<a href="#RepToJSON">RepToJSON( )</a>  <br/>
<a href="#example">example( )</a> <br/>
</p>

<p>
<a rel="up" href="#H"> ^ --H-- </a>
</p>

<!-- ================================= -->
<hr/><a name="Hline"></a> <h2>Hline</h2>
<h3>Function Name: Hline( ) -- PPVIEW 16 PPVIEW 32</h3>
<h3>Synopsis:</h3>
<pre><b>Hline(</b><em>x1</em><b>, </b><em>x2</em><b>, </b><em>y</em><b>);</b></pre>
<pre><b>Hline(</b><em>x1</em><b>, </b><em>x2</em><b>, </b><em>y</em><b>, </b><em>weight</em><b>);</b></pre>
<pre><b>Hline(</b><em>x1</em><b>, </b><em>x2</em><b>, </b><em>y</em><b>, </b><em>weight</em><b>, </b><em>color</em><b>);</b></pre>

<h3>Description:</h3>
<p>The <b>Hline( )</b> function draws a horizontal line at a distance <em>y</em> from the Origin point of the 
paper, from a horizontal position <em>x1</em> to another horizontal position <em>x2</em>.  The <em>weight</em>
argument if present, gives a line of the specified thickness. Additionally, the color of the 
line may be specified by adding the fifth argument, <em>color</em>. </p>

<h3>Availability:</h3>
<p>Only available in a printing function.</p>

<h3>See Also:</h3>
<p>
<a href="#unicert">unicert( )</a>,<br/>
<a href="#Line">Line( )</a> , <br/>
<a href="#Vline">Vline( )</a> <br/>
<a href="#Origin">Origin( )</a> , <br/>
<a href="#Image">Image( )</a> , <br/>
</p>

<p>
<a rel="up" href="#H"> ^ --H-- </a>
</p>

<!-- ================================= -->
<hr/><a name="HTMLCertCmd"></a> <h2>HTMLCertCmd</h2>
<h3>Function name: HTMLCertCmd( ) -- NCONN 32c</h3>
<h3>Synopsis:</h3>
<pre>
<em>returnvalue</em><b> = HTMLCertCmd(</b><em>action</em><b>, </b><em>arguments</em><b>... );</b>
</pre>

<pre>
<em>returnedvalue</em><b> = HTMLCertCmd("Info", </b><em>alias</em><b>);</b>
<em>lockstate</em><b> = HTMLCertCmd("IsLocked", </b><em>alias</em><b>);</b>
<em>status</em><b> = HTMLCertCmd("DoLock", </b><em>alias</em><b>);</b>
<em>status</em><b> = HTMLCertCmd("DoLock", makeset(</b><em>alias</em><b>, </b><em>alias</em><b> ...));</b>
<em>status</em><b> = HTMLCertCmd("UnLock", </b><em>alias</em><b>);</b>
<em>status</em><b> = HTMLCertCmd("UnLock", makeset(</b><em>alias</em><b>, </b><em>alias</em><b> ...));</b>
<em>value</em><b> = HTMLCertCmd("Read", </b><em>alias</em><b>);</b>
<em>value</em><b> = HTMLCertCmd("MultiRead", makeset(</b><em>alias</em><b>, </b><em>alias</em><b> ...));</b>
<em>value</em><b> = HTMLCertCmd("Write", </b><em>alias</em><b>, </b><em>value</em><b>);</b>
<em>value</em><b> = HTMLCertCmd("MultiWrite", makeset(</b><em>alias</em><b>, </b><em>alias</em><b> ...), makeset( </b><em>value</em><b>, </b><em>value</em><b> ...));</b>
<em>status</em><b> = HTMLCertCmd("Flush");</b>
<em>status</em><b> = HTMLCertCmd("Refresh", </b><em>alias</em><b>);</b>
</pre>


<pre>
<b>sett<b> = HTMLCertCmd("TableReadRow", </b><em>tablename</em><b>,</b> </b><em>rowindex</em><b>); </b>
<em>dataset</em><b> = setitem(sett, 0);</b>
<em>styleset</em><b> = setitem(sett, 0);</b>
</pre>



<h3>Description:</h3>
<p>Manipulate or read information about some cell in a running 
HTMLCert instance.</p>

<h3>Return Value:</h3>
<p>Depends on action</p>

<h3>Availability:</h3>
<p>This function only does anything if there is a HTMLCert instance 
running. </p>

<h3>See Also:</h3>
<a href="#HCDetectAlias">HCDetectAlias( )</a> <br/>,
<a href="#HCDetectControlTag">HCDetectControlTag( )</a> <br/>,
<a href="#HCReplaceAlias">HCReplaceAlias( )</a> 

<p> <a rel="up" href="#H"> ^ --H-- </a> </p>


<!-- ================================= -->
<!-- I -->
<hr/><a name="I"></a><h2>--I--</h2>
<p>
<a href="#Image">   Image( ) </a>, <br/>
<a href="#input">   input( ) </a>, <br/>
<a href="#input_password">   input_password( ) </a>, <br/>
<a href="#input_big">   input_big( ) </a>, <br/>
<a href="#insert">  insert( ) </a>, <br/>
<a href="#inset">   inset( ) </a>, <br/>
<a href="#InValue"> InValue( ) </a>, <br/>
<a href="#invoke">  invoke( ) </a>, <br/>
<a href="#invoke2">  invoke2( ) </a>, <br/>
<a href="#isafunction"> isafunction( ) </a>, <br/>
<a href="#isalpha"> isalpha( ) </a>, <br/>
<a href="#isdigit"> isdigit( ) </a><br/>
</p>
<p>
<a rel="up" href="#Functions.20Reference"> ^ Functions Reference </a> 
<a rel="previous" href="#H"> &lt; --H-- </a>
<a rel="next" href="#J"> &gt; --J-- </a>
</p>

<!-- ================================= -->
<hr/><a name="Image"></a> <h2>Image</h2>

<h3>Function Name: Image( ) -- PPVIEW 16 PPVIEW 32</h3>
<h3>Synopsis:</h3>
<pre><b>Image(</b><em>filename</em><b>, </b><em>resourceID</em><b>, </b><em>x0</em><b>, </b><em>y0</em><b>, </b><em>wide</em><b>, </b><em>high</em><b>);</b></pre>

<h3>Description:</h3>
<p>Draw an image whose lower left corner is located at <em>x0</em>, <em>y0</em>, and which is of size <em>wide</em> by 
<em>high</em>.  Currently, bitmaps in BMP files, images or bitmaps in JPEG files, and all the bitmap icons 
defined within WinPCS itself via the REFBMP31.INI file, are supported.</p>

<p> For BMP files 
the <em>filename</em> should be the full or reduced path of the file. including the BMP extension. 
The <em>resourceID</em> is not currently used and should be left blank. </p>

<p> For JPEG files the the <em>filename</em> should be the full or reduced path of the file. including the 
JPG or JPEG extension, and the  <em>resourceID</em> should be 1</p>

<p>For WinPCS icons as defined by the REFBMP31.INI and the various "boards" in the system directory, these should have
the <em>filename</em> set to <b>"WINPCS"</b>, and 
the <em>resourceID</em> is the name that the icon or symbol has as it is defined in REFBMP31.INI and referenced as
elsewhere within WinPCS, notably in ICON fields in various tables, the STRIP in WinPCS.INI and table-symbols used
in PCSD.INI.</p>

<p>The filename may refer to the full or reduced path (see <a href="#ReducePath">ReducePath( )</a>  and
<a href="#ExpandPath">ExpandPath( )</a> ) of the binary image file. </p>

<p> The image is stretched or compressed so it will fill the allotted space, and hence the 
width/height ratio of the inbound image ought to correspond to 
the ratio <em>wide</em>/<em>high</em> in this function call. This will have to be established
separately for BMP and JPG files, and it is possible to query REFBMP31.INI and find the sizes there
for the icon files. </p>

<p> Negative values of <em>high</em> will turn the image around up and down, which is not quite the 
same as what we normally consider upside-down, since this is both left-right and up-
down reversal. Similarly, negative values of <em>wide</em> will turn the image around left-right.
The point <em>x0</em>, <em>y0</em> will always become the point corresponding to the lower left corner of 
the original image. If this is reversed or inverted, the coordinate will become the top 
and/or right corner of the image as it appears on the page.</p>

<h3>Availability:</h3>
<p>Only available in a printing function. The 16-bit system only supports BMP files.</p>

<h3>See Also:</h3>
<p>
<a href="#unicert">unicert( )</a>,<br/>
<a href="#Line">Line( )</a> , <br/>
<a href="#Vline">Vline( )</a> ,<br/>
<a href="#Origin">Origin( )</a> , <br/>
<a href="#ExpandPath">ExpandPath( )</a> , <br/>
<a href="#getinistring">getinistring( )</a> ,<br/>
<a href="#ReducePath">ReducePath( )</a> <br/>
<a href="#stadlginistring">stadlginistring( )</a> <br/>
</p>

<p>
<a rel="up" href="#I"> ^ --I-- </a>
</p>


<!-- ================================= -->
<hr/><a name="input"></a> <h2>input</h2>

<h3>Function Name: input( ) -- LCX 16 LCXCLI 32c</h3>
<h3>Synopsis:</h3>
<pre><em>item</em><b> = input(</b><em>title</em><b>, </b><em>prompt</em><b>, </b><em>dvalue</em><b>);</b></pre>

<h3>Description:</h3>
<p>A dialog box with an edit control and an OK button is opened. The <em>title</em> and <em>prompt</em> are 
displayed, and the <em>dvalue</em> is loaded into the edit control. If the user decides, he can 
change this, and when done so, hit the OK button.</p>

<h3>Return Value:</h3>
<p>The text in the edit control when the user hits OK.</p>

<h3>See Also:</h3>
<p>
<a href="#message"> message( )</a><br/>
<a href="#input_password">input_password( )</a> 
</p>

<p>
<a rel="up" href="#I"> ^ --I-- </a>
</p>

<!-- ================================= -->
<hr/><a name="input_big"></a> <h2>input_big</h2>
<h3>Function Name: input_big( ) -- LCXCLI 32c</h3>

<h3>Synopsis:</h3>
<pre><em>returnsett</em><b> = input_big(</b><em>title</em><b>, </b><em>prompt</em><b>, </b><em>dvalue</em><b>);</b></pre>
<pre><em>dialogstatus</em><b> = setitem(returnsett, 0);</b></pre>
<pre><em>item</em><b> = setitem(returnsett, 1);</b></pre>

<h3>Description:</h3>
<p>A dialog box with a multiline edit control and OK and Cancel buttons 
is opened. The <em>title</em> and <em>prompt</em> are 
displayed, and the <em>dvalue</em> is loaded into the edit control. 
If the user decides, he can 
change this, and when done so, hit the OK button.  </p>

<p>The user can also choose to discard the text, by hitting Cancel.</p>

<h3>Return Value:</h3>
<p>The return value is a 2-part set, of which the first element, 
<em>dialogstatus</em> will be 1 for OK and 0 for Cancel.</p>

<p>The second element, <em>item</em>, will be the text that was in the
edit-control when the dialog-box was closed. </p>

<p>Note that this is different from the older single-line 
<a href="#input">input( )</a> 
function, where the return value is the text on OK and a blank on Cancel.</p>

<h3>See Also:</h3>
<p>
<a href="#message"> message( )</a><br/>
<a href="#input">input( )</a><br/>
</p>

<p>
<a rel="up" href="#I"> ^ --I-- </a>
</p>

<!-- ================================= -->
<hr/><a name="input_password"></a> <h2>input</h2>

<h3>Function Name: input_password( ) -- LCXCLI 32c</h3>
<h3>Synopsis:</h3>
<pre><em>item</em><b> = input_password(</b><em>title</em><b>, </b><em>prompt</em><b>, </b><em>dvalue</em><b>);</b></pre>

<h3>Description:</h3>
<p>Similar to the ordinary
<a href="#input">input( )</a> 
function, but the dialog-box does display the typed-in string as a series of
asterisks, making it suitable for entering passwords.</p>

<p>Otherwise it is the same: A dialog box with an edit control and 
an OK button is opened. The <em>title</em> and <em>prompt</em> are 
displayed, and the <em>dvalue</em> is loaded into the edit control. 
If the user decides, he can 
change this, and when done so, hit the OK button.</p>

<h3>Return Value:</h3>
<p>The text in the edit control when the user hits OK.</p>

<h3>See Also:</h3>
<p>
<a href="#message"> message( )</a><br/>
<a href="#input">input( )</a> 
</p>

<p>
<a rel="up" href="#I"> ^ --I-- </a>
</p>

<!-- ================================= -->
<hr/><a name="insert"></a> <h2>insert</h2>

<h3>Function Name: insert( ) -- RCONN 16 NCONN 32c TMGT 32s TMGT 64s </h3>
<h3>Synopsis:</h3>
<pre><em>status</em><b> = insert(</b><em>table</em><b>);</b></pre>

<h3>Description:</h3>
<p>This causes an Insert operation to be done on the named database table <em>table</em>.  The inserted data 
should have been established as a modification of an earlier record, or the 
<a href="#clear">clear( )</a>  and <a href="#put">put( ) </a> 
functions should have been used to ensure that predictable data is entered.</p>

<h3>Return Value:</h3>
<p>Status of the Insert operation, encoded as a set where the first value is the numeric code 
and the second value is the standard error message. Use setitem( )  to pick out the value 
for use in if-else  tests.</p>

<h3>See Also:</h3>
<p>
<a href="#update">update( )</a> , <br/>
<a href="#delete">delete( )</a> , <br/>
<a href="#clear">clear( )</a> ,<br/>
<a href="#put">put( ) </a> <br/>
</p>

<p>
<a rel="up" href="#I"> ^ --I-- </a>
</p>

<!-- ================================= -->
<hr/><a name="inset"></a> <h2>inset</h2>

<h3>Function Name: inset( ) -- LCX 16 LCX 32s LCX 32c LCX 64</h3>
<h3>Synopsis:</h3>
<pre><em>index</em><b> = inset(</b><em>set</em><b>, </b><em>item</em><b>);</b></pre>
<pre><em>index</em><b> = INSET(</b><em>set</em><b>, </b><em>item</em><b>);</b></pre>

<h3>Description:</h3>
<p>This function takes a set <em>set</em> and an item <em>item</em> that may or may not be 
in the set. If the <em>item</em> is in the <em>set</em>, the zero-based index of 
the <em>item</em> is returned. </p>

<h3>Return Value:</h3>
<p>Zero-based index of the item in the set if found, <b>-1</b> if not found.</p>

<p>If the <em>set</em> is not an actual set, it will be treated as if it were a single-element set, 
and if the <em>item</em> matches, the return value will be 0, indicating that this indeed 
was found as the first item in the set. </p>

<h3>See Also:</h3>
<p>
<a href="#makeset">makeset( )</a> , <br/>
<a href="#setitem">setitem( )</a> , <br/>
<a href="#findexact">findexact( )</a> , <br/>
<a href="#strstr">strstr( )</a> , <br/>
<a href="#strchr">strchr( )</a> , <br/>
<a href="#strrchr">strrchr( )</a> <br/>
</p>

<p>
<a rel="up" href="#I"> ^ --I-- </a>
</p>

<!-- ================================= -->
<hr/><a name="InValue"></a> <h2>InValue</h2>

<h3>Function Name: InValue( ) -- TRANS 16, INSPECT 16, SYNFARE 16, INSPECT 32c EVIEW 32c SYNFARE 32c MAKE 32c</h3>
<h3>Synopsis:</h3>
<pre><em>value</em><b> = InValue(</b><em>fieldname</em><b>);</b></pre>

<h3>Description:</h3>
<p>Reads the value of the selected field in the input table, whatever 
nature this table actually may be.</p>

<h3>Availability:</h3>
<p><b>InValue( )</b> may only be used in a loop function in 
INSPECT or SYNFARE, in a control or field function in TRANS or 
Standard Import, in a client-side Make callback function, 
or in a validation function in a View or Entry. 
Note that <b>InValue( )</b> is not quite identical to the
<a href="#GetScreen">GetScreen( )</a> function. </p>

<h3>See Also:</h3>
<p>
<a href="#GetScreen"> GetScreen( )  </a>,<br/>
<a href="#PutScreen"> PutScreen( )  </a>,<br/>
<a href="#TargetGet"> TargetGet( ) </a>,<br/>
<a href="#TargetPut"> TargetPut( ) </a>,<br/>
<a href="#OutValue"> OutValue( )  </a><br/>
</p>

<p>
<a rel="up" href="#I"> ^ --I-- </a>
</p>

<!-- ================================= -->
<hr/><a name="invoke"></a> <h2>invoke</h2>

<h3>Function Name: invoke( ) -- LCX 16 LCX 32s LCX 32c LCX 64</h3>
<h3>Synopsis:</h3>
<pre><em>value</em><b> = invoke(</b><em>commandline</em><b>);</b></pre>

<h3>Description:</h3>
<p>Run the command indicated by commandline. Executable files are given with full path or 
they are searched for in the current directory, then the directories listed in the PATH. 
Once invoked, there is no control over the application. If control is needed, DDE should 
be used.</p>

<h3>Example</h3>
<p>To find out whether a DDE server program is running, and start it if it isn't, the functions 
<a href="#DDEsvclist">DDEsvclist( )</a> , <a href="#capital">capital( )</a> , 
<a href="#RegPath">RegPath( )</a> , and <a href="#inset">inset( ) </a>
may be used as the following example shows:</p>
<pre>
StartWord( )
{
    string svclist, path, servername, appruns;
    servername = "WINWORD";       /* Or any other known server of course*/
    svclist = capital (DDEsvclist( ));
    if(inset(svclist, capital (servername)) &lt; 0)
    {
        path = RegPath(servername);
        appruns = invoke(path)
    }
    return(appruns - 32);
}
</pre>

<h3>Return Value:</h3>
<p>Numeric, some value >= 32 for OK, or a value &lt; 32 for errors.  These are the <b>WinExec( )</b> return codes.</p>

<h3>See Also:</h3>
<p>
<a href="#rundde"> rundde( ) </a>,<br/>
<a href="#invoke2">invoke2( )</a> <br/>
</p>

<p>
<a rel="up" href="#I"> ^ --I-- </a>
</p>

<!-- ================================= -->
<hr/><a name="invoke2"></a> <h2>invoke2</h2>

<h3>Function Name: invoke2( ) -- LCX 32s LCX 32c </h3>
<h3>Synopsis:</h3>
<pre><b>invoke2(</b><em>file_or_URL</em><b>);</b></pre>

<h3>Argument:</h3>

<p>the <em>file_or_URL</em> parameter should be only the path or URL to
the file, for example <b>c:\document.pdf</b> or <b>c:\dir\image.tif</b> or
<b>http://www.winpcs.com/index.html</b> etc.</p>

<p>For files in WinPCS' numbered drives, use
<a href="#ExpandPath">ExpandPath( )</a> 
to convert to real file-names. </p>

<h3>Description:</h3>
<p>Similar to the <a href="#invoke">invoke( )</a> 
function, <b>invoke2( )</b> delegates the
responsibility for opening the appropriate program to view
a document to Windows, which uses its file-type association.
This simplifies our LCX code considerably by not having to
worry about what viewer should be used to view what file-type.
Also, when using <b>invoke2( )</b>, the last instance of the program that
was used to view the file will be re-used; thus, when using <b>invoke2( )</b>
to view a password-protected link, a user need only login to a
web-site once as the same instance of their browser-of-choice
will be used when they follow another link.</p>

<p>The downside to <b>invoke2( )</b> is that if there is no prior establishment
of file-type association, nothing will happen. This, however, is rare
as most applications register their file-type associations upon
installation.</p>

<h3>Return Value:</h3>
<p>Numeric, some value >= 32 for OK, or a value &lt; 32 for errors.  These are the <b>WinExec( )</b> return codes.</p>

<h3>See Also:</h3>
<p>
<a href="#rundde"> rundde( ) </a>, <br/>
<a href="#invoke">invoke( )</a> ,<br/>
<a href="#ExpandPath">ExpandPath( )</a> <br/>
</p>


<p>
<a rel="up" href="#I"> ^ --I-- </a>
</p>

<!-- ================================= -->
<hr/><a name="isafunction"></a> <h2>isafunction</h2>

<h3>Function Name: isafunction( )-- LCX 16 LCX 32s LCX 32c LCX 64</h3>

<h3>Synopsis:</h3>
<pre><em>boolean</em><b> = isafunction(</b><em>name</em><b>);</b></pre>

<h3>Description:</h3>
<p>The <b>isafunction( )</b> function returns <b>1</b> if the <em>name</em> passed as the argument is 
the name of a defined function, and <b>0</b> if the name did not identify a function. 
Functions may be loaded from code using <a href="#loadLCXfile">loadLCXfile( )</a>
or <a href="#loadimmediate">loadimmediate( )</a> and removed from the system using 
<a href="#killfunction">killfunction( )</a>.  <b>isafunction( )</b> tells whether any given 
function exists, usually in order to determine if a file has been or is to be loaded using 
<a href="#loadLCXfile">loadLCXfile( )</a> by checking the presence or absence of
some sentinel function in that file. </p>

<h3>See Also:</h3>
<p>
<a href="#loadimmediate">loadimmediate( )</a>,<br/>
<a href="#loadLCXfile">loadLCXfile( )</a>,<br/>
<a href="#killfunction">killfunction( )</a><br/>
</p>

<p>
<a rel="up" href="#I"> ^ --I-- </a>
</p>

<!-- ================================= -->
<hr/><a name="isalpha"></a> <h2>isalpha</h2>

<h3>Function Name: isalpha( )-- LCX 16 LCX 32s LCX 32c LCX 64</h3>

<h3>Synopsis:</h3>
<pre><em>boolean</em><b> = isalpha(</b><em>character</em><b>);</b></pre>

<h3>Description:</h3>
<p>The <b>isalpha( )</b> function returns <b>1</b> if the <em>character</em> passed as the argument is an 
uppercase, lowercase, or high-8bit (accented) letter. The function returns <b>0</b> for input that 
are punctuation or numeric characters, digits. If the input is a string of characters, the 
first one is evaluated.</p>

<h3>See Also:</h3>
<p>
<a href="#isdigit">isdigit( )</a> , <br/>
<a href="#ordinal">ordinal( )</a> <br/>
</p>

<p>
<a rel="up" href="#I"> ^ --I-- </a>
</p>

<!-- ================================= -->
<hr/><a name="isdigit"></a> <h2>isdigit</h2>

<h3>Function Name: isdigit( )-- LCX 16 LCX 32s LCX 32c LCX 64</h3>

<h3>Synopsis:</h3>
<pre><em>boolean</em><b> = isdigit(</b><em>character</em><b>);</b></pre>

<h3>Description:</h3>
<p>The <b>isdigit( )</b> function returns <b>1</b> if the <em>character</em> passed as the argument is a digit, zero 
through nine. The function returns <b>0</b> for other input. If the input is a string of characters, 
the first one is evaluated.</p>

<h3>See Also:</h3>
<p>
<a href="#isalpha">isalpha( )</a> , <br/>
<a href="#ordinal">ordinal( )</a> <br/>
</p>

<p>
<a rel="up" href="#I"> ^ --I-- </a>
</p>


<!-- ================================= -->
<!-- J -->
<hr/><a name="J"></a><h2>--J--</h2>
<p>
<a href="#julday">julday( )</a>, <br/>
<a href="#juldayadaptive">juldayadaptive( )</a><br/>
</p>
<p>
<a rel="up" href="#Functions.20Reference"> ^ Functions Reference </a> 
<a rel="previous" href="#I"> &lt; --I-- </a>
<a rel="next" href="#K"> &gt; --K-- </a>
</p>

<!-- ================================= -->
<hr/><a name="julday"></a> <h2>julday</h2>

<h3>Function Name: julday( ) -- LCX 16 TMGT 32s NCONN 32c TMGT 64s</h3>
<h3>Synopsis:</h3>
<pre><em>number</em><b> = julday(</b><em>date</em><b>);</b></pre>

<h3>Description:</h3>
<p>This function converts a date to the Julian day number 
associated with the 24-hour time period starting at noon of that date. 
The opposite function is <a href="#caldat">caldat( ) </a></p>

<p>The conversion is from and to dates in the Gregorian calendar for any 
year later than 1583.</p>

<p>If the incoming date is blank, the returned value will 
be the Julian day of the Monday of the first week of 2000, 
2000-01-03.</p>

<p>Although the Julian Day numbering system goes from noon one day to noon the next day,
as long as we use integers, each day will have a distinct Julian Day number just as it has a distinct date. 
This Julian Day number is the one identifying the period of 24 hours beginning at noon on that day.</p>

<h3>Standalone Replacement:</h3>
<p>Since the date-format is defined by the server in the client/server systems,
the standalone version of this function, as made available to the
the LC97, LC64, and LCXT programs, the function is called 
<a href="#zfunctions">
zjulday()</a></p>

<h3>See Also:</h3>
<p>
<a href="#juldayadaptive">juldayadaptive( )</a>,<br/> 
<a href="#caldat"> caldat( ) </a>,<br/>
<a href="#WeekFromDate"> WeekFromDate( ) </a>,<br/>
<a href="#WeekShift"> WeekShift( )</a> <br/>
</p>

<p>
<a rel="up" href="#J"> ^ --J-- </a>
</p>

<!-- ================================= -->
<hr/><a name="juldayadaptive"></a> <h2>juldayadaptive</h2>

<h3>Function Name: juldayadaptive( ) -- TMGT 32s NCONN 32c </h3>
<h3>Synopsis:</h3>
<pre><em>number</em><b> = juldayadaptive(</b><em>text</em><b>);</b></pre>

<h3>Description:</h3>
<p>This function converts some text, which can identify a date,
into the Julian day number associated with the 24-hour time period starting 
at noon of that date. Unlike the standard
<a href="#julday">julday( )</a> and
<a href="#zjulday">zjulday( )</a> 
functions, the input here can be in several different formats and the
function will make an attempt at interpreting the argument as
identifying a particular day. </p>

<p>The text can be in the following forms:</p>
<table border="1" cellspacing="1" cellpadding="2">
<thead>
</thead>
<tbody>
<tr><td>Argument Value</td><td>Identifying property</td><td>Return Value </td></tr>
<tr><td>blank</td><td>blank as per the definition of <a href="#notext">notext( )</a> <td>blank</td></tr>
<tr><td>yyyyww</td><td>Exactly 6 characters, all of which are digits</td><td>Julian Day Number of the Monday of the week ww of year yyyy.</td></tr>
<tr><td>yyyymmdd</td><td>8 or more characters, the first 8 are digits and the 9th is not a digit.</td><td>Julian Day Number of this date in packed iso8601-format </td></tr>
<tr><td>yyyySmmSdd</td><td>10 or more characters, where the 1st, 2nd, 3rd, 4th, 6th, 7th, 9th, and 10 are digits, 
		while the 5th and 8th are some non-digit separator character, and the 11th is not a digit.</td>
		<td>Julian Day Number of this date in iso8601-format </td></tr>
<tr><td>year, month, day in the order specified in server.ini</td>
		<td>Any string not conforming to the above. Note that the month here can be alphabetic, 
		strings beginning with Jan, Feb etc. will be understood as expected for any format specification of month.</td>
		<td>Julian Day Number of this date as determined from the server.ini format </td></tr>
</tbody>
</table>
</p>

<p>Although the Julian Day numbering system goes from noon one day to noon the next day,
as long as we use integers, each day will have a distinct Julian Day number just as it has a distinct date. 
This Julian Day number is the one identifying the period of 24 hours beginning at noon on that day.</p>


<h3>See Also:</h3>
<p>
<a href="#julday"> julday( ) </a> <br/>
<a href="#zjulday">zjulday( )</a> <br/>
</p>

<p>
<a rel="up" href="#J"> ^ --J-- </a>
</p>





<!-- ================================= -->
<!-- K -->
<hr/><a name="K"></a><h2>--K--</h2>
<p>
<a href="#killfunction">killfunction( )</a><br/>
</p>
<p>
<a rel="up" href="#Functions.20Reference"> ^ Functions Reference </a> 
<a rel="previous" href="#J"> &lt; --J-- </a>
<a rel="next" href="#L"> &gt; --L-- </a>
</p>


<!-- ================================= -->
<hr/><a name="killfunction"></a> <h2>killfunction</h2>

<h3>Function Name: killfunction( ) -- LCX 16 LCX 32s LCX 32c LCX 64</h3>
<h3>Synopsis</h3>
<pre><b>killfunction(</b><em>name</em><b>);</b></pre>

<h3>Description</h3>
<p><b>killfunction( )</b> can be used to unload a macro function identified as <em>name</em>
from the working environment.  There is no requirements as to how the function was originally loaded,
whether this was as a consequence of a <a href="#loadlcxfile">loadlcxfile( )</a> call, a 
<a href="#loadimmediate">loadimmediate( )</a> call or the initial
loading of the file as performed prior to executing the functions within which the <b>killfunction( ) </b>
is called.</p>

<p>To determine if the function is there at all, use the 
<a href="#isafunction">isafunction( )</a> to determine this.</p>

<h3>Return Value:</h3>
<p>This call returns <b>0</b> when the function was removed OK and <b>-1</b> if the function could not be removed, 
most likely because it didn't exist to begin with. </p>

<h3>Availability:</h3>
<p>Strange things may happen if a function tries to kill itself! </p>

<h3>See Also:</h3>
<p>
<a href="#loadimmediate">loadimmediate( )</a>,<br/>
<a href="#loadLCXfile">loadLCXfile( )</a>,<br/>
<a href="#isafunction">isafunction( )</a><br/>
</p>

<p>
<a rel="up" href="#K"> ^ --K-- </a>
</p>


<!-- ================================= -->
<!-- L -->


<hr/><a name="L"></a><h2>--L--</h2>
<p>
<a href="#LCXASYNC">LCXASYNC( )</a>,<br/>
<a href="#LCXFunctions">LCXFunctions( )</a>,<br/>
<a href="#LCXGlobals">LCXGlobals( )</a>,<br/>
<a href="#LCXISOLATED">LCXISOLATED( )</a>,<br/>
<a href="#LCXRPC">LCXRPC( )</a>,<br/>
<a href="#Line">Line( )</a>,<br/>
<a href="#ListDir">ListDir( )</a> ,<br/>
<a href="#ListFieldNames">ListFieldNames( )</a> ,<br/>
<a href="#ListProps">ListProps( )</a> ,<br/>
<a href="#ListTableNames">ListTableNames( )</a> ,<br/>
<a href="#LoadCSVDataFromDir">LoadCSVDataFromDir( )</a>,<br/>
<a href="#LoadCSVDataFromFile">LoadCSVDataFromFile( )</a> ,<br/>
<a href="#loadimmediate">loadimmediate( )</a>,<br/>
<a href="#loadLCXfile">loadLCXfile( )</a>,<br/>
<a href="#loginuser">loginuser( )</a>,<br/>
<a href="#longget">longget( )</a><br/>
</p>
<p>
<a rel="up" href="#Functions.20Reference"> ^ Functions Reference </a> 
<a rel="previous" href="#K"> &lt; --K-- </a>
<a rel="next" href="#M"> &gt; --M-- </a>
</p>


<!-- ================================= -->

<hr/><a name="LCXASYNC"></a> <h2>LCXASYNC</h2> 
<h3>Function Name: LCXASYNC( ) -- TMGT 32s</h3>

<h3>Synopsis:</h3>
<pre><b>LCXASYNC(</b><em>function</em><b>, </b><em>arg1 ... </em><b>);</b></pre>

<h3>Description:</h3>
<p>Start some LCX function on the server, and let it run unattended.
The LCXASYNC( ) function returns quickly, but the job started may go
on for a while. </p>

<h3>Availability:</h3>
<p>No completion notification is implemented. This is effectively a
"fire-and-forget" command. </p>
<p>Shoule eventually become available from NCONN 32c and TMGT 64</p>

<h3>See Also:</h3>
<p>
<a href="#LCXRPC">LCXRPC( )</a> ,<br/>
<a href="#LCXISOLATED">LCXISOLATED( )</a> ,<br/>
<a href="#ServerReport">ServerReport( )</a> <br/>
</p>

<p>
<a rel="up" href="#L"> ^ --L-- </a>
</p>

<!-- ================================= -->

<hr/><a name="LCXFunctions"></a> <h2>LCXFunctions</h2> 
<h3>Function Name: LCXFunctions( ) -- NCONN 32c TMGT 32s</h3>

<h3>Synopsis:</h3>
<pre><em>Report</em><b> = LCXFunctions(</b><em>side</em><b>, </b><em>file</em><b>);</b></pre>

<h3>Description:</h3>
<p>Lists functions in one or more LCX files on the server 
or client side of the system. </p>

<h3>Availability:</h3>
<p>Docs UNDER CONSTRUCTION. </p>

<h3>Return Value</h3>
<p>The returned value refers to a report
with two columns, column 0 is the file-name, column 1 is the function name. </p>

<h3>See Also:</h3>
<p>
<a href="#RepServe">RepServe( )</a> , <br/>
<a href="#RepDebug">RepDebug( )</a> , <br/>
<a href="#ServerReport">ServerReport( ) </a> ,<br/>
<a href="#LCXRPC">LCXRPC( ) </a><br/>
</p>

<p>
<a rel="up" href="#L"> ^ --L-- </a>
</p>

<!-- ================================= -->

<hr/><a name="LCXGlobals"></a> <h2>LCXGlobals</h2> 
<h3>Function Name: LCXGlobals( ) -- LCX 32s LCX 32c</h3>

<h3>Synopsis:</h3>
<pre><em>nameset</em><b> = LCXGlobals();</b></pre>

<h3>Description:</h3>
<p>This functions returns the names of all defined globals
at this point. Most of these will be known, but additional ones
can be coming in as part of a web-browser call. This makes it
possible to discover and deal with them.</p>


<h3>Return Value</h3>
<p>The returned value is a set of names, of the globals in the order
they were found in the system list. </p>

<h3>See Also:</h3>
<p>
<a href="#Variables"> Variables</a><br/>
</p>

<p>
<a rel="up" href="#L"> ^ --L-- </a>
</p>

<!-- ================================= -->
<hr/><a name="LCXISOLATED"></a> <h2>LCXISOLATED</h2> 
<h3>Function Name: LCXISOLATED( ) -- NCONN 32c TMGT 32s</h3>
<h3>Synopsis:</h3>
<pre><em>rvalue</em><b> = LCXISOLATED(</b><em>function</em><b>, </b><em>arg1 ... </em><b>);</b></pre>

<h3>Description:</h3>
<p>Very similar to LCXRPC on the client, but tables opened and repositioned in 
the course of the function call do not affect positioning of the tables on the caller. </p>

<h3>Availability:</h3>
<p>The function must exist on the server-side. </p>

<h3>Return Value</h3>
<p>The return value of the call is the returned value from the function. </p>

<h3>See Also:</h3>
<p>
<a href="#Indirect.20Function.20Calls">Indirect function calls</a>,<br/>
<a href="#ServerReport">ServerReport( ) </a><br/>
<a href="#LCXRPC">LCXRPC( ) </a><br/>
</p>

<p>
<a rel="up" href="#L"> ^ --L-- </a>
</p>

<!-- ================================= -->
<hr/><a name="LCXRPC"></a> <h2>LCXRPC</h2>

<h3>Function Name: LCXRPC( ) -- NCONN 32c TMGT 32s</h3>

<h3>Synopsis:</h3>
<pre><em>rvalue</em><b> = LCXRPC(</b><em>function</em><b>, </b><em>arg1 ... </em><b>);</b></pre>

<h3>Description:</h3>
<p> This allows a function defined and loaded on the server to be called from
the client-side. The call on the server is equivalent to</p>
<pre><em>rvalue</em><b> = </b><em>function</em><b>(</b><em>arg ... </em><b>);</b></pre>
<p> where the arguments, as many as necessary, are passed through.  </p>

<h3>Availability:</h3>
<p> Since the <em>function</em> is called on the server, it must exist there. 
The <b>LCXRPC()</b> function exists both on the clients and the servers. 
On the server it is just an indirect function call. 
Also note, that if a lot of data is required to be returned, the 
<a href="#ServerReport">ServerReport( )</a> function, which is similar 
in terms of arguments, may be a better choice.  </p>

<h3>See Also:</h3>
<p>
<a href="#Indirect.20Function.20Calls">Indirect function calls</a>,<br/>
<a href="#ServerReport"> ServerReport( ) </a>,<br/>
<a href="#LCXISOLATED">LCXISOLATED( )</a> <br/>
</p>

<p>
<a rel="up" href="#L"> ^ --L-- </a>
</p>

<!-- ================================= -->
<hr/><a name="Line"></a> <h2>Line</h2>

<h3>Function Name: Line( ) -- PPVIEW 16 PPVIEW 32</h3>
<h3>Synopsis:</h3>
<pre><b>Line(</b><em>x1</em><b>, </b><em>y1</em><b>, </b><em>x2</em><b>, </b><em>y2</em><b>);</b></pre>
<pre><b>Line(</b><em>x1</em><b>, </b><em>y1</em><b>, </b><em>x2</em><b>, </b><em>y2</em><b>, </b><em>weight</em><b>);</b></pre>
<pre><b>Line(</b><em>x1</em><b>, </b><em>y1</em><b>, </b><em>x2</em><b>, </b><em>y2</em><b>, </b><em>weight</em><b>, </b><em>color</em><b>);</b></pre>

<h3>Description:</h3>
<p>The <b>Line( )</b> function draws a line from a point <em>x1,y1</em> to another point <em>x2,y2</em>. The 
coordinates are measured from the Origin point of the paper. The <em>weight</em> argument if 
present, gives a line of the specified thickness. Additionally, the color of the line may be 
specified by adding the sixth argument, <em>color</em>.</p>

<p>As lines in certificates, forms, and reports tend to be either vertical or horizontal, the functions
<a href="#Vline">Vline( )</a> or <a href="#Hline">Hline( )</a> will be easier to use here.</p>

<h3>Availability:</h3>
<p>Only available in a printing function.</p>

<h3>See Also:</h3>
<p>
<a href="#unicert">unicert( )</a>,<br/>
<a href="#Hline"> Hline( ) </a>, <br/>
<a href="#Vline"> Vline( ) </a>, <br/>
<a href="#Origin"> Origin( )</a> <br/>
</p>

<p>
<a rel="up" href="#L"> ^ --L-- </a>
</p>

<!-- ================================= -->

<hr/><a name="ListDir"></a><h2>ListDir</h2>

<a href="#ListDir">ListDir( )</a> 
<h3>Function Name: ListDir( ) -- LCX 32s LCX 32c </h3>

<h3>Synopsis:</h3>
<pre><em>listset</em><b> = ListDir(</b><em>reserved</em><b>,</b><em>wildcard</em><b>,</b><em>sortoption</em><b>);</b></pre>

<h3>Description:</h3>
<p>This function lists the contents of a directory based on
wildcards. The <em>wildcard</em> string should be the path where the
file-element is given with wildcard characters such as * and ?. </p>

<p>The list can be ordered by various values of the <em>sortoption</em>. If
this string contains N the list is sorted by Name, if this string contains 
S the list is sorted by Size, and if has T the list is sorted by Time. These
letters can be combined. Additionally the R makes for reverse order. </p>

<h3>Return Value:</h3>
<p>The returned list of files matching the wildcard is given as a set,
ordered as per the <em>sortoptions</em>.</p>

<!-- h3>See Also:</h3 -->
<p> </p>

<p>
<a rel="up" href="#L"> ^ --L-- </a>
</p>

<!-- ================================= -->
<!-- add: ListFieldNames -->
<hr/><a name="ListFieldNames"></a> <h2>ListFieldNames</h2>
<h3>Function Name: ListFieldNames( ) -- TMGT 32s NCONN 32c </h3>

<h3>Synopsis:</h3>
<pre><em>nameset</em><b> = ListFieldNames(</b><em>table</em><b>);</b></pre>

<h3>Description:</h3>
<p>This function gives the field-names of a table. The list is returned
as the set of names. It may for example be used to determine details 
about each field with 
<a href="#FieldInfo">FieldInfo( )</a> 
</p>

<h3>See Also:</h3>
<p>
<a href="#ListTableNames">ListTableNames( )</a> ,
<a href="#FieldInfo">FieldInfo( )</a> 
<a href="#fieldexists">fieldexists( )</a> 
</p>

<p>
<a rel="up" href="#F"> ^ --F-- </a>
</p>


<!-- ================================= -->

<hr/><a name="ListProps"></a><h2>ListProps</h2>

<a href="#ListProps">ListProps( )</a> 
<h3>Function Name: ListProps( ) -- TMGT 32s NCONN 32c</h3>

<h3>Synopsis:</h3>
<pre>
<em>report</em><b> = ListProps(</b><em>table</em><b>,</b><em>serial</em><b>);</b>
<em>report</em><b> = ListProps(</b><em>table</em><b>,</b><em>serial</em><b>,</b><em>mode</em><b>);</b>
</pre>

<h3>Description:</h3>
<p>This function lists the active properties assigned on a particular record in a table, 
specified in the arguments. The <em>serial</em> is the record number, 
as defined in CXDICT ITEMUNIFLD, most commonly the value of the field RSERIAL 
of the record in the table <em>table</em>.</p>

<p>The function can produce data in different forms according to the
<em>mode</em> argument. </p>

<h3>Return Value:</h3>

<p>The return value is a report containing any found properties, one
row per property found. Like all other reports, this one should be 
deallocated using
<a href="#RepClose">RepClose( )</a> 
when no longer needed. </p>


<table border="1"> <tbody>
<tr valign="top">
<td>Mode</td>
<td>Columns</td>
<td>Description</td>
</tr>

<tr valign="top">
<td><b>0</b> or absent</td>
<td>4 columns: rserial, name, value, type </td>
<td>Returns short-form of all active properties defined </td>
</tr>

<tr valign="top">
<td><b>1</b></td>
<td>12 columns: rserial, name, value, type, status,
		 created on, changed on, voided on,
		 created by, changed by, voided by, flag-value</td>

<td>Returns long-form of all active properties defined </td>
</tr>

<tr valign="top">
<td><b>2</b></td>
<td>12 columns: rserial, name, value, type, status,
		 created on, changed on, voided on,
		 created by, changed by, voided by, flag-value</td>
<td>Returns long-form of all active and voided properties defined </td>
</tr>
</tbody>
</table>


<h3>See Also:</h3>
<p>
<a href="#SetProps">SetProps( )</a> 
<a href="#RepInfo">RepInfo( )</a> 
<a href="#RepClose">RepClose( )</a> 
</p>

<p>
<a rel="up" href="#L"> ^ --L-- </a>
</p>

<!-- ================================= -->
<!-- add: ListTableNames -->
<hr/><a name="ListTableNames"></a> <h2>ListTableNames</h2>
<h3>Function Name: ListTableNames( ) -- LCX 32s LCX 32c </h3>

<h3>Synopsis:</h3>
<pre><em>infoset</em><b> = ListTableNames();</b></pre>

<h3>Description:</h3>
<p>This function returns the table-names defined in the
system, as a set.  </p>

<h3>See Also:</h3>
<p>
<a href="#ListFieldNames">ListFieldNames( )</a> ,
<a href="#FieldInfo">FieldInfo( )</a> 
<a href="#fieldexists">fieldexists( )</a> 
</p>

<p>
<a rel="up" href="#F"> ^ --F-- </a>
</p>


<!-- ================================= -->
<hr/><a name="LoadCSVDataFromDir"></a> <h2>LoadCSVDataFromDir</h2>

<h3>Function Name: LoadCSVDataFromDir( ) -- TMGT 32s</h3>

<h3>Synopsis</h3>
<pre><b>LoadCSVDataFromDir(</b><em>directory</em><b>);</b></pre>

<h3>Description</h3>
<p>This function expects an argument referring to a directory containing one or more 
carefully formatted CSV files, and it will start loading data from these files. 
</p>

<p>Each file should correspond to single table and have the name (table).CSV. The first line
in the file should refer to the fields in this table, and the remaining lines in the files
refer to records to be inserted or updated in thie table.  Records are attempted inserted,
then if that fails with a duplicated key value, the data is then updated in the existing
record. </p>

<p>This is typically something that is to be done as part of a periodic job, or
run on command in an asynchronous function call from the client. </p>

<h3>See Also:</h3>
<p> 
<a href="#StoreAllTablesData">StoreAllTablesData( )</a> <br/>
<a href="#LCXASYNC">LCXASYNC( )</a> <br/>
<a href="serverini.html#section.20periodic">Server.ini periodic jobs</a> <br/>
</p>

<p>
<a rel="up" href="#L"> ^ --L-- </a>
</p>

<!-- ================================= -->

<hr/><a name="LoadCSVDataFromFile"></a><h2>LoadCSVDataFromFile</h2>

<a href="#LoadCSVDataFromFile">LoadCSVDataFromFile( )</a> 
<h3>Function Name: LoadCSVDataFromFile( ) -- TMGT 32s</h3>

<h3>Synopsis:</h3>
<pre><b>LoadCSVDataFromFile(</b><em>table</em><b>,</b><em>inputfilename</em><b>,</b><em>reserved</em><b>,</b><em>quote</em><b>,</b><em>separator</em><b>);</b></pre> 

<h3>Description:</h3>
<p>UNDER CONSTRUCTION</p>

<h3>Return Value:</h3>
<p>UNDER CONSTRUCTION</p>

<h3>See Also:</h3>
<p>
<a href="#example">example( )</a> <br/>
</p>

<p>
<a rel="up" href="#L"> ^ --L-- </a>
</p>

<!-- ================================= -->
<hr/><a name="loadimmediate"></a> <h2>loadimmediate</h2>

<h3>Function Name: loadimmediate( ) -- LCX 16 LCX 32s LCX 32c LCX 64</h3>

<h3>Synopsis</h3>
<pre><b>loadimmediate(</b><em>macrocode</em><b>, </b><em>whence</em><b>);</b></pre>

<h3>Description</h3>
<p>loadimmediate( ) causes the supplied macrocode, which must consist of one or more 
complete function definitions, to be prescanned and added to the current environment. 
</p>

<p>Once the code is loaded, functions may be located using
<a href="#isafunction">isafunction( )</a> and called, possibly
<a href="#Indirect.20Function.20Calls">indirectly</a>.
</p>

<h3>See Also:</h3>
<p> 
<a href="#isafunction">isafunction( )</a><br/>
<a href="#loadLCXfile">loadLCXfile( )</a> <br/>
<a href="#Indirect.20Function.20Calls">Indirect Function Calls</a><br/>
</p>

<p>
<a rel="up" href="#L"> ^ --L-- </a>
</p>


<!-- ================================= -->
<hr/>
<a name="loadLCXfile"></a> <h2>loadLCXfile</h2>

<h3>Function Name: loadLCXfile( ) -- LCX 16 LCX 32s LCX 32c LCX 64</h3>

<h3>Synopsis</h3>
<pre><em>status</em><b> = loadLCXfile(</b><em>filename</em><b>);</b></pre>

<h3>Description</h3>
<p>The function <b>loadLCXfile( )</b> reads the file given as its argument, 
and adds the code inside this file 
to the current macro environment.  The filename must be a complete
filename, as returned from 
<a href="#ExpandPath">ExpandPath( )</a>.</p>

<h3>Return Value:</h3>
<p>The function returns a 2-part set indicating if it could load the file or not.
<a href="#setitem">setitem</a><b>(</b><em>status</em><b>,0)</b> 
will be negative on errors and positive on success.
<a href="#setitem">setitem</a><b>(</b><em>status</em><b>,1)</b> 
will be a description of the condition, whether OK or otherwise.</p>

<h3>See Also:</h3>
<p>
<a href="#isafunction">isafunction( )</a> ,<br/>
<a href="#loadimmediate">loadimmediate( )</a> ,<br/>
<a href="#killfunction">killfunction( )</a> <br/>
</p>

<p>
<a rel="up" href="#L"> ^ --L-- </a>
</p>

<!-- ================================= -->
<hr/><a name="loginuser"></a> <h2>loginuser</h2>
<h3>Function Name: loginuser( ) -- LCXCLI 32c</h3>
<h3>Synopsis:</h3>
<pre><em>name</em><b> = loginuser( );</b></pre>

<h3>Return Value:</h3>
<p>The return value is the user identity as the client's user is logged into the system as. 
This can be different from the user-name defined inside of WinPCS. </p>

<h3>See Also:</h3>
<p>
<a href="#user"> user( ) </a><br/>
</p>
<p>
<a rel="up" href="#L"> ^ --L-- </a>
</p>
<!-- ================================= -->
<hr/><a name="longget"></a> <h2>longget</h2>

<h3>Function Name: longget( ) -- RCONN 16</h3>
<h3>Synopsis:</h3>
<pre><em>set</em><b> = longget(</b><em>table</em><b>, </b><em>field</em><b>);</b></pre>

<h3>Description and Return value:</h3>
<p>The value of the named field in the current record of the named table is copied and 
returned. If the value of the field is a multiline text, the resulting set contains one line per 
element. Correspondingly, single line values result in a single-element set.</p>

<h3>See Also:</h3>
<p>
<a href="#get"> get( ) </a>, <br/>
<a href="#setitem"> setitem( ) </a><br/>
</p>

<p>
<a rel="up" href="#L"> ^ --L-- </a>
</p>

<!-- ================================= -->
<!-- M -->

<hr/><a name="M"></a><h2>--M--</h2>
<p>
<a href="#MailTo">MailTo( )</a>,<br/>
<a href="#MakeAlfa">MakeAlfa( )</a>,<br/>
<a href="#MakeDir">MakeDir( )</a>,<br/>
<a href="#MakePLCreateLogEntry">MakePLCreateLogEntry( )</a>,<br/>
<a href="#Machinename">Machinename( )</a>,<br/>
<a href="#makeset">makeset( )</a>,<br/>
<a href="#makeset">MAKESET( )</a>,<br/>
<a href="#message">message( )</a>,<br/>
<a href="#minuscule">minuscule( )</a>,<br/>
<a href="#MoveTag">MoveTag( )</a>,<br/>
<a href="#MulDiv">MulDiv( )</a> ,<br/>
<a href="#MultiConnected">MultiConnected( )</a> ,<br/>
<a href="#multiget">multiget( )</a> ,<br/>
<a href="#multiput">multiput( )</a> <br/>
</p>
<p>
<a rel="up" href="#Functions.20Reference"> ^ Functions Reference </a> 
<a rel="previous" href="#L"> &lt; --L-- </a>
<a rel="next" href="#N"> &gt; --N-- </a>
</p>

<!-- ================================= -->
<hr/><a name="MailTo"></a> <h2>MailTo</h2>
<h3>Function Name: MailTo( ) -- NCONN 32c TMGT 32s </h3>
<h3>Synopsis:</h3>
<pre><em>name</em><b> = MailTo(</b><em>who</em><b>, </b><em>subject</em><b>, </b><em>body1</em><b>, </b><em>body2</em><b>);</b></pre>

<h3>Description:</h3>
<p>
This function generates an e-mail to the recipient identified as 
<em>who</em>, with the <em>subject</em> as indicated and the text in the
body of the mail, as the concatenation of <em>body1</em> and 
<em>body2</em>.  </p>

<h3>Return Value:</h3>
<p>The return-code from the ShellExecute() windows API function. 
</p>

<h3>Limitations:</h3>
<p>The command-trap mechanism used does not support attachments.
Put an URL or file path in the message to indicate the location 
of referenced documents instead.
</p>

<h3>See Also:</h3>
<p>
invoke
</p>

<p>
<a rel="up" href="#M"> ^ --M-- </a>
</p>

<!-- ================================= -->
<hr/><a name="MakeAlfa"></a> <h2>MakeAlfa</h2>

<h3>Function Name: MakeAlfa( ) -- LCX 32c LCX 32s </h3>
<h3>Synopsis:</h3>
<pre><em>name</em><b> = MakeAlfa(</b><em>tagnumber</em><b>);</b></pre>

<h3>Description:</h3>
<p>This function makes a cleaned-up all-letters and digits of the supplied
tag-number, <em>tag</em>.</p>

<h3>Return Value:</h3>
<p>The function returns the tag with all characters other than letters and digits
removed. </p>

<h3>See Also:</h3>
<p>
<a href="#EncodeTag">EncodeTag( )</a> , <br/>
<a href="#CleanFileName">CleanFileName( )</a> <br/>
<a href="#URLEncode">URLEncode( )</a> <br/>
</p>

<p>
<a rel="up" href="#M"> ^ --M-- </a>
</p>

<!-- ================================= -->
<hr/><a name="MakeDir"></a> <h2>MakeDir</h2>

<h3>Function Name: MakeDir( ) -- LCX 16 LCX 32s LCX 32c LCX 64</h3>
<h3>Synopsis:</h3>
<pre><em>code</em><b> = MakeDir(</b><em>path</em><b>);</b></pre>
<h3>Description:</h3>
<p>Make a directory at the path specified.  The function returns <b>0</b> if
the specified directory exists after the call, whether it and possibly
its parents were created or they already existed prior to the call.  
The function returns <b>-1</b> if it
failed to create the directories.</p>

<p><b>MakeDir( )</b> creates directories recursively, analogous to the 
behavior of the <b>cmd.exe</b> <i>md</i> command or the unix 
shell <i>mkdir -p</i> command.  </p>
<p>Note that this function does require a real path to function, 
use <a href="#ExpandPath">ExpandPath( )</a> 
as necessary to generate the path.</p>

<h3>Example:</h3>
<pre>MakeDir(ExpandPath("0:\1\2\3\4\5\6"));</pre>
<p>will create all the subdirectories 1, 1\2, 1\2\3, 1\2\3\4, 
1\2\3\4\5, and 1\2\3\4\5\6 in turn, in one go, as necessary, and 
returns <b>0</b> for success, even if some of these 
already should exist.</p> 

<h3>Note:</h3>
<p>The above describes the LCX32s and LCX32c versions. LCX16 and LCX64 have
not yet been improved to do recursive creation as of 2006-05-10.</p>

<h3>See Also:</h3>
<p>
<a href="#RemoveDir">RemoveDir( ) </a>, <br/>
<a href="#ExpandPath">ExpandPath( )</a> <br/>
</p>

<p>
<a rel="up" href="#M"> ^ --M-- </a>
</p>

<!-- ================================= -->
<hr/><a name="MakePLCreateLogEntry"></a> <h2>MakePLCreateLogEntry</h2>

<h3>Function Name: MakePLCreateLogEntry( ) -- NCONN 32c TMGT 32s</h3>

<h3>Synopsis:</h3>
<pre><em>status</em><b> = MakePLCreateLogEntry(
</b><em>pltable</em><b>,
</b><em>plprovisional</em><b>,
</b><em>tagtable</em><b>,
</b><em>tagnumber</em><b>);</b></pre>

<h3>Description</h3>
<p>This function adds a PLCREATE record in the changes.txt file
for offline systems. It is a no-op on on-line systems.  </p>

<p>
The <em>pltable</em> is the table of created items; the
<em>plprovisional</em> is the off-line system's identifier for this,
which is likely to be different once recorded to the main system;
<em>tagtable</em> is the table of which equipment or other object the punchitem
is raised; and <em>tagnumber</em> is the common identifier of this object, 
such as equipment tag number, subsystem number, as defined in CXDICT ITEMFLD. 
</p>

<p>UNDER CONSTRUCTION</p>

<!-- <h3>See Also:</h3>
<p>
</p> -->

<p>
<a rel="up" href="#M"> ^ --M-- </a>
</p>

<!-- ================================= -->
<hr/><a name="Machinename"></a> <h2>Machinename</h2>

<h3>Function Name: Machinename( ) -- NCONN 32c TMGT 32s</h3>

<h3>Synopsis:</h3>
<pre><em>name</em><b> = Machinename("Server");</b></pre>
<pre><em>name</em><b> = Machinename("Fileserver");</b></pre>
<pre><em>name</em><b> = Machinename("Client");</b></pre>
<pre><em>name</em><b> = Machinename("Endpoint");</b></pre>

<h3>Description:</h3>
<p>This function determines the hostname or network address 
of one of the machines that may be in use during a session.  The
function can also provide information on which "endpoint",
or TCP port is being used for the communication. </p>

<p>The first letter of the argument string
should be one of S for Server, F for Fileserver, C for Client. 
or E for Endpoint. </p>

<p>The Server is the machine
where the WinPCS server program is running.  </p>
<p>The Client is the
machine where the client program is running.  </p>
<p>The Fileserver is
the machine where the client-side ANCHORC.DLL file is located, and thus
serving the files for the client. This last one can be different from the
client, since there can be situations where a file-server, 
not the same as the WinPCS server, holds client 
files, and these are accessed via a local area network. </p>

<p>The Endpoint is the TCP port number being used by the client and
the server, and where the server can be found listening. </p>

<p>Only the first letter of the argument strings is what is actually used.
Arguments beginning with other characters than S, F, C, or E are reserved, and
the returned values should be considered unpredictable in these cases.</p>

<h3>See Also:</h3>
<p>
<a href="#user">user( )</a> <br/>
<a href="checksv.html">Checksv.exe</a><br/>
</p>

<p>
<a rel="up" href="#M"> ^ --M-- </a>
</p>


<!-- ================================= -->
<hr/><a name="makeset"></a> <h2>makeset</h2>

<h3>Function Name: makeset( ) -- LCX 16 LCX 32s LCX 32c LCX 64</h3>
<h3>Synopsis:</h3>
<pre><em>set</em><b> = makeset(</b><em>item</em><b> ...);</b></pre>
<pre><em>set</em><b> = MAKESET(</b><em>item</em><b> ...);</b></pre>

<h3>Description:</h3>
<p>This function puts together a set out of individual items, in the order these are given in 
the argument list.  Two or more sets generated with makeset( ) can be combined with each other by using the 
concat( ) function.  </p>

<p><b>LCX 32s, LCX 32c</b>: If one of the arguments to makeset is itself a set (as produced by
another call to makeset( ) or one of the other functions that returns a set,) this will become
embedded as an element, and pulled out in its entirety by a subsequent call to
<a href="#setitem">setitem( )</a> . 
Cascading makeset( ) calls therefore generates embedded sets within sets. </p>

<p><b>LCX 16</b>: Cascading makeset( ) calls generate just new overlength sets with 
extra zero-length elements in them; this is less than useful.</p>

<h3>Return Value:</h3>
<p>The set of the arguments left to right.</p>

<h3>See Also:</h3>
<p>
<a href="#concat">concat( )</a> , <br/>
<a href="#inset">inset( )</a> , <br/>
<a href="#setitem">setitem( )</a> ,<br/>
<a href="#findexact">findexact( )</a> , <br/>
<a href="#setlen">setlen( )</a> <br/>
</p>
<p>
<a rel="up" href="#M"> ^ --M-- </a>
</p>

<!-- ================================= -->
<hr/><a name="message"></a> <h2>message</h2>

<h3>Function Name: message( ) -- LCX 16 LCXCLI 32c TMGT 32s</h3>
<h3>Synopsis:</h3>
<pre><b>message(</b><em>title</em><b>, </b><em>item</em><b> ...);</b></pre>

<h3>Description:</h3>
<p>
On systems where there is a GUI, this function opens a message window 
with the given title <em>title</em>, and with a text and and OK button. 
The text is the concatenation left to right of the second and subsequen arguments.  
</p>

<p>On servers, where no GUI exists, the <b>message( )</b> function emits first the title text
and then the rest of the arguments as text on the debugger-output, somewhat imilar to what 
<a href="#trace">trace( )</a> 
does. This is so that functions containing <b>message( )</b> can work unmodified on either
client or server. Prior to adding this function to the server repertoire, the function would
just stop. A quiet emission on the debugging-terminal is vastly more useful.
</p>

<h3>See Also:</h3>
<p>
<a href="#trace">trace( )</a>, <br/>
<a href="#print">print( )</a>, <br/>
<a href="#input">input( )</a>,<br/>
<a href="#Predefined.20Constants"> __HERE__ </a><br/>
</p>

<p>
<a rel="up" href="#M"> ^ --M-- </a>
</p>

<!-- ================================= -->
<hr/><a name="minuscule"></a> <h2>minuscule</h2>

<h3>Function Name: minuscule( ) -- LCX 16 LCX 32s LCX 32c LCX 64</h3>
<h3>Synopsis:</h3>
<pre><em>text</em><b> = minuscule(</b><em>Text</em><b>);</b></pre>

<h3>Description:</h3>
<p>
The <b>minuscule( )</b> function converts to lower case (minuscules).  
The <a href="#capital"> capital( )</a>  function converts 
text to upper-case (capitals). 
</p>

<h3>Return Value:</h3>
<p>
The text of the argument where all upper-case letters are 
converted to lower case. 
</p>

<h3>See Also:</h3>
<p>
<a href="#capital">capital( ) </a><br/>
</p>

<p>
<a rel="up" href="#M"> ^ --M-- </a>
</p>

<!-- ================================= -->
<hr/><a name="MoveTag"></a> <h2>MoveTag</h2>
<h3>Function Name: MoveTag( ) -- TMGT 32s NCONN 32c</h3>

<h3>Synopsis:</h3>
<pre><em>info</em><b> = MoveTag(</b><em>FromTable</em><b>,</b><em>ToTable</em><b>,</b><em>Tag</em><b>);</b></pre>

<h3>Description:</h3>
<p>This function allows data about some Engineering Tag to be moved
from one table to another. Fields in the tables that have the same names
are preserved, and all the connections that apply to both tables in the 
same way (same connection table, and same side -- left or right -- in 
this table) will be copied across. </p>

<h3>Return Value:</h3>
<p>
The returned value is a 2-part set, where the first element is numeric,
with 0 indicating success, and various other values indicating failure. 
The second element is a string indicating more details about success 
or failure. 
</p>

<p>
<a rel="up" href="#M"> ^ --M-- </a>
</p>


<!-- ================================= -->
<hr/><a name="MulDiv"></a> <h2>MulDiv</h2>
<h3>Function Name: MulDiv( ) -- LCX 16 LCX 32s LCX 32c LCX 64 </h3>

<h3>Synopsis:</h3>
<pre><em>Q</em><b> = MulDiv(</b><em>N</em><b>,</b><em>X</em><b>,</b><em>D</em><b>);</b></pre>

<h3>Description:</h3>
<p>Evaluates N*X/D allowing better precision using integer data. 
This is actually done by performing the multiplication and division
in double-precision floating-point arithmetic and then converting back
to integer. </p>

<p>Note that if D is 0, the function will fail with a "division by zero" error. 
This is in contrast to the <a href="#CalcPerc">CalcPerc( )</a>,
function, which returns blank if the denominator is zero.  </p>

<h3>See Also:</h3>
<p>
<a href="#CalcPerc">CalcPerc( )</a> <br/>
</p>

<p>
<a rel="up" href="#M"> ^ --M-- </a>
</p>

<!-- ================================= -->

<hr/><a name="MultiConnected"></a><h2>MultiConnected</h2>

<a href="#MultiConnected">MultiConnected( )</a> 
<h3>Function Name: MultiConnected( ) -- TMGT 32s</h3>

<h3>Synopsis:</h3>
<pre><b>MultiConnected(</b><em>toptable</em><b>,</b><em>topobject</em><b>,</b><em>treelines</em><b>,</b><em>si_or_imm</em><b>,</b><em>table_fieldset</em><b>);</b></pre>

<h3>Description:</h3>
<p>UNDER CONSTRUCTION</p>

<h3>Return Value:</h3>
<p>UNDER CONSTRUCTION</p>

<h3>See Also:</h3>
<p>
<a href="#example">example( )</a> <br/>
</p>

<p>
<a rel="up" href="#M"> ^ --M-- </a>
</p>

<!-- ================================= -->

<!-- ================================= -->
<hr/><a name="multiget"></a> <h2> multiget( )</h2>
<h3>Function Name: multiget( ) -- TMGT 32s NCONN 32c TMGT 64s</h3>

<h3>Synopsis:</h3>
<pre><em>itemset</em><b> = multiget(</b><em>table</em><b>, </b><em>fieldset</em><b>);</b></pre> 

<h3>Description:</h3>
<p>
<b>multiget( )</b> reads the set of fields, <em>fieldset</em>, out of
a table <em>table</em> and returns a set of field-values corresponding
to the fields passed in.  On clients, a few calls to
<b>multiget</b>
with several fields is a lot less expensive and faster than
several calls to 
<a href="#get">get( )</a>. To write data to a table, there is an
corresponding function 
<a href="#multiput">multiput( )</a> 
which replaces several calls to
<a href="#put">put( )</a> .</p>

<p>Use the
<a href="#makeset">makeset( )</a> 
function to assemble the list of fields, and
<a href="#setitem">setitem( )</a> 
to pick out the values in the result.</p>

<h3>Return Value:</h3>
<p>
The value of the fields in the current record of the named table.</p>

<h3>See Also:</h3>
<p>
<a href="#get">get( )</a> ,<br/>
<a href="#multiput">multiput( )</a> ,<br/>
<a href="#put">put( )</a> <br/>
<a href="#makeset">makeset( )</a> <br/>
<a href="#setitem">setitem( )</a> <br/>
</p>

<p>
<a rel="up" href="#M"> ^ --M-- </a>
</p>

<!-- ================================= -->
<hr/><a name="multiput"></a> <h2> multiput( )</h2>
<h3>Function Name: multiput( ) -- NCONN 32c TMGT 32s TMGT 64s </h3>

<h3>Synopsis:</h3>
<pre><em>status</em><b> = multiput(</b><em>table</em><b>, </b><em>fieldset</em><b>, </b><em>itemset</em><b>);</b></pre> 

<h3>Description:</h3>

<p>
<b>multiput( )</b> writes the set of fields, <em>fieldset</em>, in 
a table <em>table</em> with the data in the fieldvalues
<em>itemset</em>.  On clients, a few calls to
<b>multiput</b>
with several fields is a lot less expensive and faster than
several calls to 
<a href="#put">put( )</a>. To read data from a table, there is an
corresponding function 
<a href="#multiget">multiget( )</a> 
which similarly can replace several calls to
<a href="#get">get( )</a> .
</p>

<p>Use the
<a href="#makeset">makeset( )</a> 
function to assemble the list of fields and the list of values.</p>

<h3>Return Value:</h3>
<p>
A completion status code that may reveal problems such as an unknown or
badly positioned table. 
</p>

<h3>See Also:</h3>
<p>
<a href="#put">put( )</a> <br/>
<a href="#get">get( )</a> <br/>
<a href="#multiget">multiget( )</a> <br/>
<a href="#makeset">makeset( )</a> <br/>
<a href="#SetProps">SetProps( )</a> 
</p>

<p>
<a rel="up" href="#M"> ^ --M-- </a>
</p>

<!-- ================================= -->
<!-- N -->

<hr/><a name="N"></a><h2>--N--</h2>
<p>
<a href="#Newpage">Newpage( )</a><br/>
<a href="#nextinseq">nextinseq( )</a><br/>
<a href="#nextinseqA">nextinseqA( )</a><br/>
<a href="#notext">notext( )</a> <br/>
</p>
<p>
<a rel="up" href="#Functions.20Reference"> ^ Functions Reference </a> 
<a rel="previous" href="#M"> &lt; --M-- </a>
<a rel="next" href="#O"> &gt; --O-- </a>
</p>

<!-- ================================= -->
<hr/><a name="Newpage"></a> <h2>Newpage</h2>

<h3>Function Name: Newpage( ) -- PPVIEW 16 PPVIEW 32</h3>
<h3>Synopsis:</h3>
<pre><b>Newpage( );</b></pre>

<h3>Description:</h3>
<p>This function issues the necessary internal commands to end a page 
and start a new page. The orientation of the next page will remain the 
same as for the previous pages, that is, we have all landscape or all 
portrait pages, as defined in the initial drawing function.
</p>

<h3>See Also:</h3>
<p><a href="#unicert">unicert( )</a>,<br/>
<a href="#Page"> Page( )  </a><br/>
</p>

<h3>Availability:</h3>
<p> <b>Newpage( )</b> is only available in printing functions.  </p>

<p>
<a rel="up" href="#N"> ^ --N-- </a>
</p>
<!-- ================================= -->
<hr/><a name="nextinseq"></a> <h2>nextinseq</h2>
<a name="nextinseqA"></a>

<h3>Function Name: nextinseq( ) -- RCONN 16 NCONN 32c TMGT 32s TMGT 64s</h3>
<h3>Function Name: nextinseqA( ) -- NCONN 32c TMGT 32s TMGT 64s</h3>

<h3>Synopsis</h3>

<pre><em>newid</em><b> = nextinseq(</b><em>table</em><b>, </b><em>field</em><b>, </b><em>prefix</em><b>, </b><em>prefixlen</em><b>, </b><em>numberlen</em><b>);</b></pre>

<pre><em>newid</em><b> = nextinseq(</b><em>table</em><b>, </b><em>field</em><b>, </b><em>prefix</em><b>, </b><em>prefixlen</em><b>, </b><em>numberlen</em><b>, </b><em>fieldset</em><b>, </b><em>dataset</em><b>);</b></pre>

<pre><em>newid</em><b> = nextinseqA(</b><em>table</em><b>, </b><em>field</em><b>, </b><em>prefix</em><b>, </b><em>prefixlen</em><b>, </b><em>ignored</em><b>);</b></pre>

<pre><em>newid</em><b> = nextinseqA(</b><em>table</em><b>, </b><em>field</em><b>, </b><em>prefix</em><b>, </b><em>prefixlen</em><b>, </b><em>ignored</em><b>, </b><em>fieldset</em><b>, </b><em>dataset</em><b>);</b></pre>

<h3>Description</h3>

<p>This function is intended for serial numbering of notes, 
punchitems, tags, etc; where there is some variety of prefixes to 
be followed by a serial number or a suffix letter, repeated across prefixes, but 
distinct for each prefix and 1 or A for the first one. </p>

<p>There used to be a requirement that all the prefixes in a table had to have the same
length specified as <em>prefixlen</em> but for systems running the TMGT.DLL of November 8
2005 or later,  (build 1.731 or later) this restriction is lifted. 
From this version on, the various prefixes in a table no longer have to have the same length.
From this point on, the <em>prefixlen</em> argument is ignored and the actual length of the
<em>prefix</em> string is used instead. The argument <em>numberlen</em> is used for determining the
separation of prefix and serial number.</p>

<p>The <b>nextinseq( )</b> function produces a subsequent identity of a record in the 
named <em>table</em>, and with identity in the named <em>field</em>, 
in a numbered series with a common <em>prefix</em>. The numbering starts at 
<b>1</b> with numberlen characters total (<b>0001</b> for 
<em>numberlen</em> = <b>4</b> for example). </p>

<p>The <b>nextinseqA( )</b> function produces a subsequent identity of a record in the 
named <em>table</em>, and with identity in the named <em>field</em>, 
in a series with a common <em>prefix</em> and a letter suffix, starting at A. 
Only one suffix-letter is implemented. </p>

<p>If desired, some other fields, such as creation-date, can be set at this time as well. To do this, 
specify a set of fields, and a set of data-values to go into these fields as following arguments
<em>fieldset</em> and <em>dataset</em>. The mechanism is much the same as for the
<a href="#multiput">multiput( )</a> function. </p>

<h3>Limitation:</h3>
<p>There is only one letter position for nextinseqA( ), and the "letters" will continue
in ASCII order beyond Z.</p>
<p>The 16-bit functions do not have the possibility of additional fields.</p>

<p>If the range of the numerical suffix is exceeded, in otherwords, once there is 10^numberlen records, 
no more records in this series will be accepted, as the suffix length is kept constant and all previous 
possibilities already exist. </p>

<h3>Example:</h3>
<p>The following function uses the <b>nextinseq( )</b> function to add a 
note in a table called AUTONOTE, where the main identity field 
(item-field) is NOTE_NO; and fills in other fields. It may be used 
as a drag-drop callback function  the way it stands. Note numbering 
here will be as exemplified by

<br/>WAE-0001
<br/>WAE-0002
<br/>WAM-0001
<br/>WAM-0002
<br/>WAM-0003
<br/>HHM-0001
<br/>HHM-0002
<br/>HHE-0001
<br/>HHE-0002
<br/>etc.

<br/>for site-codes WA and HH; and disciplines E and M.</p>

<pre>
/* Create a note on something. */
CreateNote(string fromtable, string fromfield, string totable, string tofield, 
    string bitmapID, string originID, string dragID, string wherefrom,
    string a) 
{
    string tag, e_ini, enter_ini, note, noteno;
    string bitmap, unique, ID, mess, disp, userid, site1, user_site;
    string bs;

    userid = user() ;

    findexact ("USER", "NET_NAME", userid);
    user_site = get ("USER", "SITE_CODE");
    site1 = substr (user_site, 1, 2);
    tag = setitem (dragID, 2);

    disp = selectinistring ("Discipline Selection", "Select Discipline(s)", 
            "0:\dispsel.ini", "MCSIdisp");
    if(!dialogOK() )
    {
        return(0);
    }

    noteno = nextinseq("AUTONOTE", "NOTE_NO", concat(site1, disp, "-" ), 0, 4);

    bs = findexact ("AUTONOTE", "NOTE_NO", noteno);

    put("AUTONOTE", "DISCIPLINE", disp);
    put("AUTONOTE", "ICON", bitmap);
    put("AUTONOTE", "ITEM_ID", tag);
    put("AUTONOTE", "RAISED_DATE", date ());
    put("AUTONOTE", "RAISED_BY", userid);
    put("AUTONOTE", "YR_WEEK", week ());
    put("AUTONOTE", "STATUS", "OPEN");
    update ("AUTONOTE");

    findexact("AUTONOTE", "NOTE_NO", noteno);

    enter_ini =entrydialog ("AUTONOTE", "0:\enote.ini", "NOTE_NO", noteno);
    if(enter_ini==0)
    {
        delete ("AUTONOTE");
        return(0);
    }
    findexact("AUTONOTE", "NOTE_NO", noteno);
    connect ("AUTONOTE", fromtable, tag, noteno); 
    return(0);
}
</pre>

<h3>See Also:</h3>
<p>
<a href="#concat"> concat( ) </a>, <br/>
<a href="#substr"> substr( ) </a>, <br/>
<a href="#insert"> insert( ) </a>, <br/>
<a href="#put"> put( ) </a>, <br/>
<a href="#findexact"> findexact( )  </a><br/>
</p>

<p>
<a rel="up" href="#N"> ^ --N-- </a>
</p>

<!-- ================================= -->
<hr/><a name="notext"></a> <h2>notext</h2>
<h3>Function Name: notext( ) -- LCX 16 LCX 32s LCX 32c LCX 64 </h3>

<h3>Synopsis:</h3>
<pre><em>logical</em><b> = notext(</b><em>teststring</em><b>);</b></pre>

<h3>Description:</h3>
<p>This function tells whether any string <em>teststring</em> is blank, and 
returns <b>0</b> if it contains anything printable beyond whitespace-characters, 
and <b>1</b> if it is empty or only contains whitespace-characters, that is, space, 
tab, and newline.  
</p>

<h3>See Also:</h3>
<p>
<a href="#strchr"> strchr( ) </a>, <br/>
<a href="#isdigit"> isdigit( ) </a><br/>
</p>

<p>
<a rel="up" href="#N"> ^ --N-- </a>
</p>


<!-- ================================= -->
<!-- O -->

<hr/><a name="O"></a><h2>--O--</h2>
<p>
<a href="#openhierarchy ">openhierarchy ( )</a> ,<br/>
<a href="#optreport">optreport( )</a> ,<br/>
<a href="#ordinal"> ordinal( )</a>,<br/>
<a href="#Origin"> Origin( )</a>,<br/>
<a href="#OSVersion">OSVersion( )</a>,<br/>
<a href="#OutValue"> OutValue( )</a><br/>
</p>
<p>
<a rel="up" href="#Functions.20Reference"> ^ Functions Reference </a> 
<a rel="previous" href="#N"> &lt; --N-- </a>
<a rel="next" href="#P"> &gt; --P-- </a>
</p>

<!-- ================================= -->
<hr/><a name="openhierarchy"></a> <h2>openhierarchy</h2>
<h3>Function Name: openhierarchy( ) -- RCONN 16 NCONN 32c </h3>

<h3>Synopsis:</h3>
<pre><em>handle</em><b> = openhierarchy(</b><em>phase</em><b>, </b><em>Root</em><b>, </b><em>treelines</em><b>, </b><em>table</em><b>, </b><em>item</em><b>);</b></pre>

<h3>Description:</h3>
<p>
This function opens a standard hierarcy view on the table <em>Root</em>, 
with the optional phase-code identified as <em>phase</em>.  
The Root and phase map to entries in WinPCS.INI section [HIERTOP]
where details for levels and other actions are specified. 
</p>

<p>The hierarcy is opened showing all the ancestor of 
the object <em>item</em> in
the table <em>table</em>, and to find these ancestors, the set of treelines, 
<em>treelines</em> are used.  Each treeline to be tried is listed in this set, 
and when one match to all levels is found, the hierarchy is started and
all levels down to and including the <em>table</em> are opened. 
</p>

<p>The treelines could be the ones that are returned from a call to
<a href="#treelinelist">treelinelist( )</a> 
This mechanism is used with Open from Hierarchies in the Views.</p>


<h3>Return Value:</h3>
<p>
The value returned is a nonzero value, a window handle, if the hierarcy
was opened. The return value is <b>0</b> if the hierarchy fails to open.
</p>

<h3>See Also:</h3>
<p>
<a href="#makeset">makeset( )</a>,<br/>
<a href="#Vhierarchy">Vhierarchy( )</a>,<br/>
<a href="#VarHierarchy">VarHierarchy( )</a>,<br/>
<a href="#treelinelist">treelinelist( )</a> <br/>
</p>

<p>
<a rel="up" href="#O"> ^ --O-- </a>
</p>

<!-- ================================= -->

<hr/><a name="optreport"></a><h2>optreport</h2>

<a href="#optreport">optreport( )</a> 
<h3>Function Name: optreport( ) -- TMGT 32s</h3>

<h3>Synopsis:</h3>
<pre><b>optreport(</b><em>subsystemtable</em><b>,</b><em>leafset</em><b>);</b></pre>

<h3>Description:</h3>
<p>UNDER CONSTRUCTION</p>

<h3>Return Value:</h3>
<p>UNDER CONSTRUCTION</p>

<h3>See Also:</h3>
<p>
<a href="#example">example( )</a> <br/>
</p>

<p>
<a rel="up" href="#O"> ^ --O-- </a>
</p>

<!-- ================================= -->
<hr/><a name="ordinal"></a> <h2>ordinal</h2>

<h3>Function Name: ordinal( ) -- LCX 16 LCX 32s LCX 32c LCX 64</h3>
<h3>Synopsis:</h3>
<pre><em>number</em><b> = ordinal(</b><em>character</em><b>);</b></pre>

<h3>Return Value:</h3>
<p>
The returned value is numeric. It is the ASCII order of the first 
character given in the argument. This is an integer in the range 0 to 255.
</p>

<h3>See Also:</h3>
<p>
<a href="#ASCII"> ASCII( ) </a>,<br/>
<a href="#ASCIITABLE">Table of ASCII Codes</a><br/>
</p>

<p>
<a rel="up" href="#O"> ^ --O-- </a>
</p>

<!-- ================================= -->
<hr/><a name="Origin"></a> <h2>Origin</h2>
<h3>Function Name: Origin( ) -- PPVIEW 16 PPVIEW 32</h3>
<h3>Synopsis:</h3>
<pre><b>Origin(</b><em>x0</em><b>, </b><em>y0</em><b>);</b></pre>

<h3>Description:</h3>
<p>
Moves the origin point to the new location indicated by <em>x0, y0</em>. 
This is always referenced to the lower left corner of the page, 
with positive values to the right and upwards. Negative values go 
to the left and downwards. The origin point may be moved anywhere 
on or off the page, wherever it is most convenient.  All subsequent 
drawing commands will refer to the new origin point. 
</p>

<h3>Availability:</h3>
<p>
<b>Origin( )</b> is only available in printing functions.
</p>

<h3>See Also:</h3>
<p>
<a href="#unicert">unicert( )</a><br/>
</p>

<p>
<a rel="up" href="#O"> ^ --O-- </a>
</p>

<!-- ================================= -->
<hr/><a name="OSVersion"></a> <h2>OSVersion</h2>

<h3>Function Name: OSVersion( ) -- LCX 32s LCX 32c</h3>

<h3>Synopsis:</h3>
<pre><em>value</em><b> = OSVersion();</b></pre>

<h3>Description:</h3>
<p>This function returns a 2-part set
where the first part is the version of the operating 
system and the second part indicates success in figuring this out. 
This is the returned value from the Windows <b>RtlGetVersion()</b> 
function, and is 0 when successful.</p>

<h3>Return value:</h3>
<table border="1"> <tbody>
<tr><td>Operating system</td><td>Returned value</td></tr>
<tr><td>Windows 7</td><td>6.1+0+</td></tr>
<tr><td>Windows 10</td><td>10.0+0+</td></tr>
</tbody> </table>

<p>The numbering scheme for Windows systems is as defined in 
<a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms724832(v=vs.85).aspx">
https://msdn.microsoft.com/en-us/library/windows/desktop/ms724832(v=vs.85).aspx
</a> at Microsoft's MSDN pages. </p>

<p>
<a rel="up" href="#O"> ^ --O-- </a>
</p>

<!-- ================================= -->
<hr/><a name="OutValue"></a> <h2>OutValue</h2>

<h3>Function Name: OutValue( ) -- INSPECT 16, SYNFARE 16, INSPECT 32c SYNFARE 32c MAKE 32c</h3>

<h3>Synopsis:</h3>
<pre><em>value</em><b> = OutValue(</b><em>fieldname</em><b>, </b><em>datum</em><b>);</b></pre>

<h3>Description:</h3>
<p>
Places a value, datum, into a selected field fieldname in the table 
or report. Conceptually similar to put( ) , but does not depend on 
current positioning of the table. For INSPECT, the target record is 
the current record of the Inspect loop, not any record that has been 
found using findexact( )  or one of its relatives. For SYNFARE, this 
target record is the current row in the Report View.
</p>

<h3>Availability:</h3>
<p>
The <a href="#InValue">InValue( )</a>  and 
<b>OutValue( )</b> functions are available in for all 
records call-back functions in INSPECT and SYNFARE, and in client-side
make-connection callback functions.
</p>

<h3>See Also:</h3>
<p>
<a href="#put">put( ) </a><br/>
</p>

<p>
<a rel="up" href="#O"> ^ --O-- </a>
</p>

<!-- ================================= -->
<!-- P -->

<!-- Add:
ProduceDashboardData TMGT 32s
-->

<hr/><a name="P"></a><h2>--P--</h2>
<p>
<a href="#Page">Page( )</a><br/>
<a href="#pattern">pattern( )</a><br/>
<a href="#pcs_permission"> pcs_permission( )</a><br/>
<a href="#PDFCertCmd">PDFCertCmd( )</a> <br/>
<a href="#popdown">popdown( )</a><br/>
<a href="#popup">popup( )</a><br/>
<a href="#pow10">pow10( )</a><br/>
<a href="#print">print( )</a> <br/>
<a href="#put">put( )</a><br/>
<a href="#PutScreen ">PutScreen ( )</a> <br/>
</p>
<p>
<a rel="up" href="#Functions.20Reference"> ^ Functions Reference </a> 
<a rel="previous" href="#O"> &lt; --O-- </a>
<a rel="next" href="#Q"> &gt; --Q-- </a>
</p>


<!-- ================================= -->
<hr/><a name="Page"></a> <h2>Page</h2>

<h3>Function Name: Page( ) -- PPVIEW 16 PPVIEW 32</h3>
<h3>Synopsis:</h3>
<pre><em>number</em><b> = Page( );</b></pre>

<h3>Description:</h3>
<p>This function returns the number of the current page. This is the same as the number of 
internal and external <a href="#Newpage">Newpage( )</a> calls generated since the 
beginning of the document. 
The total number of pages is either known in advance, as is the case with a three-page certificate 
having exactly three pages by design. Or, alternately, the number of pages is known 
after the metafile for the document has been generated.
</p>

<p>
The number of pages cannot in general be predicted exactly, for the same reason that 
the number of <a href="#Newpage">Newpage( )</a>
calls resulting from the execution of any randomly selected 
program (written in LCX, or C, or any other language providing for repeating and 
conditional execution, i.e. any other language that may be remotely useful) can only be 
determined by actually executing the program. This is the famous `halting problem`.
</p>

<h3>See Also:</h3>
<p>
<a href="#unicert">unicert( )</a>,<br/>
<a href="#Newpage">Newpage( )</a><br/>
</p>

<h3>Availability:</h3>
<b>Page( )</b> is only available in printing functions.
<p>
<a rel="up" href="#P"> ^ --P-- </a>
</p>

<!-- ================================= -->
<hr/><a name="pattern"></a> <h2>pattern</h2>

<h3>Function Name: pattern( ) -- LCX 16 LCX 32s LCX 32c LCX 64</h3>
<h3>Synopsis:</h3>
<pre><em>value</em><b> = pattern(</b><em>arg1</em><b>,</b><em>arg2</em><b>);</b></pre>
<h3>Description:</h3>
UNDER CONSTRUCTION
<h3>Return Value:</h3>
<h3>See Also:</h3>

<p>
<a rel="up" href="#P"> ^ --P-- </a>
</p>
<!-- ================================= -->
<hr/><a name="pcs_permission"></a> <h2>pcs_permission</h2>

<h3>Function Name: pcs_permission( ) -- RCONN 16 NCONN 32c TMGT 32s</h3>
<h3>Synopsis:</h3>
<pre><em>code</em><b> = pcs_permission(</b><em>action</em><b>, </b><em>tablename</em><b>);</b></pre>

<h3>Description:</h3>
<p>This function looks up the permission-setting on the combination of <em>action</em> and <em>tablename</em>, 
and returns a character A for All Rights, R for Read-only, and H for Hidden, as per the settings in the Define Users panel.
</p>

<p>The <em>tablename</em> does not have to refer to an actual table, though it frequently does. The system-level
permission settings such as TO, GC, or UE can be checked via this function by using:</p>

<pre>code1 = pcs_permisson("T", "O");
code2 = pcs_permisson("U", "E");
code3 = pcs_permisson("G", "C"); </pre>

<h3>See Also:</h3>
<a href="wuser.html">USYM documentation </a> <br/>

<p>
<a rel="up" href="#P"> ^ --P-- </a>
</p>
<!-- ================================= -->
<hr/><a name="PDFCertCmd"></a> <h2>PDFCertCmd</h2>

<h3>Function Name: PDFCertCmd( ) -- NCONN 32c</h3>
<h3>Synopsis: </h3>
<pre><b>PDFCertCmd("LockCell", </b><em>alias</em><b> );</b></pre>

<h3>Description:</h3>
<p>The <b>PDFCertCmd( )</b> function allows WinPCS to read and write
and change cell values in an opened instance of PDFCert. Normally,
PDFCert makes calls to WinPCS via the <b>cpdv</b> interface, but
this allows WinPCS to be the initiator of the interaction. </p>

<p>Cells in PDFCert are identified with aliases which are defined
in the form, and these aliases are used here and with the functions
for bookmarks and properties, when PDFCert requests values from WinPCS
or notifies WinPCS that there are changes in the data and these changes
get stored back into WinPCS. </p>

<p>The various actions are all multiplexed through <b>PDFCertCmd( )</b> via its
first argument, as shown. </p>

<p>
<a rel="up" href="#P"> ^ --P-- </a>
</p>


<!-- ================================= -->
<hr/><a name="popdown"></a> <h2>popdown</h2>

<h3>Function Name: popdown( ) -- LCX 16 LCXCLI 32c</h3>
<h3>Synopsis: </h3>
<pre><b>popdown( );</b></pre>

<h3>Description:</h3>
<p><b>popdown( )</b> closes any window that may have been opened by calls to 
<a href="#popup">popup( ) </a></p>
<p>
<a rel="up" href="#P"> ^ --P-- </a>
</p>

<!-- ================================= -->
<hr/><a name="popup"></a> <h2>popup</h2>

<h3>Function Name: popup( ) -- LCX 16 LCXCLI 32c</h3>
<h3>Synopsis:</h3>
<pre><b>popup(</b><em>title</em><b>, </b><em>text</em><b>);</b></pre>

<h3>Description:</h3>
<p>
Opens a window with text in it, and leaves it up, until <a href="#popdown">popdown( )</a>  
is called. To change the text, call the <b>popup( )</b> function again with the new text.
</p>

<h3>Limitations:</h3>
<p>
This interferes with the Odometer functions, and an error in the subsequent code may 
also cause the window to remain up indefinitely. If a Cancel feature is needed, the 
Odometer functions should be used. These are generally more user-friendly. 
</p>

<h3>See Also:</h3>
<p>
<a href="#CounterHere">CounterHere( )</a> , <br/>
<a href="#CounterAway">CounterAway( )</a> , <br/>
<a href="#CounterCheck">CounterCheck( )</a> , <br/>
<a href="#CounterStep">CounterStep( )</a> <br/>
</p>
<p>
<a rel="up" href="#P"> ^ --P-- </a>
</p>

<!-- ================================= -->
<hr/><a name="pow10"></a> <h2>pow10</h2>
<h3>Function Name: pow10( )-- LCX 16 LCX 32s LCX 32c LCX 64</h3>

<h3>Synopsis:</h3>
<pre><em>value</em><b> = pow10(</b><em>exponent</em><b>);</b></pre>

<h3>Description:</h3>
<p>The <b>pow10( )</b> function evaluates <b>10</b> to the power of the supplied <em>exponent</em>. 
Thus, the value of <b>pow10(4)</b> is <b>10000</b>.  </p>

<p> Until further notice will negative exponents be evaluated as <b>0</b>, and 
<b>pow10(<em> value &lt; 0 </em> )</b> returns unity.  </p>

<h3>See Also:</h3>
<p>
<a href="#repeat">repeat( ) </a><br/>
</p>

<p>
<a rel="up" href="#P"> ^ --P-- </a>
</p>

<!-- ================================= -->
<hr/><a name="print"></a> <h2>print</h2>
<h3>Function Name: print( ) -- LCX 16 LCX 32s LCX 32c LCX 64 </h3>

<h3>Synopsis:</h3>
<pre><em>title</em><b> = print(</b><em>title</em><b>, </b><em>item</em><b> ...);</b></pre>

<h3>Description:</h3>
<p>This function prints out a message on a console, using standard IO. 
This may not show anywhere on the client, however it does show on 
the server's console window. This is useful for putting out debug-messages
from server-side code and informational messages from the command-line, 
(LC97 or LC64) programs. Like 
<a href="#message"> message </a> it may be useful to use 
<a href="#Predefined.20Constants">__HERE__</a> 
as the first argument so the message may be retrieved and removed later. 
</p>

<h3>Availability:</h3>
<p>
Does probably make no useful output unless a console window is available. 
Most debugging activities should probably use 
<a href="#message">message( )</a>
or <a href="#trace">trace( )</a> instead. 
</p>

<h3>See Also:</h3>
<p>
<a href="#trace">trace( )</a>, <br/>
<a href="#message"> message( )</a>,<br/>
<a href="#Predefined.20Constants"> __HERE__ </a><br/>
</p>

<p>
<a rel="up" href="#P"> ^ --P-- </a>
</p>

<!-- ================================= -->
<hr/><a name="put"></a> <h2>put</h2>

<h3>Function Name: put( ) -- RCONN 16 NCONN 32c TMGT 32s TMGT 64s</h3>
<h3>Synopsis:</h3>
<pre><em>item</em><b> = put(</b><em>table</em><b>, </b><em>field</em><b>, </b><em>item</em><b>);</b></pre>

<h3>Description:</h3>
<p>
This function places the value if the item into the named field in the current record of the 
named database.  If a lot of fields are to be written at the same time,
the alternate <a href="#multiput">multiput( )</a> function will make less demands on the network. 
</p>

<h3>Expensive Function warning</h3>

<p>On the client side of the 32-bit systems, the use of 
a single or a few calls to <a href="#multiput">multiput( )</a> 
is preferrable to many calls to <b>put( )</b> since 
the action has to take place across the network, and a lot
of calls to <b>put( )</b> is more expensive than fewer calls to
<a href="#multiput">multiput( )</a>.</p>

<p>On the server-side, the <b>put( )</b> 
function is inexpensive, so network load is no problem here. </p>


<h3>Return Value:</h3>
<p>The value of the item as passed as argument.</p>

<h3>See Also:</h3>
<p>
<a href="#clear"> clear( ) </a>, <br/>
<a href="#multiput">multiput( )</a>, <br/>
<a href="#get"> get( )</a> <br/>
</p>
<p>
<a rel="up" href="#P"> ^ --P-- </a>
</p>

<!-- ================================= -->
<hr/><a name="PutScreen"></a> <h2>PutScreen</h2>
<h3>Function Name: PutScreen( ) -- EVIEW 32c </h3>

<h3>Synopsis:</h3>
<pre><b>PutScreen(</b><em>fieldname</em><b>, </b><em>value</em><b>);</b></pre>

<h3>Description:</h3>
<p>This puts out a value on a field an Entry or View Screen when 
validation is called. The fieldnames are the ones in the table,
not the ones displayed as legends. 
</p>

<h3>Availability:</h3>
<p>Only available in a $LCXMACRO() field-validation function. 
UNDER CONSTRUCTION
</p>

<h3>See Also:</h3>
<p>
<a href="#GetScreen">GetScreen( )</a>,<br/>
<a href="call3206.html"> View, Entry, and Report Pushbuttons </a>. <br/>
</p>

<p>
<a rel="up" href="#P"> ^ --P-- </a>
</p>


<!-- ================================= -->
<!-- Q -->

<hr/><a name="Q"></a><h2>--Q--</h2>
<p>
<a href="#Qreport">Qreport( )</a> ,<br/>
<a href="#question">question( )</a><br/>
</p>
<p>
<a rel="up" href="#Functions.20Reference"> ^ Functions Reference </a> 
<a rel="previous" href="#P"> &lt; --P-- </a>
<a rel="next" href="#R"> &gt; --R-- </a>
</p>


<!-- ================================= -->

<hr/><a name="Qreport"></a><h2>Qreport</h2>

<a href="#Qreport">Qreport( )</a> 
<h3>Function Name: Qreport( ) -- TMGT 32s</h3>

<h3>Synopsis:</h3>
<pre><em>reportset</em><b>=Qreport(</b><em>inreport</em><b>,</b><em>tailargs</em><b>);</b></pre>

<h3>Description:</h3>
<p>This function takes data in a Report <em>inreport</em> and processes it into quantitative 
reports based on the information in the <em>tailarg</em>. This is the same as the trailing arguments
on QREPORT buttons in visible reports, and details on this are given in the page on
<a href="qreportini.html"> qreport.ini </a>. </p>

<p>Notice that the qreport.ini is located in the system32 directory, and this function expects to find it 
there, as per <b>ExpandPath("9:/system32/qreport.ini")</b> </p>

<p>To summarize: The tailargs is a string on the form: </p>
<pre>
<em>sectionname</em> <b>L:</b><em>leadindex</em> <b>S:</b><em>setindexlist</em> <b>G:</b><em>groupindexlist</em> <b>T:</b><em>countindexlist</em> 
</pre>
<table>
<tbody>
<tr><td>sectionname                   </td><td>Section in qreport.ini</td></tr>
<tr><td>L:leadindex,[index...]      </td><td>Discipline or PA/PB</td></tr>
<tr><td>S:setindex[,index...]       </td><td>AC1 or system, typically</td></tr>
<tr><td>T:countindex[,index...]     </td><td>values to add, such as manhours</td></tr>
<tr><td>G:groupindex[,index...]     </td><td>Status code, Done/not done</td></tr>
</tbody>
</table>

<h3>Return Value:</h3>
<p>The function returns a set of report identifiers, that corresponds to the 
Wide and/or the rectangular reports that are generated. These can be extracted using
<a href="#setitem">setitem( )</a> 
and they are otherwise similar to other reports, that can be accessed with the Rep... 
family of functions. </p>

<p>Important: Like other server-side reports, they have to be de-allocated with
<a href="#RepClose">RepClose( )</a> 
or passed to the client in response to a
<a href="#ServerReport">ServerReport( )</a> 
call there.</p>


<h3>See Also:</h3>
<p>
<a href="#TableSumSet">TableSumSet( )</a> <br/>
<a href="qreportini.html"> qreport.ini </a> <br/>
<a href="#setitem">setitem( )</a> <br/>
<a href="#ServerReport">ServerReport( )</a> <br/>
<a href="#RepClose">RepClose( )</a> <br/>
<a href="#ExpandPath">ExpandPath( )</a> 

</p>

<p>
<a rel="up" href="#Q"> ^ --Q-- </a>
</p>

<!-- ================================= -->
<!-- ================================= -->
<hr/><a name="question"></a> <h2>question</h2>

<h3>Function Name: question( ) -- LCX 16 LCXCLI 32c</h3>

<h3>Synopsis:</h3>
<pre><em>selection</em><b> = question(</b><em>title</em><b>, </b><em>question</em><b>, </b><em>buttoncount</em><b>, </b><em>button</em><b>, .... );</b></pre>

<h3>Description:</h3>
<p>This function opens a window with the specified title, 
question and <em>buttoncount</em> pushbuttons in it. 
The returned value is the value associated with that button. 
</p>

<p>
Buttons are defined as per the following arguments, one per button
for a total of buttoncount of these:</p>

<pre><b> makeset(</b><em>buttontext</em><b>, </b><em>drawn</em><b>, </b><em>returncode</em><b>);</b></pre>

<p> where the <em>buttontext</em> is the text on the button, 
the <em>drawn</em> argument is <b>0</b> when the button has text or <b>1</b> when the button
has a symbol on it.  The argument <em>returncode</em> is the value to be returned when the
pushbutton is clicked.  </p>

<h3>Example:</h3>
<pre>
rz = question("Print", "Print to File or Printer?", 3, makeset("File", 0, "F"), 
makeset("Printer", 0, "P"), makeset("Cancel", 0, 0));
</pre>

<p>
which will open a dialog with 3 buttons in it, marked <b>File</b>, <b>Printer</b>, <b>Cancel</b>. When the user 
clicks on one of these, the returned value will be <b>F</b>, <b>P</b>, or <b>0</b> as specified.
Note that the number of buttons defined must be equal to the count of buttons, and 
there has to be at least one of them.
</p>

<h3>See Also:</h3>
<p>
<a href="#input">input( ) </a>,<br/>
<a href="#yesno">yesno( ) </a><br/>
</p>
<p>
<a rel="up" href="#Q"> ^ --Q-- </a>
</p>

<!-- ================================= -->
<!-- R -->

<!-- Add:
RepStoreSQLITE TMGT 32s
-->

<hr/><a name="R"></a><h2>--R--</h2>
<p>
<a href="#reconnectall">reconnectall( )</a> ,<br/>
<a href="#ReducePath">ReducePath( )</a> ,<br/>
<a href="#reformat">reformat( )</a> ,<br/>
<a href="#RegCachedPath">RegCachedPath( )</a> ,<br/>
<a href="#regexe"> regexe( ) </a> ,<br/>
<a href="#regextclass">regextclass( )</a> ,<br/>
<a href="#RegPath">RegPath( )</a> ,<br/>
<a href="#regserver"> regserver( ) </a>, <br/>
<a href="#RemoveDir">RemoveDir( )</a> , <br/>
<a href="#RemoteBack">RemoteBack( )</a> , <br/>
<a href="#RepClose">RepClose( )</a> ,<br/>
<a href="#repeat">repeat( )</a> ,<br/>
<a href="#RepControl">RepControl( )</a> ,<br/>
<a href="#RepCopy">RepCopy( )</a> ,<br/>
<a href="#RepCordon">RepCordon( )</a> ,<br/>
<a href="#RepCreate">RepCreate( )</a> ,<br/>
<a href="#RepDebug">RepDebug( )</a> ,<br/>
<a href="#RepGet">RepGet( )</a> ,<br/>
<a href="#RepInfo">RepInfo( )</a> ,<br/>
<a href="#replace">replace( )</a>, <br/>
<a href="#RepLoad">RepLoad( )</a> ,<br/>
<a href="#RepPut">RepPut( )</a> ,<br/>
<a href="#RepRefresh">RepRefresh( )</a> ,<br/>
<a href="#RepSearch">RepSearch( )</a>  ,<br/>
<a href="#RepSearchSet">RepSearchSet( )</a> ,<br/>
<a href="#RepServe">RepServe( )</a> ,<br/>
<a href="#RepStore">RepStore( )</a> ,<br/>
<a href="#RepToJSON">RepToJSON( )</a> ,<br/>
<a href="#RepWidth">RepWidth( )</a> ,<br/>
<a href="#ReportColIndexes">ReportColIndexes( )</a> ,<br/>
<a href="#ReportColWidth">ReportColWidth( )</a> ,<br/>
<a href="#ReportFirst">ReportFirst( )</a> ,<br/>
<a href="#ReportLast">ReportLast( )</a> ,<br/>
<a href="#ReportLegend">ReportLegend( )</a> ,<br/>
<a href="#ReportRef">ReportRef( )</a> ,<br/>
<a href="#rundde">rundde( )</a> ,<br/>
<a href="#runentry">runentry( )</a> ,<br/>
<a href="#runtrans">runtrans( )</a><br/>
<a href="#runview">runview( )</a><br/>
</p>
<p>
<a rel="up" href="#Functions.20Reference"> ^ Functions Reference </a> 
<a rel="previous" href="#Q"> &lt; --Q-- </a>
<a rel="next" href="#S"> &gt; --S-- </a>
</p>


<!-- ================================= -->
<hr/><a name="reconnectall"></a> <h2>reconnectall</h2>

<h3>Function Name: reconnectall( ) -- RCONN 16</h3>
<h3>Synopsis:</h3>
<pre><em>status</em><b> = reconnectall(</b><em>tablefrom</em><b>, </b><em>tableto</em><b>);</b></pre>

<h3>Description:</h3>
<p>This function breaks all connections made to the object represented by the current 
record in tablefrom and reconnects these to the object represented by the current record 
of tableto.</p>

<h3>Return Value:</h3>
<p>Number of reconnections done.</p>

<h3>See Also:</h3>
<p>
<a href="#DisconnectAll">DisconnectAll( ) </a>,<br/>
<a href="#connect"> connect( )</a> <br/>
</p>
<p>
<a rel="up" href="#R"> ^ --R-- </a>
</p>

<!-- ================================= -->
<hr/>
<a name="ReducePath"></a> <h2>ReducePath()</h2>

<h3>Function Name: ReducePath( ) -- RCONN 16 NCONN 32c TMGT 32s TMGT 64s</h3>
<h3>Synopsis:</h3>
<pre><em>shortpath</em><b> = ReducePath(</b><em>longpath</em><b>);</b></pre>

<h3>Description:</h3>
<p><b>ReducePath( )</b> converts full paths into the WinPCS local (reduced) paths.</p>

<p> The advantage of these reduced paths is that there is no dependency on a system drive 
letter; the WinPCS installation may be easily moved from one place to another. By 
design, the reduced path <b>0:\</b> is the system path as given by 
<a href="#sysdir">sysdir( )</a>.  The other drives <b>1:</b> 
thru <b>9:</b> default to the same as <b>0:</b> but these may be changed as appropriate
in BTRS.INI, <a href="clientini.html#section.20drives">CLIENT.INI</a>, or 
<a href="serverini.html#section.20drives">SERVER.INI</a> in the 
<b>[DRIVES]</b> section there.</p>

<p> As these drives are tried by <b>ReducePath( )</b> in numerical order, Drive <b>9:</b> should be the 
most general one.</p>

<p>
<a href="#ExpandPath">ExpandPath( )</a> does the opposite job, of converting 
WinPCS local paths such as <b>0:\FLOC.DS1</b> into the proper full 
path including drive and directories. </p>

<h3>See Also:</h3>
<p>
<a href="#getinistring"> getinistring( ) </a>,<br/>
<a href="#stadlginistring">stadlginistring( )</a> <br/>
<a href="#ExpandPath">ExpandPath( )</a> <br/>
</p>

<p>
<a rel="up" href="#R"> ^ --R-- </a>
</p>

<!-- ================================= -->
<hr/><a name="reformat"></a> <h2>reformat</h2>

<h3>Function Name: reformat( ) -- RCONN 16 NCONN 32c TMGT 32s</h3>

<h3>Synopsis:</h3>
<pre><em>status</em><b> = reformat(</b><em>tablename</em><b>);</b></pre>

<h3>Description:</h3>
<p> This function clears out a table, by the Create Table function.
SQL systems do a Drop Table prior to the Create call, so the effect
is that after the function is successfully run, the table will exist
and be empty.  </p>

<h3>Return Value:</h3>
<p> A status value indicating success or failure. On Pervasive systems,
a common failure is that the table-file is being used by some other
process. </p>

<h3>Availability:</h3>
<p>Although useable for entire systems during maintenance or
early set-up, this function is otherwise meant to be used mostly 
for non-standard, temporary tables which are part of some local 
function and not generally used throughout
the entire system.  </p>

<p>Removing the contents of actively used tables is guaranteed to
cause confusion and despair...</p>

<h3>See Also:</h3>
<p>
<a href="#deletetag">deletetag( )</a> 
</p>

<p>
<a rel="up" href="#R"> ^ --R-- </a>
</p>

<!-- ================================= -->
<hr/><a name="RegCachedPath"></a> <h2>RegCachedPath</h2>

<h3>Function Name: RegCachedPath( ) -- RCONN 16 NCONN 32c</h3>
<h3>Synopsis:</h3>
<pre><em>exefilepath</em><b> = RegCachedPath(</b><em>extension</em><b>);</b></pre>

<h3>Description:</h3>
<p>
This function looks for the cached Registry information for the application
handling files of a given extension. </p>

<h3>Return Value:</h3>
<p>
The value cached in WinPCS or a blank string (length 0) if the 
search in the WinPCS cache failed. 
</p>

<h3>See Also:</h3>
<p>
<a href="#invoke2">invoke2( )</a> ,<br/>
<a href="#regextclass"> regextclass( ) </a>, <br/>
<a href="#regserver"> regserver( ) </a> ,<br/>
<a href="#RegPath"> RegPath( ) </a> , <br/>
<a href="#regexe">regexe( )</a> <br/>
</p>

<p>
<a rel="up" href="#R"> ^ --R-- </a>
</p>


<!-- ================================= -->
<hr/><a name="regexe"></a> <h2>regexe</h2>

<h3>Function Name: regexe( ) -- RCONN 16 NCONN 32c</h3>
<h3>Synopsis:</h3>
<pre><em>exefilepath</em><b> = regexe(</b><em>doctype</em><b>);</b></pre>

<h3>Description:</h3>
<p> This function looks for the registry key HKEY_CLASSES_ROOT/doctype/shell/open and returns the command found here. </p>

<p> This document-type could be the value returned from the <a href="#regextclass"> regextclass( ) </a> function.</p>

<p> For example, for document type <b>Excel.Sheet.8</b>, this could be something like 
<b>C:\Program Files\Microsoft Office\Office\Excel.exe</b></p>

<h3>Return Value:</h3>
<p>The value found in the Registry, or a blank string (length 0) if the search in the Registry failed. </p>

<h3>See Also:</h3>
<p>
<a href="#invoke2">invoke2( )</a> ,<br/>
<a href="#regextclass"> regextclass( ) </a>, <br/>
<a href="#regserver"> regserver( ) </a> ,<br/>
<a href="#RegCachedPath">RegCachedPath( )</a> ,<br/>
<a href="#RegPath"> RegPath( ) </a> <br/>
</p>

<p>
<a rel="up" href="#R"> ^ --R-- </a>
</p>

<!-- ================================= -->
<hr/><a name="regextclass"></a> <h2>regextclass</h2>

<h3>Function Name: regextclass( ) -- RCONN 16 NCONN 32c</h3>
<h3>Synopsis:</h3>
<pre><em>doctype</em><b> = regextclass(</b><em>extension</em><b>);</b></pre>

<h3>Description:</h3>
<p>Given an extension on a file, such as <b>.XLS</b>, this function looks in the Registry 
at HKEY_CLASSES_ROOT/extension, for the corresponding document type such as 
<b>Excel.Sheet.8</b></p>

<h3>Return Value:</h3>
<p>The (default) value of the HKEY_CLASSES_ROOT/extension if found. 
The return value is a blank string (length 0) if the search in the Registry failed. </p>

<h3>See Also:</h3>
<p><a href="#regserver"> regserver( ) </a>, <br/>
<a href="#invoke2">invoke2( )</a> ,<br/>
<a href="#RegPath"> RegPath( ) </a> ,<br/>
<a href="#regexe"> regexe( ) </a> <br/>
</p>

<p>
<a rel="up" href="#R"> ^ --R-- </a>
</p>

<!-- ================================= -->
<hr/><a name="regserver"></a> <h2>regserver</h2>

<h3>Function Name: regserver( ) -- RCONN 16 NCONN 32c</h3>
<h3>Synopsis:</h3>
<pre><em>appname</em><b> = regserver(</b><em>doctype</em><b>);</b></pre>

<h3>Description:</h3>
<p>This function looks for the registry key HKEY_CLASSES_ROOT/doctype/shell/open/ddeexec and returns the value of the
application element found there. 
</p>

<p> This document-type could be the value returned from the <a href="#regextclass"> regextclass( ) </a> function.
</p>

<p> For example, for document type <b>Excel.Sheet.8</b>, this could be something like 
<b>Excel</b>, which is the service name of the application useable for looking at this kind of documents. 
</p>

<h3>Return Value:</h3>
<p>The value found in the Registry, or a blank string (length 0) if the search in the Registry failed. 
</p>

<h3>See Also:</h3>
<p><a href="#regextclass"> regextclass( ) </a>, <br/>
<a href="#invoke2">invoke2( )</a> ,<br/>
<a href="#RegPath"> RegPath( ) </a> ,<br/>
<a href="#regexe"> regexe( ) </a> <br/>
</p>

<p>
<a rel="up" href="#R"> ^ --R-- </a>
</p>

<!-- ================================= -->
<hr/><a name="RegPath"></a> <h2>RegPath</h2>

<h3>Function Name: RegPath( ) -- RCONN 16 NCONN 32c </h3>
<h3>Synopsis:</h3>
<pre><em>commandline</em><b> = RegPath(</b><em>servername</em><b>);</b></pre>

<h3>Description:</h3>
<p>Looks up the cached information from the registry on the server name and returns the 
execution string for it. A list of cached servers names are found in the <em>Help/About/Res</em>
dialog box in WinPCS. </p>

<h3>See Also:</h3>
<p>
<a href="#invoke">invoke( ) </a>,<br/>
<a href="#invoke2">invoke2( )</a>,<br/>
<a href="#GetPath">GetPath( )</a>,<br/>
<a href="#regserver"> regserver( ) </a>, <br/>
<a href="#regexe"> regexe( ) </a> ,<br/>
<a href="#regextclass">regextclass( ) </a><br/>
</p>

<p>
<a rel="up" href="#R"> ^ --R-- </a>
</p>
<!-- ================================= -->
<hr/><a name="RemoteBack"></a> <h2>RemoteBack</h2>

<h3>Function Name: RemoteBack( ) -- TMGT 32s</h3>
<h3>Synopsis:</h3>
<pre><b>RemoteBack(</b><em>server</em><b>, </b><em>port</em><b>, </b><em>file</em><b>...);</b></pre>

<h3>Description:</h3>
<p>This transfers one or more <em>file</em> to a remote backup server, which
identified with the <em>server</em> name or address and port number <em>endpoint</em>.  
The file arguments may refer to a directory in which case all the contents of this will be
uploaded.  </p>

<h3>See Also:</h3>
<p>
<a href="#FilePut">FilePut( )</a> 
</p>


<p>
<a rel="up" href="#R"> ^ --R-- </a>
</p>

<!-- ================================= -->


<hr/><a name="RemoveDir"></a> <h2>RemoveDir</h2>

<h3>Function Name: RemoveDir( ) -- LCX 16 LCX 32s LCX 32c LCX 64</h3>
<h3>Synopsis:</h3>
<pre><em>code</em><b> = RemoveDir(</b><em>path</em><b>);</b></pre>

<h3>Description:</h3>
<p>Delete the directory identified as path, which must be empty. Returns a positive value on 
OK, -1 if an error occurred.</p>

<h3>See Also:</h3>
<p>
<a href="#DeleteFile"> DeleteFile( )</a> , 
<a href="#MakeDir"> MakeDir( )</a> 
</p>


<p>
<a rel="up" href="#R"> ^ --R-- </a>
</p>

<!-- ================================= -->

<hr/><a name="RepClose"></a> <h2>RepClose</h2>
<h3>Function Name: RepClose( ) -- VREP 32c TMGT 32s TMGT 64s</h3>
<h3>Synopsis:</h3>
<pre><b>RepClose(</b><em>reportident</em><b>);</b></pre>

<h3>Description:</h3>
<p>This function closes and deallocates a report-data structure as created by
the following functions:<br/>
<a href="#RepCreate">RepCreate( )</a>,<br/>
<a href="#ConSelect">ConSelect( )</a>,<br/>
<a href="#LCXFunctions">LCXFunctions( )</a>,<br/>
<a href="#RepDebug">RepDebug( )</a>,<br/>
<a href="#RepLoad">RepLoad( )</a>,<br/>
<a href="#RepServe">RepServe( )</a>,<br/>
<a href="#serverindex">serverindex( )</a>,<br/>
<a href="#serverindexdirect">serverindexdirect( )</a>,<br/>
<a href="#RepControl">RepControl( )</a> when this invokes a 
Q-report pushbutton or other similar action that generates a report. <br/>
</p>

<p>If there is a report on the client with a window open, 
this will also be closed.</p>

<p>It is important that the <b>RepClose()</b> function is called to
perform deallocation of all unwanted reports. Generally, all reports
created on the server-side should eventually be closed with 
<b>RepClose()</b>. </p>

<p>The exception to this are function generating a report that is 
shipped off to the client as returned values of functions called
via <a href="#ServerReport">ServerReport( )</a>. These reports will 
be deallocated by the server after the data has been moved off to 
the client. </p>

<p>On the client, reports may be stored
as global named values, using <a href="#GlobalDefine">GlobalDefine( )</a> 
in which case they must remain in existence.  On removing global names
from the system menu (system/globals) any associated reports will be 
deallocated.</p>

<h3>See Also:</h3>
<p>
<a href="#ConSelect">ConSelect( )</a>, <br/>
<a href="#RepCreate">RepCreate( )</a>,<br/>
<a href="#RepServe">RepServe( )</a>,<br/>
<a href="#LCXFunctions">LCXFunctions( )</a>,<br/>
<a href="#RepDebug">RepDebug( )</a>,<br/>
<a href="#RepLoad">RepLoad( )</a>,<br/>
<a href="#serverindex">serverindex( )</a>,<br/>
<a href="#serverindexdirect">serverindexdirect( )</a>,<br/>
<a href="#RepControl">RepControl( )</a>,<br/>
<a href="#GlobalDefine">GlobalDefine( )</a> <br/>
</p>

<p>
<a rel="up" href="#R"> ^ --R-- </a>
</p>
<!-- ================================= -->

<hr/><a name="repeat"></a> <h2>repeat</h2>

<h3>Function Name: repeat( ) -- LCX 16 LCX 32s LCX 32c LCX 64</h3>
<h3>Synopsis:</h3>
<pre><em>text</em><b> = repeat(</b><em>string</em><b>, </b><em>count</em><b>);</b></pre>

<h3>Description:</h3>
<p>The <b>repeat( )</b> function takes a string and a count and returns the string repeated count 
times.  This is most useful for generating dotted lines for printing in Reports or any other 
places where a repeated pattern is needed.</p>

<h3>See Also:</h3>
<p>
<a href="#format"> format( ) </a>, <br/>
<a href="#pow10"> pow10( ) </a> <br/>
</p>

<p>
<a rel="up" href="#R"> ^ --R-- </a>
</p>

<!-- ================================= -->
<hr/><a name="RepControl"></a> <h2>RepControl</h2>

<h3>Function Name: RepControl( ) -- RCONN 16 VREP 32c TMGT 32s TMGT 64s</h3>
<h3>Synopsis:</h3>
<pre><b>RepControl(</b><em>command</em><b>, </b><em>ident</em><b>);</b></pre>
<pre><b>RepControl(</b><em>command</em><b>)</b>(16-bit only, see note below)</pre>

<h3>Description:</h3>
<p>
Send some commands to a Report-structure or an open Report View. The identifier is used to refer to 
a full windowed report having been opened using 
<a href="#RepCreate">RepCreate( )</a>, or a report-data object
as obtained from <a href="#RepServe">RepServe( )</a> or <a href="#ConSelect">ConSelect( )</a>.
</p>

<p>On 16-bit systems, if the report reference is zero or missing, the 
function will apply to an already open Status Index Report.</p>

<p> <b>The commands that are available on all reports, windowed or not, are as follows:</b> </p>

<p><b>L:#</b><em>index</em>            
Behave as if there was a Click on the field indexed. 
The first field is <b>0</b>, the second one is <b>1</b> and so on; 
these are the same numbers as are being used for columns 
by <a href="#RepPut">RepPut( )</a> and <a href="#RepGet">RepGet( )</a>. </p>
<p>In order to select more than one field for sorting, repeat the 
<b>RepControl("L#</b><em>index</em><b>)</b> call for each field; note that ganging 
the commands together in a set, the way the postprocessing is specified done in the sections in
STAREP.INI entry "$postprocess=" is not supported here. (In fact, it is the other way around: 
the system reads and processes that set with the equivalent of repeated calls to RepControl().)</p>

<p><b>P:</b><em>name</em>      Has the effect of pushing the button identified 
as having command <em>name</em>. The following possibilities are defined in all reports, even
though there may not be any physical pushbuttons present: </p>

<p><b>P:DSORT</b>      Sort descending </p>

<p><b>P:ASORT</b>      Sort ascending </p>

<p><b>C:#</b><em>index</em><b>:</b><em>string</em> Set the column-title (legend) of the indexed column to
the value of the string given. </p>

<p><b>C:A:</b><em>set</em> Set all the column titles to the values of the set, one element for each column.</p> 

<p><b>C:R:</b><em>set</em> Set all the column titles to the values of the set, one element for each column, 
but only the ones where there is some text in the corresponding element in the set. Where the corresponding
set element is blank (as per the 
<a href="#notext">notext( )</a> 
function) the previous legend is left unchanged.</p>

<p>After the column-legends have been set, they can be read back via
<a href="#RepInfo">RepInfo</a> <b>("legend </b><em>index</em><b>", ...)</b> .  </p>

<p>Note that status index reports on the server will already have some legends defined, so there is no
need for setting them. They may be changed however. </p>

<p> <b>The commands that are only meaningful on the windowed reports, are as follows. 
For non-windowed reports, all these are no-ops:</b> </p>

<p><b>E:</b><em>string</em> Change the extra parameter to the given string. This may be done to a report
when it has been created, and its value can later be read via a call to 
<a href="#RepInfo"><b>RepInfo("extra",</b><em>Report</em><b>)</b></a>. This is also what will
appear as the argument <em>arguments</em> in the <a href="call0010.html#repformat"> formatting function</a>. </p>

<p><b>W:#0</b>         Hide the Report Window </p>

<p><b>W:#1</b>         Show the Report Window </p>

<p><b>T:</b><em>text</em>      Set Title text to the <em>text</em>. 
Use <b>T:#2</b> to set the title equal for the header 
and <b>T:#3</b> for title equal to the footer </p>

<p><b>H:</b><em>text</em>      Set Header text to the <em>text</em>. 
Use <b>H:#1</b> to set the header equal for the title 
and <b>H:#3</b> for header equal to the footer </p>

<p><b>F:</b><em>text</em>      Set Footer text to the <em>text</em>. 
Use <b>F:#1</b> to set the footer equal to the title 
and <b>F:#2</b> for footer equal to the header.  </p>

<p><b>P:EXIT</b>       Close the Report View.  </p>

<p><b>P:PREVIEW</b>    Run Print Preview </p>

<p><b>P:REMOVE</b>     Remove a record </p>

<p><b>P:SEARCH</b>     Issue a search command </p>

<p><b>P:REGED</b>      Run Regedit </p>

<p><b>P:EXCEL</b>      Transfer to Excel </p>

<p><b>P:WWORD</b>      Transfer to Word </p>

<p><b>P:DOSAVE</b>     Save the data in a text file </p>

<p><b>P:PRTVERT</b>    Print the data right away </p>

<p><b>P:GANGCON</b>    Gang Connect</p>

<p> If the Report refers to a Status Index report, 
the <b>P:FORALL</b>, <b>P:QREPORT</b><em>xxx</em> 
and <b>P:LCXCALL</b><em>xxx</em> may also be 
available if defined in STAREP.INI.</p>

<h3>NOTE:</h3>
<p>For future compatibility, the 16-bits variants that do not take any identifier argument, 
except for 
<a href="#RepInfo">RepInfo</a><b>("ident")</b>
, should not be used. Where no Report ID parameter is supplied, 
<a href="#RepInfo">RepInfo</a><b>("ident")</b>
may be used to obtain a valid identifier for subsequent use.</p>

<h3>See Also:</h3>
<p>
<a href="#RepCreate"> RepCreate( )</a>,<br/>
<a href="#RepPut"> RepPut( )</a> , <br/>
<a href="#RepRefresh"> RepRefresh( )</a>, <br/>
<a href="#statusindex">statusindex( )</a> ,<br/>
<a href="#statusindexdirect">statusindexdirect( )</a> ,<br/>
<a href="#statusindexjor">statusindexjor( )</a> <br/>
<a href="#statusindexupward">statusindexupward( )</a> <br/>
<a href="#varSI"> varSI( )</a>   ,<br/>
<a href="#RepServe"> RepServe( )</a>   ,<br/>
<a href="#ConSelect"> ConSelect( )</a>   ,<br/>
<a href="#RepInfo"> RepInfo( )</a><br/>
</p>

<p>
<a rel="up" href="#R"> ^ --R-- </a>
</p>
<!-- ================================= -->
<hr/><a name="RepCopy"></a> <h2>RepCopy</h2>
<h3>Function Name: RepCopy( ) -- VREP 32c</h3>
<h3>Synopsis:</h3>
<pre><b>RepCopy(</b><em>FromReport</em><b>, </b><em>ToReport</em><b>);</b></pre>
<pre><b>RepCopy(</b><em>FromReport</em><b>, </b><em>ToReport</em><b>, </b><em>columnsalinementset</em><b>);</b></pre>

<h3>Description:</h3>
<p>This function allows the data of a report to be copied wholesale from one data-set to another. </p>

<p>Typically,
the <em>FromReport</em> is obtained from 
<a href="#ConSelect">ConSelect( )</a> ,
<a href="#RepServer ">RepServer ( )</a> , or
<a href="#ServerReport">ServerReport( )</a> and the data is desired to be shown in a visible report, 
<em>ToReport</em>, to which most of the data simply is to be copied across. 
It is possible to do this with a loop containing 
<a href="#RepGet">RepGet( )</a> , <a href="#RepPut">RepPut( )</a> , and <a href="#RepCordon">RepCordon( )</a> ,
but this tends to be tedious and makes the code less maintainable.  Thus the motivation for the
<b>RepCopy( )</b> function </p>

<p>The variant with 2 arguments simply copies data in columns in the same position. Only columns allocated
or defined in both reports are copied, and they are expected to appear in the same order. This can be
changed by adding the third argument, which is a set of column numbers in the <em>FromReport</em> dataset to be
copied to the corresponding positions in the <em>ToReport</em> dataset. </p>

<p>All the rows are copied, and the <em>ToReport</em> will be extended as needed.</p>

<h3>Example:</h3>
<p>This function takes a report-data set as obtained from the server using 
ConSelect
and displays it as a visible report.</p>

<pre>
disciplinereport()
{
    string vpx, Report;

    vpx = ConSelect("REFDISP", makeset("DISCIPLINE", "DESCRIPTION"), 
        "COMPLETION==@Y@", "", "");

    Report = RepCreate("Disciplines", "P", "formats.lcx", "formatfunction", 
        makeset("CA", "Disp", 10, "Descr", 40)); 

    RepCopy(vpx, Report);
    return(0);
}
</pre>

<h3>See Also:</h3>
<p>
<a href="#RepCreate"> RepCreate( )</a>,<br/>
<a href="#RepGet">RepGet( )</a> ,<br/>
<a href="#RepPut">RepPut( )</a> ,<br/>
<a href="#ConSelect">ConSelect( )</a> ,<br/>
<a href="#RepServer">RepServer( )</a> ,<br/>
<a href="#ServerReport">ServerReport( )</a> <br/>
</p>


<p>
<a rel="up" href="#R"> ^ --R-- </a>
</p>
<!-- ================================= -->
<hr/><a name="RepCordon"></a> <h2>RepCordon</h2>

<h3>Function Name: RepCordon( ) -- RCONN 16 VREP 32c TMGT 32s TMGT 64s</h3>
<h3>Synopsis:</h3>
<pre><em>count</em><b>= RepCordon(</b><em>count</em><b>, </b><em>identifier</em><b>);</b></pre>
<pre><em>count</em><b>= RepCordon(</b><em>count</em><b>)</b>(16-bit only, see note below)</pre>

<h3>Description:</h3>
<p>Insert <em>count</em> (one or more) additional records (lines) into a Report View or Report Data Set
at the current insert location. The <em>identifier</em> is used to refer to reports created 
by <a href="#RepCreate">RepCreate( )</a>. If this is zero 
or missing, the report is expected to be an Status Index.</p>

<h3>Return Value:</h3>
<p>The number of extra records allocated. </p>

<h3>NOTE:</h3>
<p>For future compatibility, the variants that do not take any identifier argument, 
except for 
<a href="#RepInfo">RepInfo</a><b>("ident")</b>
, should not be used. Where no Report ID parameter is supplied, 
<a href="#RepInfo">RepInfo</a><b>("ident")</b>
may be used to obtain a valid identifier for subsequent use.</p>

<h3>See Also:</h3>
<p>
<a href="#RepPut"> RepPut( )</a> , <br/>
<a href="#RepRefresh"> RepRefresh( ) </a>, <br/>
<a href="#RepCreate"> RepCreate( ) </a> ,<br/>
<a href="#RepServe"> RepServe( ) </a> ,<br/>
<a href="#ConSelect"> ConSelect( ) </a> <br/>
</p>

<p>
<a rel="up" href="#R"> ^ --R-- </a>
</p>

<!-- ================================= -->
<hr/><a name="RepCreate"></a> <h2>RepCreate</h2>

<h3>Function Name: RepCreate( ) -- RCONN 16 VREP 32c</h3>
<h3>Synopsis:</h3>

<pre><em>ident</em><b> = RepCreate(</b><em>title</em><b>, </b><em>orientation</em><b>, </b><em>formfile</em><b>, </b><em>formfunction</em><b>, </b><em>columnorbuttoninfo1</em><b>, </b><em>columnorbuttoninfo2</em><b>, ...);</b></pre>

<h3>Description:</h3>
<p> <b>RepCreate( )</b> creates a report view, containing the columns specified in the <em>columninfo</em> 
arguments, and sticks a single blank line into it. The title of the Report Window is given 
by the <em>title</em> argument.</p>

<p> For purposes of printing, the <em>orientation</em> argument is set to <b>L</b> for Landscape and <b>P</b> for 
Portrait, or one of the numerical values for other paper sizes and orientations, as listed under 
<a href="#unicert">unicert( )</a>. The <em>formfiles</em> and <em>formfunction</em> define a formatting 
function and the file where this function is located.</p>

<p> The returned value identifies a report and it is meant to be used in subsequent calls to 
<a href="#RepCordon"> RepCordon( )</a> , <a href="#RepPut"> RepPut( )</a> , <a href="#RepGet"> RepGet( )</a> , 
<a href="#RepRefresh"> RepRefresh( )</a> , and <a href="#RepInfo"> RepInfo( )</a>  to identify the 
active Report Window. More than one Report may be opened at any one time, and each 
will have its own different identifier.</p>

<p> Each column is specified by a columninfo argument, which in turn is made up of the 
legend and the column width. In addition, specifications for pushbuttons can be given here.
The following commands are known:</p>

<table border="1"> <tbody>

<tr valign="top">
<td>Synopsis</td>
<td>Description</td>
</tr>

<tr valign="top">
<td><b>makeset("CI", </b><em>legend</em><b>, </b><em>width</em><b>)</b></td>
<td>Insert one column with given legend and width</td>
</tr>

<tr valign="top">
<td>
<b>makeset("CA", </b><em>legend</em><b>, </b><em>width</em><b>, </b><em>legend</em><b>, </b><em>width</em><b>, ... )</b>
</td>
<td>Insert several columns with given legends and widths.</td>
</tr>

<tr valign="top">
<td>
<b>makeset("PB", </b><em>legend</em><b>, </b><em>tail</em><b>)</b>
</td>
<td>Add a pushbutton with details given in the argument. More on these below.</td>
</tr>

<tr valign="top">
<td>
<b>makeset("PX", </b><em>list of names</em><b>)</b>
</td>
<td>Omit predefined pushbuttons as they are defined in the <a href="evini.html">VIEW.INI</a> file. The
default ones are removed, and new ones with the same names and presumably
different function can be added with PB and will not be removed.</td>
</tr>

<tr valign="top">
<td>
<b>makeset("CS", </b><em>icon</em><b>, </b><em>fieldlegend</em><b>, </b><em>width</em><b>)</b>
</td>
<td>Add a Selection Y/N field, that allows for control of FORALL2 pushbuttons. This field will become the
last of the fields defined, and it will start out as a locked field. To populate it, it should be filled
with the Y or N values at the time the report is generated just like other fields.</td>
</tr>

<tr valign="top">
<td>
<b>makeset("PB", </b><em>legend</em><b>, "FORALL2 (</b><em>tail</em><b>)</b><em>file function</em><b>)</b>
</td>
<td>This defines the FORALL2 button that uses the above defined field, and will be called according to
the same rules as the FORALL2 functions defined in STAREP.INI reports.
See the information on <a href="call0013.html">FORALL-functions in Reports</a> for details 
of these argument lists.  </td>
</tr>

</tbody> </table>

<p>Other codes than these above will not generate or affect any
columns or pushbuttons, but in the future it may be expected that other structures and 
features of the Report may also be determined by these arguments.</p>

<p> The pushbutton insertion requests would typically look like:</p>
<pre><b>
makeset("PB", "XYZ", "LCXCALL 0 (Run another macro function) somefile.lcx FunctionHere arguments-tail")
makeset("PB","CalcX", "QREPORT1 1 (SubSystem Discipline) QPLSYS S:1 L:5 G:8,8")
</b></pre>

<p> These functions the same as LCXCALL pushbuttons defined in STATREES.INI, see the 
SI, View, and Entry buttons in 
<a href="call3206.html"> Category 6 </a> for these.
At the moment, LCXCALL and QREPORT buttons may be defined, others might be available, but haven't been tested. 
These may also be pushed automatically as part of <a href="#RepControl">RepControl( )</a> operations.</p>

<h3>Return Value:</h3>
<p>The return value identifies the report window. It is zero if no Report could be opened.</p>

<h3>Example:</h3>
<p>This code creates a report with 3 columns, adds a pushbutton and its
action function, and omits the commands for gang connect and gang disconnect, 
which have the names Ccon1 Ccon2 and BREAK2. 
The file where this is located is expected to be called
<tt>report.lcx</tt></p>

<pre>

RepExample()
{
    string Report, jr;

    Report = RepCreate("Some Report", "L", "rpage2.lcx", "printpage",
        <a href="#makeset">makeset</a>("CI", "System.", 15),
        <a href="#makeset">makeset</a>("CI", "Subsystem", 20),
        <a href="#makeset">makeset</a>("CI", "Description", 30),
        <a href="#makeset">makeset</a>("PB", "HEI", "LCXCALL 0 (action) 0:\report.lcx krltest hallotail"),
        <a href="#makeset">makeset</a>("PX", "Ccon2 Ccon1 BREAK2") );  

    <a href="#CounterHere">CounterHere</a>("ITP Report", 3);

    for(jr = 0; jr&lt;100; jr+=1)
    {
        if(jr != 0)
        {
            <a href="#RepCordon">RepCordon</a>(1, Report); 
        }
        
        <a href="#RepPut">RepPut</a>(-1, 0, <a href="#concat">concat</a>("system ", jr), Report);
        <a href="#RepPut">RepPut</a>(-1, 1, <a href="#concat">concat</a>("subsystem ", jr), Report);
        <a href="#RepPut">RepPut</a>(-1, 2, <a href="#concat">concat</a>("description ", jr), Report);
        <a href="#CounterStep">CounterStep( )</a> ;
    }

    <a href="#CounterAway">CounterAway( )</a> ;
    <a href="#RepRefresh">RepRefresh</a>(Report);
    return(0);
}


krltest(string tail, string Report)
{
    string title, records;

    records = <a href="#RepInfo">RepInfo</a>("rows", Report); 
    title = <a href="#RepInfo">RepInfo</a>("title", Report); 

    <a href="#message">message</a>(<a href="#Predefined.20Constants">__HERE__</a>, "We have ", records, " in the report ", title); 

    return(0);
}
</pre>




<h3>See Also:</h3>
<p>
<a href="#RepCordon"> RepCordon( ) </a>,<br/>
<a href="#RepPut"> RepPut( )</a> , <br/>
<a href="#RepGet"> RepGet( )</a> , <br/>
<a href="#RepRefresh"> RepRefresh( ) </a>, <br/>
<a href="#RepInfo"> RepInfo( ) </a>,<br/>
<a href="#RepCopy">RepCopy( )</a> ,<br/>
<a href="#RepControl"> RepControl( ) </a>,<br/>
<a href="#unicert">unicert( )</a> <br/><br/>
<a href="call3206.html#Cat6432"> Report-buttons LCXCALL handling functions</a> <br/>
</p>

<p>
<a rel="up" href="#R"> ^ --R-- </a>
</p>
<!-- ================================= -->
<hr/><a name="RepDebug"></a> <h2>RepDebug</h2>

<h3>Function Name: RepDebug( ) -- NCONN 32c TMGT 32s</h3>
<h3>Synopsis:</h3>

<pre><em>visiblereport</em><b> = RepDebug(</b><em>title</em><b>, </b><em>identifier</em><b>, </b><em>info</em><b>);</b></pre>

<h3>Description:</h3>
<p>This function takes a report data structure and generates a visible report window with
the same contents as this data structure. As the function name suggests, this is
mostly for debugging purposes, as there is little control of the visual aspects of 
this visible report. Use <a href="#RepCopy">RepCopy( )</a> 
into an empty report created with <a href="#RepCreate">RepCreate( )</a> 
in order to get this control over field-legends and pushbuttons.</p>

<p>The first argument, <em>title</em> can be the <b>__HERE__</b> indicator,
so that the location of the <b>RepDebug( )</b> call is easily found and the 
statement commented out when no longer needed, similar to how
<a href="#message">message( )</a> 
and
<a href="#trace">trace( )</a> 
calls are used.</p>

<p>The returned value is the identifier for this visible report, which can be manipulated further with 
<a href="#RepControl">RepControl( )</a> calls if so desired, just like all other such report.</p>

<h3>See Also:</h3>
<p>
<a href="#serverindex">serverindex( )</a> , <br/>
<a href="#serverindexdirect">serverindexdirect( )</a> , <br/>
<a href="#ServerReport">ServerReport( )</a> , <br/>
<a href="#RepServe">RepServe( )</a> ,<br/>
<a href="#RepCopy">RepCopy( )</a> ,<br/>
<a href="#RepCreate">RepCreate( )</a> ,<br/>
<a href="#ConSelect">ConSelect( )</a> <br/>
</p>

<p>
<a rel="up" href="#R"> ^ --R-- </a>
</p>
<!-- ================================= -->
<hr/><a name="RepGet"></a> <h2>RepGet</h2>

<h3>Function Name: RepGet( ) -- RCONN 16 VREP 32c TMGT 32s TMGT 64s</h3>
<h3>Synopsis:</h3>

<pre><em>value</em><b> = RepGet(</b><em>row</em><b>, </b><em>column</em><b>, </b><em>identifier</em><b>);</b></pre>
<pre><em>value</em><b> = RepGet(</b><em>row</em><b>, </b><em>column</em><b>)</b> (16-bit only, See note below)</pre>

<h3>Description:</h3>
<p>The <b>RepGet( )</b> functions reads the value in a cell in a report view or report data set. 
The <em>row</em> is <b>-1</b> for the most recent one, <b>-2</b> for the next most recent one and so on. 
The <em>identifier</em> is used to refer to a report created with 
<a href="#RepCreate">RepCreate( )</a>.  
If this is zero or nonexistent on 16-bit systems, the report is expected to be an 
active Status Index. On 32-bit systems, the functions
<a href="#SIRepGet">SIRepGet( )</a>  and <a href="#SIRepPut">SIRepPut( )</a> 
have to be used instead of <b>RepGet( )</b>  and
<a href="#RepPut">RepPut( )</a> inside Status Index Reports.</p>

<h3>Warning: </h3>
<p>Illegal values of <em>row</em> or <em>identifier</em> may lead to crashes. Use 
<a href="#RepInfo">RepInfo("rows", Report)</a>  to determine range of row numbers.  Note that these in 
most cases will have to be scanned in a loop such as:</p>

<pre><b>
rcount = RepInfo("rows", </b><em>identifier</em><b>);
for(row = -rcount; row &lt; 0; row+=1)
{
    value = RepGet(row, </b><em>column</em><b>, </b><em>identifier</em><b>);
    /* ... */
}
</b> </pre>

<h3>NOTE:</h3>
<p>For future compatibility, the variants that do not take any identifier argument, 
except for 
<a href="#RepInfo">RepInfo</a><b>("ident")</b>
, should not be used. Where no Report ID parameter is supplied, 
<a href="#RepInfo">RepInfo</a><b>("ident")</b>
may be used to obtain a valid identifier for subsequent use.</p>

<h3>See Also:</h3>
<p>
<a href="#RepPut">RepPut( )</a> ,
<a href="#RepInfo">RepInfo( )</a> ,
<a href="#RepServe">RepServe( )</a> ,
<a href="#ConSelect">ConSelect( )</a> ,
<a href="#SIRepGet">SIRepGet( )</a> ,
<a href="#SIRepPut">SIRepPut( )</a> 
</p>

<p>
<a rel="up" href="#R"> ^ --R-- </a>
</p>
<!-- ================================= -->
<hr/><a name="RepInfo"></a> <h2>RepInfo</h2>

<h3>Function Name: RepInfo( ) -- RCONN 16 VREP 32c TMGT 32s TMGT 64s</h3>
<h3>Synopsis:</h3>
<p>All reports:</p>
<pre><em>count</em><b> = RepInfo("rows", </b><em>identifier</em><b>);</b></pre>
<pre><em>count</em><b> = RepInfo("cols", </b><em>identifier</em><b>);</b></pre>
<pre><em>text</em><b> = RepInfo("legend </b><em>index</em><b>", </b><em>identifier</em><b>);</b></pre>
<pre><em>set</em><b> = RepInfo("legendset", </b><em>identifier</em><b>);</b></pre>
<pre><em>status</em><b> = RepInfo("isempty", </b><em>identifier</em><b>);</b></pre>
<p>All visible reports with a window:</p>
<pre><em>name</em><b> = RepInfo("base", </b><em>identifier</em><b>);</b></pre>
<pre><em>text</em><b> = RepInfo("title", </b><em>identifier</em><b>);</b></pre>
<pre><em>text</em><b> = RepInfo("extra", </b><em>identifier</em><b>);</b></pre>
<pre><em>rowset</em><b> = RepInfo("selection rows", </b><em>identifier</em><b>);</b></pre>
<pre><em>colset</em><b> = RepInfo("selection cols", </b><em>identifier</em><b>);</b></pre>
<pre><em>count</em><b> = RepInfo("selection count", </b><em>identifier</em><b>);</b></pre>
<pre><em>cellset</em><b> = RepInfo("selection cells", </b><em>identifier</em><b>);</b></pre>
<p>All status index reports:</p>
<pre><em>text</em><b> = RepInfo("param </b><em>pname</em><b>", </b><em>identifier</em><b>);</b></pre>
<pre><em>status</em><b> = RepInfo("ready", </b><em>identifier</em><b>);</b></pre>
<p>All Qreports:</p>
<pre><em>sireport</em><b> = RepInfo("qreport-origin", </b><em>identifier</em><b>);</b></pre>
<p>16-bit reports only:</p>
<pre><em>identifier</em><b> = RepInfo("ident");</b></pre>

<h3>Description:</h3>
<p>This function returns various information about a report, such as the number or rows or columns, 
or the title or selections made, or other interesting properties and features.</p>

<p>All reports have information about the total number of rows and columns.
Reports that have a window also support a number of visual details, such as selections of
rows and columns, and the title and legend strings. In addition, status index reports may
have parameters defined in STAREP.INI which can be read through LCX. </p>

<p>Returned row and colum numbers for selections are within the valid ranges of the row 
and column arguments of the <a href="#RepPut">RepPut( ) </a>
and <a href="#RepGet">RepGet( ) </a> functions.  
</p>

<p>The argument <em>identifier</em> refers to the Report handle, which on the 32-bit systems
is supplied in the argument list or produced by
<a href="#RepCreate">RepCreate( )</a> , 
<a href="#RepServe">RepServe( )</a> , 
<a href="#ConSelect">ConSelect( )</a> , or
<a href="#ServerReport">ServerReport( )</a>. On 16-bit systems, the call
<b>RepInfo("ident")</b> can be used to return this handle when it isn't known. </p>

<h3>Return values:</h3>
<p><b>RepInfo("rows", </b><em>identifier</em><b>)</b><br/>
Returns the number of rows in the report. Note that the row numbers used 
by <a href="#RepGet">RepGet( )</a> and <a href="#RepPut">RepPut( )</a> 
are negative, so the usual for-loop going through the report will have to be, where
<b><tt>rcount</tt></b> is the returned value from <b>RepInfo("rows" ...)</b>:</p>

<pre><b>for(row = -rcount; row &lt; 0; row+=1) </b></pre>

<p><b>RepInfo("cols", </b><em>identifier</em><b>)</b><br/>
Returns the number of columns in the report.  </p>

<p><b>RepInfo("isempty", </b><em>identifier</em><b>);</b><br/>
Returns 0 if the report has any nonblank data in it, and 1 if the report has 0
rows, or all blank rows.</p>

<p><b>RepInfo("base", </b><em>identifier</em><b>)</b><br/>
Returns the name of the table behind the report. For SI reports or programmed reports this
value is something else.  </p>

<p><b>RepInfo("title", </b><em>identifier</em><b>)</b><br/>
Returns the title of the Report. To change this, use
<a href="#RepControl">RepControl(<b>"T:</b><em>text</em><b>"</b>,<em>identifier</em>)</a> </p>

<p><b>RepInfo("legend </b><em>index</em><b>", </b><em>identifier</em><b>)</b><br/>
Return the legend title of a column numbered <em>index</em>. These begin at 0 on the left and
run upwards to the right. Do not forget the space between the keyword <b>"legend"</b> and the 
column index following. <b>"legend2"</b> is not understood as a keyword, it should 
be <b>"legend 2"</b>.  Some non-windowed reports ("naked reports") also have legend strings
associated with them. </p>

<p><b>RepInfo("legendset", </b><em>identifier</em><b>)</b><br/>
Returns a set containing the legends for all the fields in one go. </p>


<p><b>RepInfo("extra", </b><em>identifier</em><b>)</b><br/>
This returns the extra-data that was included in Status Index reports when the report was created, or
set or changed using
<a href="#RepControl">RepControl(<b>"E:</b><em>value</em><b>"</b> ,<em>identifier</em>)</a>.  </p>

<p><b>RepInfo("selection rows", </b><em>identifier</em><b>)</b><br/>
This returns a set of all rows where one or more selections are made. The row numbers are the 
negative ones suitable for use with 
<a href="#RepGet">RepGet( )</a> .  </p>

<p><b>RepInfo("selection cols", </b><em>identifier</em><b>)</b><br/>
This returns a set of all columns where a selection is made. </p>

<p><b>RepInfo("selection count", </b><em>identifier</em><b>)</b><br/>
This returns the number of cells where a selection is made. </p>

<p><b>RepInfo("selection cells", </b><em>identifier</em><b>)</b><br/>
This returns the set of coordinates of all the cells where a selection is made. 
There are two elements per cell, the first one is a row number, the second one
is the column number, both suitable for direct use with
<a href="#RepGet">RepGet( )</a> </p>

<p><b>RepInfo("param </b><em>pname</em><b>", </b><em>identifier</em><b>)</b><br/>
For SI reports, this returns the right hand side of the 
<b>$param </b><em>pname</em><b>=</b>
entry for this report as it was defined in STAREP.INI. 
As is the case for <b>"legend"</b> above, there must be at least one space after the word
<b>"param"</b> and the name.  </p>

<p><b>RepInfo("ready", </b><em>identifier</em><b>)</b><br/>
For SI reports, this returns 0 while the SI-report is being produced, and 1
once the SI-report is finished and it makes sense to look for data in it.
</p>

<p><b>RepInfo("qreport-origin", </b><em>identifier</em><b>);</b><br/>
For Q-reports, this returns the report identifier of the SI report that the Qreport has started from. 
Further calls to <b>RepInfo( )</b> or other report-functions can be done using that identifier. 
Since this refers to a status index report, all the information strings for this is
available.</p>

<p><b>RepInfo("ident")</b><br/>
For 16-bit systems, this returns the report-handle when it is not otherwise specified. All 32-bit
functions called from any report has the report handle passed as one of their arguments.
See the documentations in 
<a href="call3206.html#Cat6234">LCXCALL in Reports</a> and 
<a href="call0013.html">FORALL-functions in Reports</a> for these argument lists.  </p>

<h3>Example:</h3>

<p>This is called from a pushbutton in STAREP.INI, defined as:</p>
<pre>
$button Test=LCXCALL 0 (Test selections) KRLTest Ikkeno
</pre>

<pre>
KRLTest(string tail, string Report, string Rootbase, string Leaf)
{
    string sc, rowz, colz, cellz;
    string j, j2, row, col, z;

    message(__HERE__, "Report = ", Report);

    sc = RepInfo("selection count", Report);
    rowz = RepInfo("selection rows", Report);
    colz = RepInfo("selection cols", Report);
    cellz = RepInfo("selection cells", Report);

    message(__HERE__, "Selected ", sc,
        " cells\x0a Rows: ", rowz,
        "\x0a Columns: ", colz,
        "\x0a Cells: ", cellz );

    z = "";
    for(j = 0;j&lt;sc; j+=1)
    {
        j2 = j+j;
        row = setitem(cellz, j2);
        col = setitem(cellz, j2+1);
        z = concat(z, makeset(
            concat("At ", row, ",", col, ": ", RepGet(row, col, Report), "\x0a ")
            ));
    }

    message(__HERE__, "stuff selected\x0a ", z);
    return(0);
}


</pre>



<h3>See Also:</h3>
<p>
<a href="#RepPut"> RepPut( )</a> , 
<a href="#RepGet"> RepGet( )</a> , 
<a href="#RepControl"> RepControl( ) </a>,
<a href="#RepCopy">RepCopy( )</a> ,
<a href="#ConSelect"> ConSelect( ) </a>,
<a href="#RepServe"> RepServe( ) </a>,
<a href="#RepCreate">RepCreate( )</a> , 
<a href="#ServerReport">ServerReport( )</a>.
</p>
<p>
<a rel="up" href="#R"> ^ --R-- </a>
</p>

<!-- ================================= -->
<hr/><a name="replace"></a> <h2>replace</h2>
<h3>Function Name: replace( ) -- LCX 32s LCX 32c LCX 64 </h3>

<h3>Synopsis:</h3>
<pre><em>newtext</em><b> = replace(</b><em>oldtext</em><b>, </b><em>olditem</em><b>, </b><em>newitem</em><b>);</b></pre>

<h3>Description:</h3>
<p>This function takes an existing text, <em>oldtext</em> , and replaces all occurrences 
of the string <em>olditem</em> in it with the string <em>newitem</em>. </p>

<p>These may be single characters or multi-character strings, the <em>newitem</em> may
be a zero-length string as well, and the function does a single pass. So if the 
<em>olditem</em> is a substring of the <em>newitem</em> as in</p>

<pre><b>replace("hello", "l", "lz");</b></pre>

<p>this will still work properly. The above will give <b>helzlzo</b> as the output. </p>

<h3>See Also:</h3>
<p>
<a href="#tabtoset">tabtoset( )</a> 
<a href="#csvtoset">csvtoset( )</a> 
</p>

<p>
<a rel="up" href="#R"> ^ --R-- </a>
</p>

<!-- ================================= -->
<hr/><a name="RepLoad"></a> <h2>RepLoad</h2>

<h3>Function Name: RepLoad( ) -- VREP 32c TMGT 64s TMGT 32s </h3>
<h3>Synopsis:</h3>
<pre><em>Report</em><b> = RepLoad(</b><em>filename</em><b>);</b></pre>

<h3>Description:</h3>
<p>This function reads a CSV file and returns the contents of it as a Report. The legend row of the
CSV file is stored as internal legends in the Report, so 
<a href="#RepInfo">RepInfo("legend <em>index</em>", Report))</a> will return the legend for the
indexed field. </p> 

<h3>Return Value:</h3>
<p>A Report structure containing the file that was read and loaded.  </p>

<h3>See Also:</h3>
<p>
<a href="#RepServe">RepServe( )</a> ,
<a href="#RepStore">RepStore( )</a> ,
<a href="#RepInfo">RepInfo( )</a> ,
<a href="#RepGet">RepGet( )</a> 
</p>

<p>
<a rel="up" href="#R"> ^ --R-- </a>
</p>

<!-- ================================= -->
<hr/><a name="RepPut"></a> <h2>RepPut</h2>

<h3>Function Name: RepPut( ) -- RCONN 16 VREP 32c TMGT 64s</h3>
<h3>Synopsis:</h3>
<pre><em>value</em><b> = RepPut(</b><em>row</em><b>, </b><em>column</em><b>, </b><em>value</em><b>, </b><em>identifier</em><b>);</b></pre>
<pre><em>value</em><b> = RepPut(</b><em>row</em><b>, </b><em>column</em><b>, </b><em>value</em><b>) </b>(16-bit only, see note below)</pre>

<h3>Description:</h3>
<p>Put the value in a cell in a report view or report data set 
under construction. The row is <b>-1</b> for the most 
recent one, <b>-2</b> for the next most recent one and so on. The <em>identifier</em> is used to refer to a 
report created with 
<a href="#RepCreate">RepCreate( )</a> ; if zero or nonexistent on 16-bit systems, the report is expected to be a 
Status Index.</p>

<p>
<a href="#RepRefresh">RepRefresh( )</a>  must be called to update the 
visuals of the report. The reason for not updating the report automatically is 
that usually a large number of <b>RepPut( )</b> calls are 
done, and this would cause intolerable flashing. Then there are the reports that have no
windows and are merely naked data-sets. For these, the <a href="#RepRefresh">RepRefresh( )</a> 
function does not have any meaning at all. </p>

<p>If the Report reference is zero or nonexistent on 16-bit systems, the report is expected to be an 
active Status Index. On 32-bit systems, the functions
<a href="#SIRepGet">SIRepGet( )</a>  and <a href="#SIRepPut">SIRepPut( )</a> 
have to be used instead of <a href="#RepGet">RepGet( )</a>  and
<b>RepPut( )</b> inside Status Index Reports. </p>

<h3>Warning: </h3>
<p>Illegal values of row may lead to crashes. Use <a href="#RepInfo">RepInfo( )</a>  to get the boundaries.</p>

<h3>NOTE:</h3>
<p>For future compatibility, the variants that do not take any identifier argument, 
except for 
<a href="#RepInfo">RepInfo</a><b>("ident")</b>
, should not be used. Where no Report ID parameter is supplied, 
<a href="#RepInfo">RepInfo</a><b>("ident")</b>
may be used to obtain a valid identifier for subsequent use.</p>

<h3>Return Value:</h3>
<p>The value being put into the view.</p>

<h3>See Also:</h3>
<p>
<a href="#RepGet">RepGet( )</a> , 
<a href="#RepWidth">RepWidth( ) </a>, 
<a href="#RepCreate">RepCreate( )  </a>, 
<a href="#RepRefresh">RepRefresh( ) </a> ,
<a href="#RepInfo">RepInfo( )</a> ,
<a href="#RepServe">RepServe( )</a> ,
<a href="#ConSelect">ConSelect( )</a> ,
<a href="#SIRepGet">SIRepGet( )</a> ,
<a href="#SIRepPut">SIRepPut( )</a> 
</p>

<p>
<a rel="up" href="#R"> ^ --R-- </a>
</p>

<!-- ================================= -->
<hr/><a name="RepRefresh"></a> <h2>RepRefresh</h2>

<h3>Function Name: RepRefresh( ) -- RCONN 16 VREP 32c</h3>
<h3>Synopsis:</h3>
<pre><b>RepRefresh(</b><em>identifier</em><b>);</b></pre>
<pre><b>RepRefresh( )</b>  (16-bit only, see note below)</pre>

<h3>Description:</h3>
<p><b>RepRefresh( )</b> causes an active report to be redrawn, showing changes done as a 
consequence of <a href="#RepCordon">RepCordon( )</a>  and 
<a href="#RepPut">RepPut( )</a>.  The identifier is used to refer to a report 
having been opened using <a href="#RepCreate">RepCreate( )</a> , or if this is zero or missing, the function will 
apply to an already open Status Index Report.</p>

<h3>NOTE:</h3>
<p>For future compatibility, the variants that do not take any identifier argument, 
except for 
<a href="#RepInfo">RepInfo</a><b>("ident")</b>
, should not be used. Where no Report ID parameter is supplied, 
<a href="#RepInfo">RepInfo</a><b>("ident")</b>
may be used to obtain a valid identifier for subsequent use.
</p>

<h3>See Also:</h3>
<p>
<a href="#RepCordon"> RepCordon( )</a> , 
<a href="#RepPut"> RepPut( )</a> , 
<a href="#RepCreate"> RepCreate( )</a> 
</p>


<p>
<a rel="up" href="#R"> ^ --R-- </a>
</p>

<!-- ================================= -->
<hr/><a name="RepSearch"></a> <h2>RepSearch</h2>
<h3>Function Name: RepSearch( ) -- TMGT 32s VREP 32c</h3>

<h3>Synopsis: (Binary search)</h3>
<pre><b>RepControl(concat("L:#", </b><em>column</em><b>), </b><em>Report</em><b>);</b></pre>
<pre><b>RepControl("P:ASORT", </b><em>Report</em><b>);</b></pre>
<pre><em>rowindex</em><b> = RepSearch(</b><em>value</em><b>, </b><em>column</em><b>, </b><em>Report</em><b>, 0);</b></pre>

<h3>Synopsis: (Linear search)</h3>
<pre><em>rowindex</em><b> = RepSearch(</b><em>value</em><b>, </b><em>column</em><b>, </b><em>Report</em><b>, 1);</b></pre>

<h3>Description:</h3>
<p>This function allows searching in a report-data set (visible report or
invisible report) identified by <em>Report</em> for a 
<em>value</em> in some <em>column</em>.   For a linear search, no prior 
sorting is required, and the first match found is returned. </p>

<p>When the search is binary, the report should have the data in the
searching column present in ascending order.  To this end, the function
<a href="#RepControl">RepControl( )</a> can be used as
as shown above. The advantage of binary search on a sorted data set is
that this is a lot faster for repeated searches, since the sorting step
is only necessarily done once. Linear search is better
when the sorting of data itself would waste more time than the 
search itself.  Data in a growing report, or data which changes
frequently between searches are good candidates for the linear search. </p>

<p>The returned value is <b>0</b> for failure to find anything, 
and some negative value suitable for use as a row-index with 
<a href="#RepGet">RepGet( )</a> when a match is found.  These negative
numbers are -1 for the last row, -2 for the one before that and so on back 
to <a href="#RepInfo"> -RepInfo("rows", <em>Report</em>);</a> </p>

<h3>Limitations on Binary Search:</h3>
<p>If the report-column of interest is not in sorted order first, this 
function when run in binary search mode may fail to find things 
that are present.  If there are duplicates, the binary search makes
no guarantee that the found item is the first or last of these, but it will
be a match.  To get the row indexes of all duplicates, consider 
using the 
<a href="#RepSearchSet">RepSearchSet( )</a> 
function instead. The intention is that 
the <b>RepSearch( )</b> function should be quick in finding objects
and should not be expensive to call inside a busy loop, so no additional 
sorting, scanning or other investigations are performed.  </p>

<!--
[h3]Example:[/h3]
[p]See the [a href="#ConSelectExample2"] second example [/a] for 
[a href="#ConSelect"]ConSelect( )[/a] for the implementation of the [b] CacheCBase()[/b] function. [/p]
-->


<h3>See Also:</h3>
<p>
<a href="#RepSearchSet">RepSearchSet( )</a> ,
<a href="#concat">concat( )</a> ,
<a href="#RepCopy">RepCopy( )</a> ,
<a href="#RepControl"> RepControl( )</a> , 
<a href="#RepGet"> RepGet( )</a> , 
<a href="#RepCordon"> RepCordon( )</a> , 
<a href="#RepPut"> RepPut( )</a> , 
<a href="#RepInfo"> RepInfo( )</a> 
</p>

<p>
<a rel="up" href="#R"> ^ --R-- </a>
</p>

<!-- ================================= -->

<hr/><a name="RepSearchSet"></a> <h2>RepSearchSet</h2>
<h3>Function Name: RepSearchSet( ) -- TMGT 32s VREP 32c</h3>

<h3>Synopsis: (Binary search)</h3>
<pre><b>RepControl(concat("L:#", </b><em>column1</em><b>), </b><em>Report</em><b>);</b></pre>
<pre><b>RepControl(concat("L:#", </b><em>column2</em><b>), </b><em>Report</em><b>);</b></pre>
<pre><b>RepControl("P:ASORT", </b><em>Report</em><b>);</b></pre>

<pre><em>rowindex</em><b> = RepSearchSet(makeset(</b><em>value1</em><b>, </b><em>value2</em><b>...), makeset(</b><em>column1</em><b>,</b><em>column2</em><b>...), </b><em>Report</em><b>, 0);</b></pre>
<pre><em>rowindexset</em><b> = RepSearchSet(makeset(</b><em>value1</em><b>, </b><em>value2</em><b>...), makeset(</b><em>column1</em><b>,</b><em>column2</em><b>...), </b><em>Report</em><b>, 2);</b></pre>

<h3>Synopsis: (Linear search)</h3>
<pre><em>rowindex</em><b> = RepSearchSet(makeset(</b><em>value1</em><b>, </b><em>value2</em><b>...), makeset(</b><em>column1</em><b>,</b><em>column2</em><b>...), </b><em>Report</em><b>, 1);</b></pre>
<pre><em>rowindexset</em><b> = RepSearchSet(makeset(</b><em>value1</em><b>, </b><em>value2</em><b>...), makeset(</b><em>column1</em><b>,</b><em>column2</em><b>...), </b><em>Report</em><b>, 3);</b></pre>

<h3>Description:</h3>
<p><b>RepSearchSet( )</b> allows searching on a combination of one or more
fields and columns, and it is able to, if requested, return a set of 
row-numbers for all the matches found, one for each row when there are 
duplicates. </p>

<p>This function includes a superset of the functionality of 
<a href="#RepSearch">RepSearch( )</a> </p>

<p>If no match is found, the return value is blank, equivalent to 
a set length 0, corresponding to 0 rows returned.</p>

<h3>See Also:</h3>
<p>
<a href="#RepSearch">RepSearch( )</a> ,
<a href="#RepCopy">RepCopy( )</a> ,
<a href="#RepControl"> RepControl( )</a> , 
<a href="#RepGet"> RepGet( )</a> , 
<a href="#RepCordon"> RepCordon( )</a> , 
<a href="#RepPut"> RepPut( )</a> , 
<a href="#RepInfo"> RepInfo( )</a> 
</p>

<p>
<a rel="up" href="#R"> ^ --R-- </a>
</p>

<!-- ================================= -->




<hr/><a name="RepServe"></a> <h2>RepServe</h2>
<h3>Function Name: RepServe( ) -- TMGT 32s VREP 32c TMGT 64s</h3>

<h3>Synopsis:</h3>
<pre><em>vpx</em><b> = RepServe(</b><em>columncount</em><b>);</b></pre>

<h3>Description:</h3>
<p>Create a memory-based report with the specified number of columns, <em>columncount</em>. 
This function is typically used in the server-side callback function from 
the <a href="#ServerReport">ServerReport( )</a> invocation.
</p>

<p>The returned value refers to a data-set or "naked" report, which may be populated using 
<a href="#RepCordon">RepCordon( )</a> and <a href="#RepPut">RepPut( )</a> 
. Initially, there are no records inside it, so each new record must be allocated with RepCordon, even the first
one. This is different from <a href="#RepCreate">RepCreate( )</a> 
where the first record already is in place. Most of the code dealing with this tend to be be simpler
when this record is not automatically included. 
</p>

<h3>See Also:</h3>
<p>
<a href="#ServerReport.20Example">ServerReport( ) example</a>,
<a href="#ServerReport">ServerReport( )</a> ,
<a href="#RepCordon"> RepCordon( )</a> , 
<a href="#RepPut"> RepPut( )</a> , 
<a href="#RepClose"> RepClose( )</a> , 
<a href="#RepInfo"> RepInfo( )</a> 
</p>

<p>
<a rel="up" href="#R"> ^ --R-- </a>
</p>

<!-- ================================= -->
<hr/><a name="RepStore"></a> <h2>RepStore</h2>

<h3>Function Name: RepStore( ) -- VREP 32c TMGT 64s TMGT 32s</h3>
<h3>Synopsis:</h3>
<pre><em>status</em><b> = RepStore(</b><em>Report</em><b>, </b><em>filename</em><b>);</b></pre>

<h3>Description:</h3>
<p>This function reads the supplied report, and stores it into a file in CSV format. 
If the report has internal or visible legends, these will be used for the column titles in
the file. If no legends are available, the names <b>F01</b>, <b>F02</b> etc. will be used instead. </p>

<h3>Return Value:</h3>
<p>Returns a status code for whether the file writing was successful. </p>

<h3>See Also:</h3>
<p>
<a href="#RepLoad">RepLoad( )</a> ,
<a href="#RepInfo">RepInfo( )</a> ,
<a href="#RepServe">RepServe( )</a> ,
<a href="#serverindexdirect">serverindexdirect( )</a> , 
<a href="#serverindex">serverindex( )</a> 
</p>

<p>
<a rel="up" href="#R"> ^ --R-- </a>
</p>

<!-- ================================= -->

<hr/><a name="RepToJSON"></a><h2>RepToJSON</h2>

<a href="#RepToJSON">RepToJSON( )</a> 
<h3>Function Name: RepToJSON( ) -- TMGT 32s</h3>

<h3>Synopsis:</h3>
<pre><em>jsonstring</em><b> = RepToJSON(</b><em>Report</em><b>);</b></pre>
<pre><em>jsonstring</em><b> = RepToJSON(</b><em>Report</em><b>,</b><em>shiftvalue</em><b>);</b></pre>

<h3>Description:</h3>
<p>This function takes a Report data set and makes a copy of it 
in JSON (JavaScript Object Notation)
format, so that it can be passed to a Javascript/ECMAscript
function in a web-page and interpreted further in code there.</p>

<p>The report should have defined legends using 
<a href="#RepControl">RepControl( )</a>, where the legends will
appear as field-names and eventually member names. These should be
limited to legal variable names (only letters, digits, and underscore, 
first character is a letter or underscore, subsequent characters may 
include digits as well)</p>

<h3>Return Value:</h3>
<p>The returned value is a string formatted as per JSON rules, using
various separators to delimit records and fields. It resembles an LCX
"set of sets" and it contains all printable characters.</p>

<h3>Example:</h3>

<pre>

string Table;
string Content_Type;

ListItems()
{
    string vpx, jsono;

    vpx = ConSelect(Table,
            makeset(StdField(Table, "ITEMFLD"),
                StdField(Table, "ITEMDESFLDS"), "RSERIAL"), 1, "", "");

    RepControl("L:#0", vpx);
    RepControl("P:ASORT", vpx);

    RepControl( concat("C:A:", makeset("Tag", "Description", "Recordno")), vpx);

    jsono = RepToJSON(vpx);
    RepClose(vpx);

    Content_Type = "text/plain";
    return(jsono);
}
</pre>

<p>On the Javascript side, the returned text is fed through <tt>JSON.parse()</tt>
or <tt>eval()</tt>, and the elements are then accessed via some Javascript/ECMAscript
such as the following:</p>
    
<pre>

    var xmlHttp = null;

    xmlHttp = new XMLHttpRequest();
    xmlHttp.open("GET", "tablelist.lcx?f=ListItems&amp;Table=CERTSITE", false);
    xmlHttp.send(null);

    var jsonstuff = xmlHttp.responseText;

    var j, p, count;
    var taglist;

    if(!notext(jsonstuff))
    {
        var itemlist = null;
        try
        {
            itemlist = JSON.parse(jsonstuff);
        }
        catch(exception)
        {
            itemlist = eval('('+jsonstuff+')');
        }

        var rtxt = "&lt;ul&gt;";

        var p;
        for(p in itemlist)
        {
            rtxt = rtxt + '&lt;li&gt;' +
                    itemlist[p].Tag+' '+
                    itemlist[p].Description+' '+
                    itemlist[p].Recordno
                    + '&lt;/li&gt;';
        }
        rtxt += "&lt;/ul&gt;";
        document.write(rtxt);
    }
</pre>  


<h3>See Also:</h3>
<p>
<a href="#example">example( )</a> <br/>
</p>

<p>
<a rel="up" href="#R"> ^ --R-- </a>
</p>

<!-- ================================= -->
<hr/><a name="RepWidth"></a> <h2>RepWidth</h2>

<h3>Function Name: RepWidth( ) -- RCONN 16 VREP 32c</h3>
<h3>Synopsis:</h3>
<pre><em>count</em><b> = RepWidth(</b><em>identifier</em><b>);</b></pre>
<pre><em>count</em><b> = RepWidth( )</b> (16-bit only, see note below)</pre>

<h3>Description:</h3>
<p>Returns the number of fields in the view panel. Fields of width 0 are included in the count; 
although they are not visible, they do hold data that can be stored and examined using the 
<a href="#RepPut">RepPut( )</a> and <a href="#RepGet">RepGet( )</a> 
functions. The <em>identifier</em> is used to refer to a report created with 
<a href="#RepCreate">RepCreate( )  </a>. 
If this is zero or nonexistent, the report is expected to be a Status Index.</p>

<p> This is the same as <b>RepInfo("cols", </b><em>identifier</em><b>)</b></p>

<h3>NOTE:</h3>
<p>For future compatibility, the variants that do not take any identifier argument, 
except for 
<a href="#RepInfo">RepInfo</a><b>("ident")</b>
, should not be used. Where no Report ID parameter is supplied, 
<a href="#RepInfo">RepInfo</a><b>("ident")</b>
may be used to obtain a valid identifier for subsequent use.</p>

<h3>See Also:</h3>
<p>
<a href="#RepCreate">RepCreate( )  </a>, 
<a href="#RepGet">RepGet( )</a> , 
<a href="#RepPut">RepPut( )</a> 
</p>

<p>
<a rel="up" href="#R"> ^ --R-- </a>
</p>

<!-- ================================= -->
<hr/>
<a name="ReportColIndexes"></a> <h2>ReportColIndexes</h2>

<h3>Function Name: ReportColIndexes( ) -- PPVIEW 32c </h3>

<h3>Synopsis:</h3>
<pre><em>list</em><b> = ReportColIndexes( );</b></pre>

<h3>Description:</h3>
<p>Returns a list of report column indexes that appear in the report printout. The list
is a set of index values, use 
<a href="#setlen">setlen( )</a> and 
<a href="#setitem">setitem( )</a> to extract them. </p>

<h3>Availability:</h3>
<p>Only in Printing functions of reports. </p>

<h3>See Also:</h3>
<p>
<a href="#setlen">setlen( )</a> , 
<a href="#setitem">setitem( )</a> <br/> 
<a href="#ReportColWidth">ReportColWidth( )</a> ,
<a href="#ReportFirst">ReportFirst( )</a> ,
<a href="#ReportLast">ReportLast( )</a> ,
<a href="#ReportLegend">ReportLegend( )</a> ,
<a href="#ReportRef">ReportRef( )</a> 
</p>
<p>
<a rel="up" href="#R"> ^ --R-- </a>
</p>

<!-- ================================= -->
<hr/>
<a name="ReportColWidth"></a> <h2>ReportColWidth</h2>

<h3>Function Name: ReportColWidth( ) -- PPVIEW 32c </h3>

<h3>Synopsis:</h3>
<pre><em>text</em><b> = ReportColWidth(</b><em>column</em><b>);</b></pre>

<h3>Description:</h3>
<p>This function returns the width of the specified field.</p>

<h3>Availability:</h3>
<p>Only in Printing functions of reports.</p>


<h3>See Also:</h3>
<p>
<a href="#ReportColIndexes">ReportColIndexes( )</a> ,
<a href="#ReportFirst">ReportFirst( )</a> ,
<a href="#ReportLast">ReportLast( )</a> ,
<a href="#ReportLegend">ReportLegend( )</a> ,
<a href="#ReportRef">ReportRef( )</a> 
</p>
<p>
<a rel="up" href="#R"> ^ --R-- </a>
</p>

<!-- ================================= -->
<hr/>
<a name="ReportFirst"></a> <h2>ReportFirst</h2>

<h3>Function Name: ReportFirst( ) -- PPVIEW 16 PPVIEW 32c </h3>

<h3>Synopsis:</h3>
<pre><em>text</em><b> = ReportFirst(</b><em>column</em><b>,</b><em>page</em><b>);</b></pre>

<h3>Description:</h3>
<p>This function returns the value of the specified field in the first record to be shown on the
specified page.</p>

<h3>Availability:</h3>
<p>Only in Printing functions of reports. 
UNDER CONSTRUCTION</p>

<h3>See Also:</h3>
<p>
<a href="#ReportColWidth">ReportColWidth( )</a> ,
<a href="#ReportColIndexes">ReportColIndexes( )</a> ,
<a href="#ReportLast">ReportLast( )</a> ,
<a href="#ReportLegend">ReportLegend( )</a> ,
<a href="#ReportRef">ReportRef( )</a> 
</p>
<p>
<a rel="up" href="#R"> ^ --R-- </a>
</p>

<!-- ================================= -->
<hr/><a name="ReportLast"></a> <h2>ReportLast</h2>

<h3>Function Name: ReportLast( ) -- PPVIEW 16 PPVIEW 32c</h3>
<h3>Synopsis:</h3>
<pre><em>text</em><b> = ReportLast(</b><em>column</em><b>,</b><em>page</em><b>);</b></pre>

<h3>Description:</h3>
<p>This function returns the value of the specified field in the last record to be shown on the
specified page.</p>

<h3>Availability:</h3>
<p>Only in Printing functions of reports. </p>
<p>UNDER CONSTRUCTION</p>

<h3>See Also:</h3>
<p>
<a href="#ReportColWidth">ReportColWidth( )</a> ,
<a href="#ReportColIndexes">ReportColIndexes( )</a> ,
<a href="#ReportFirst">ReportFirst( )</a> ,
<a href="#ReportLegend">ReportLegend( )</a> ,
<a href="#ReportRef">ReportRef( )</a> 
</p>

<p>
<a rel="up" href="#R"> ^ --R-- </a>
</p>

<!-- ================================= -->

<hr/><a name="ReportLegend"></a> <h2>ReportLegend</h2>

<h3>Function Name: ReportLegend( ) -- PPVIEW 16 PPVIEW 32c</h3>
<h3>Synopsis:</h3>
<pre><em>text</em><b> = ReportLegend(</b><em>column</em><b>);</b></pre>

<h3>Description:</h3>
<p>This function returns the descriptive legend of the column indexed. </p>

<h3>Availability:</h3>
<p>This function only works within Printing functions of reports. </p>

<h3>See Also:</h3>
<p>
<a href="#ReportColWidth">ReportColWidth( )</a> ,
<a href="#ReportColIndexes">ReportColIndexes( )</a> ,
<a href="#ReportRef">ReportRef( )</a> ,
<a href="#ReportLast">ReportLast( )</a> ,
<a href="#ReportFirst">ReportFirst( )</a> 
</p>

<p>
<a rel="up" href="#R"> ^ --R-- </a>
</p>

<!-- Other undocumented ones seen in PPVIEW 32 that may vanish:
    Report ColStart
    ReportCols
    ReportRow
 -->

<!-- ================================= -->
<hr/><a name="ReportRef"></a> <h2>ReportRef</h2>
<h3>Function Name: ReportRef( ) -- PPVIEW 32c</h3>
<h3>Synopsis:</h3>
<pre><em>Report</em><b> = ReportRef();</b></pre>

<h3>Description:</h3>
<p>This function allows the access to the contents of a Report while 
this is being printed, in the Print-Preview phase there.  The return value
is a report-value suitable for use in calls to 
<a href="#RepInfo">RepInfo( )</a>, 
<a href="#RepGet">RepGet( )</a>, 
<a href="#RepSearchSet">RepSearchSet( )</a> , and
<a href="#RepSearch">RepSearch( )</a> .</p>

<p> While this also allows the other RepXXX functions to be used, most of these will
be disruptive, so they are less than useful.</p>

<h3>Availability:</h3>
<p>This function only works inside a Print Formatting function of a report. </p>

<h3>See Also:</h3>
<p>
<a href="#RepInfo">RepInfo( )</a> ,<br/>
<a href="#RepGet">RepGet( )</a> ,<br/>
<a href="#RepSearch">RepSearch( )</a>,<br/>
<a href="#RepSearch">RepSearchSet( )</a>,<br/>
<a href="#ReportColWidth">ReportColWidth( )</a> ,<br/>
<a href="#ReportColIndexes">ReportColIndexes( )</a> ,<br/>
<a href="#ReportFirst">ReportFirst( )</a> ,<br/>
<a href="#ReportLast">ReportLast( )</a> ,<br/>
<a href="#ReportLegend">ReportLegend( )</a> 
</p>

<p>
<a rel="up" href="#R"> ^ --R-- </a>
</p>
<!-- ================================= -->
<hr/><a name="rundde"></a> <h2>rundde</h2>

<h3>Function Name: rundde( ) -- RCONN 16</h3>
<h3>Function Name: runddeA( ) -- RCONN 16</h3>
<h3>Synopsis:</h3>
<pre><em>code</em><b> = rundde(Datum, regeditcode, LCXfiles, innerfunction);</b></pre>
<pre><em>code</em><b> = runddeA(Datum, exepath, server, LCXfiles, innerfunction);</b></pre>

<h3>Description:</h3>
<p>Start a DDE operation on the application identified by the regeditcode, 
or alternately direct with the server and exepath. The regeditcode would 
typically come from a call to the regextclass( )  function.  When the 
application is started, the named LCX function, innerfunction, defined 
in one of the named files, is invoked, and it should use the 
ddelinktopic( ) , ddepoke( ), and ddeexecute( )  functions to communicate 
further with the application. </p>

<p>This function runs in a different 
environment and does therefore not know about global variables and 
functions in the context where the rundde( ) call was made. Instead, 
the communication with the inner function is via the Datum argument 
and the return value. The inner function is called as:</p>

<pre>innerfunction(Datum, server, exepath, topic)</pre>

<p>where the <br/>
Datum is the first argument in the rundde( ) call.  <br/>
server is the application identity, e.g. "Excel", <br/>
exepath is the command line for the application, <br/>
topic is the initial topic linked to, usually "system"</p>

<h3>Return Value:</h3>
<p>The return value of the inner function becomes the return value of rundde( ).</p>

<h3>Availability:</h3>
<p>These functions are obsolete, the inline DDE functions
<a href="#DDEconnect">DDEconnect( )</a> , 
<a href="#DDEdisconnect">DDEdisconnect( )</a> ,
<a href="#DDEexecute">DDEexecute( )</a> , 
<a href="#DDEpoke">DDEpoke( )</a> , 
<a href="#DDErequest">DDErequest( )</a>  
should be used instead for all new work on 16-bit systems, and 
these functions do not exist at all on 32-bit systems.</p>

<h3>See Also:</h3>
<p>
<a href="#ddelinktopic"> ddelinktopic( ) </a>, 
<a href="#ddepoke"> ddepoke( ) </a>, 
<a href="#ddeexecute"> ddeexecute( ) </a>, 
<a href="call3208.html"> Function Category 8.</a>
</p>

<p>
<a rel="up" href="#R"> ^ --R-- </a>
</p>

<!-- ================================= -->
<hr/><a name="runentry"></a> <h2>runentry</h2>

<h3>Function Name: runentry( ) -- RCONN 16 NCONN 32c</h3>
<h3>Synopsis:</h3>
<pre><em>result</em><b> = runentry(</b><em>table</em><b>, </b><em>inifile</em><b>, </b><em>keyfield</em><b>, </b><em>datavalue</em><b>);</b></pre>

<h3>Description:</h3>
<p>This function starts an Entry Form on the given table <em>table</em>, 
using the specified .INI file, which must be configured for that table. 
This table will initially be positioned on the record where the 
<em>keyfield</em> has the given data <em>datavalue</em>. Control returns 
immediately to the code following the call; this is unlike the 
<a href="#entrydialog">entrydialog( )</a>  function where the view has to 
be closed first.</p>

<h3>Return Value:</h3>
<p>The return value is some nonzero value, a window handle, 
if the Entry form came up OK. <b>0</b> if it did not.</p>

<h3>See Also:</h3>
<p>
<a href="#runview">runview( )</a>,
<a href="#entrydialog">entrydialog( )</a>,
<a href="evini.html#Introduction"> View and Entry .INI files reference.  </a>
</p>

<p>
<a rel="up" href="#R"> ^ --R-- </a>
</p>

<!-- ================================= -->
<hr/><a name="runtrans"></a> <h2>runtrans</h2>

<h3>Function Name: runtrans( ) -- TMGT 32s</h3>
<h3>Synopsis:</h3>
<pre><em>report</em><b> = runtrans(</b><em>Xfile</em><b>, </b><em>sourcefile</em><b>, </b><em>commands</em><b>);</b></pre>

<h3>Description:</h3>
<p>Run a TRANS-like job, given the recipe in the .X file and a
data source file, that overrides the file listed in the .X file.
The commands argument indicates if this is to run a transfer or an exception report. 
This is <b>E</b> for an Exception Report, <b>T</b> for Transfer. </p>

<h3>Return Value:</h3>
<p> When running an exception Report, the Exception Report is returned.</p>
<p> When running a transfer, the result is a Report detailing the status of insertions.</p>

<p>In either case, these reports should be removed via
<a href="#RepClose">RepClose( )</a> if this is only run on the server
or be sent to the client in response to a <a href="#ServerReport">ServerReport( )</a> 
call. </p>

<h3>See Also:</h3>
<p>
<a href="#RepClose">RepClose( )</a> , 
<a href="#ServerReport">ServerReport( )</a> , 
<a href="#RepStore">RepStore( )</a> 
</p>

<p>
<a rel="up" href="#R"> ^ --R-- </a>
</p>

<!-- ================================= -->
<hr/><a name="runview"></a> <h2>runview</h2>

<h3>Function Name: runview( ) -- RCONN 16 NCONN 32c</h3>
<h3>Synopsis:</h3>
<pre><em>result</em><b> = runview(</b><em>table</em><b>, </b><em>inifile</em><b>, </b><em>keyfield</em><b>, </b><em>datavalue</em><b>);</b></pre>

<h3>Description:</h3>
<p>This function starts a View Form on the given table <em>table</em>, using the specified .INI file, 
which must be a view .INI file configured for that table. This table will initially be positioned on 
the record where the <em>keyfield</em> has the given data <em>datavalue</em>. Control returns 
immediately to the code following the call. </p>

<h3>Return Value:</h3>
<p>The return value is some nonzero value, a window handle, 
if the View was started OK, <b>0</b> if it was not started. </p>

<h3>See Also:</h3>
<p>
<a href="#runentry">runview( )</a>,
<a href="#entrydialog">entrydialog( )</a>,
<a href="evini.html#Introduction"> View and Entry .INI files reference.  </a> </p>
<p>
<a rel="up" href="#R"> ^ --R-- </a>
</p>


<!-- ================================= -->
<!-- S -->



<hr/><a name="S"></a><h2>--S--</h2>
<p>
<a href="#SaveGrandReportToSQLITE">SaveGrandReportToSQLITE( )</a> ,<br/>
<a href="#Scoded">Scoded( )</a> ,<br/>
<a href="#selectdialog">selectdialog( )</a> ,<br/>
<a href="#selectdialogf">selectdialogf( )</a> ,<br/>
<a href="#selectdialogr">selectdialogr( )</a> ,<br/>
<a href="#selectfromset">selectfromset( )</a> ,<br/>
<a href="#selectinistring">selectinistring( )</a> <br/>
<a href="#serverindex"> serverindex( ) </a>,<br/>
<a href="#serverindexdirect">serverindexdirect( )</a> ,<br/>
<a href="#serverindexupward">serverindexupward( )</a> ,<br/>
<a href="#serverinistring"> serverinistring( ) </a>,<br/>
<a href="#ServerReport"> ServerReport( ) </a> <br/>
<a href="#SetEUser">SetEUser( )</a> , <br/>
<a href="#setitem">setitem( )</a> ,<br/>
<a href="#setlen">setlen( )</a> ,<br/>
<a href="#SetProps">SetProps( )</a> ,<br/>
<a href="#setreplace">setreplace( )</a> <br/>
<a href="#SIRepGet">SIRepGet( )</a> <br/>
<a href="#SIRepPut">SIRepPut( )</a> <br/>
<a href="#site">site( )</a> <br/>
<a href="#sitecodes">sitecodes( )</a> <br/>
<a href="#sortset">sortset( )</a> <br/>
<a href="#SourceName">SourceName( )</a> <br/>
<a href="#SQLexec">SQLexec( )</a> <br/>
<a href="#stadlginientries">stadlginientries( )</a> <br/>
<a href="#stadlginistring">stadlginistring( )</a> <br/>
<a href="#startconnscan">startconnscan( )</a> <br/>
<a href="#statusdialog">statusdialog( )</a> <br/>
<a href="#statusindex">statusindex( )</a> <br/>
<a href="#statusindexdirect">statusindexdirect( )</a> ,<br/>
<a href="#statusindexjor">statusindexjor( )</a> <br/>
<a href="#statusindexupward">statusindexupward( )</a> ,<br/>
<a href="#StdField">StdField( )</a> <br/>
<a href="#StepDialog">StepDialog( )</a> <br/>
<a href="#stopconnscan">stopconnscan( )</a> <br/>
<a href="#StoreAllTablesData">StoreAllTablesData( )</a> <br/>
<a href="#strchr">strchr( )</a> <br/>
<a href="#strlen">strlen( )</a> <br/>
<a href="#strrchr">strrchr( )</a> <br/>
<a href="#strstr">strstr( )</a> <br/>
<a href="#strword">strword( )</a> <br/>
<a href="#substr">substr( )</a> <br/>
<a href="#sysdir">sysdir( )</a> <br/>
</p>
<p>
<a rel="up" href="#Functions.20Reference"> ^ Functions Reference </a> 
<a rel="previous" href="#R"> &lt; --R-- </a>
<a rel="next" href="#T"> &gt; --T-- </a>
</p>

<!-- ================================= -->
<hr/><a name="SaveGrandReportToSQLITE"></a><h2>SaveGrandReportToSQLITE</h2>

<h3>Function Name: SaveGrandReportToSQLITE( ) -- TMGT 32s</h3>

<h3>Synopsis:</h3>
<pre><em>status</em><b> = SaveGrandReportToSQLITE(</b><em>grandrepname</em><b>, </b><em>options</em><b>, </b><em>datafile</em><b>);</b></pre>

<h3>Descriptions:</h3>

<p>This functions allows us to save the contents of one of the Grand Reports,
as generated using
<a href="#GrandReport">GrandReport("GrandRepMainRefresh", <em>grandrepname</em> )</a> or 
<a href="#serverindexupward">serverindexupward( )</a> 
into some SQLITE database file, for subsequent processing by other 
programs, whether inside of or outside of WinPCS.</p>

<p> The <em>grandrepname</em> refers to one of the Grand Reports, 
as defined in the sections in GRANDREP.INI. </p>

<p>The <em>options</em> can include the letter <b>R</b>
for forcing a refresh (no R means the function will store 
whatever is present as the Grand Report data, even if out of date 
-- it will however establish the report if it isn't yet established yet).  </p>

<p> The datafile will be an sqlite data file, where the grand report is 
saved as a table named as the <em>grandrepname</em>, with the fields 
matching the report, though with a leading field called <b>rserial</b> 
which is the same kind of autoincrement primary key that we see in 
most other WinPCS tables.  </p>

<p> If the datafile argument refers to a nonexistent file, that file 
will be created, and if it refers to an existing file the table 
will be replaced or added within that datafile.  </p>

<p> This filename can be specified with a numbered path -- 
if you specify <b>9:/data/project.db</b> for this file, the grand 
reports will be added to the main project database file for 
an SQLite system and they will appear as actual tables within 
WinPCS running on that system.  </p>


<h3>Return Value:</h3>

<p> The return value is a message indicating success or failure. 
It is something like "OK+REPITR1" if everything went well 
and the SQLite error message on any failures. During normal
operations, there should not be any such failures; if there are
they should be reported back to Knut, as there might be errors
in the executables, in TMGT.DLL.</p>

<p> This function is server-side, so it can be run from 
cronjob.lcx or periodic jobs right away. </p>


<h3>Example:</h3>

<pre>
 
SVRTestSaveGR(string abc)
{
    string ba, bs;
 
    bs = "";
    ba = SaveGrandReportToSQLITE("REPITR1", " ", "9:/grandrep.db");
    bs = concat(bs, makeset(ba));
 
    ba = SaveGrandReportToSQLITE("REPITR2", " ", "9:/grandrep.db");
    bs = concat(bs, makeset(ba));
 
    ba = SaveGrandReportToSQLITE("REPITR3", " ", "9:/grandrep.db");
    bs = concat(bs, makeset(ba));
 
    ba = SaveGrandReportToSQLITE("REPPL", " ", "9:/grandrep.db");
    bs = concat(bs, makeset(ba));
 
    return(bs);
}
</pre>



<h3>See Also:</h3>
<p>
<a href="#GrandReport">GrandReport( )</a> , <br/>
<a href="#statusindexupward">statusindexupward( )</a> , <br/>
<a href="#serverindexupward">serverindexupward( )</a> , <br/>
<a href="serverini.html#section.20drives">
SERVER.INI section [drives]</a>, <br/>
<a href="#ExpandPath">ExpandPath( )</a> , <br/>
<a href="#ReducePath">ReducePath( )</a> , <br/>
</p>

<p>
<a rel="up" href="#S"> ^ --S-- </a>
</p>

<!-- ================================= -->
<hr/><a name="Scoded"></a> <h2>Scoded</h2>

<h3>Function Name: Scoded( ) -- RCONN 16</h3>
<h3>Function Name: InvScoded( ) -- RCONN 16</h3>

<h3>Synopsis:</h3>
<pre><em>text</em><b> = Scoded(</b><em>value</em><b>, </b><em>SIname</em><b>);</b></pre>
<pre><em>s</em><b>+</b><em>q</em><b>+ = InvScoded(</b><em>text</em><b>, </b><em>SIname</em><b>);</b></pre>

<h3>Descriptions:</h3>
<p><b>Scoded( )</b> looks in the section in STADLG.INI corresponding to the SIname status index 
name to be found in STATREES.INI (which in turn contains the reference to the section 
in STADLG.INI) and looks up the text corresponding to the status value. The effect is 
identical to the SCODED function in STATREES.INI SI sections.  </p>

<p> <b>InvScoded( )</b> returns the status value if found corresponding to a status text.  The 
returned value is a 2-part set where the first part is the status value if found, and the 
second part indicates whether this value is sensible.  This is 0 for nonsense, 10 for exaxt 
match, and 5 for a partial match that resulted in one value being preferred over the 
others. </p>

<h3>See Also:</h3>
<p>
<a href="#varSI">varSI( ) </a>
</p>

<p>
<a rel="up" href="#S"> ^ --S-- </a>
</p>


<!-- ================================= -->
<hr/><a name="selectdialog"></a> <h2>selectdialog</h2>

<h3>Function Name: selectdialog( ) -- RCONN 16 NCONN 32c</h3>
<h3>Function Name: selectdialoga( ) -- RCONN 16 NCONN 32c</h3>
<h3>Function Name: selectdialogb( ) -- RCONN 16</h3>

<h3>Note</h3>

<p>The 32c versions of these selectdialogs are slightly different, 
but compatible with the 16-bit system calls.  The function fails
with no selection if any fieldname refers to a nonexistent field.</p>

<h3>Synopsis (RCONN 16)</h3>
<pre><em>resp</em><b> = selectdialog(</b><em>table</em><b>,</b><em> keyfield</em><b>, </b><em> selectfield</em><b>,</b><em> descrfield </em><b> );</b></pre>

<pre><em>resp</em><b> = selectdialoga(</b><em>table</em><b>,</b><em> keyfield</em><b>,</b><em> selectfield</em><b>,</b><em> descrfield</em><b>,</b><em> limitfield</em><b>,</b><em> limitvalue </em><b> );</b></pre>

<pre><em>resp</em><b> = selectdialogb(</b><em>title</em><b>,</b><em> prompt</em><b>,</b><em> table</em><b>,</b><em> keyfield</em><b>,</b><em> selectfield</em><b>,</b><em> descrfield </em><b> );</b></pre>

<pre><em>resp</em><b> = selectdialogb(</b><em>title</em><b>,</b><em> prompt</em><b>,</b><em> table</em><b>,</b><em> keyfield</em><b>,</b><em> selectfield</em><b>,</b><em> descrfield</em><b>,</b><em> multiple </em><b> );</b></pre>

<h3>Synopsis (NCONN 32c)</h3>
<!-- 4 -->
<pre><em>resp</em><b> = selectdialog(</b><em>table</em><b>,</b><em> keyfield</em><b>, </b><em> selectfield</em><b>,</b><em> descrfield </em><b>);</b></pre>

<!-- 5 -->
<pre><em>resp</em><b> = selectdialog(</b><em>table</em><b>,</b><em> keyfield</em><b>, </b><em> selectfield</em><b>,</b><em> descrfield </em><b>, </b><em> multiple</em><b>);</b></pre>

<!-- 6 -->
<pre><em>resp</em><b> = selectdialog(</b><em>title</em><b>,</b><em> prompt</em><b>, </b><em> table</em><b>,</b><em> keyfield</em><b>, </b><em> selectfield</em><b>,</b><em> descrfield </em><b>);</b></pre>

<!-- 7 -->
<pre><em>resp</em><b> = selectdialog(</b><em>title</em><b>,</b><em> prompt</em><b>, </b><em> table</em><b>,</b><em> keyfield</em><b>, </b><em> selectfield</em><b>,</b><em> descrfield </em><b>, </b><em> multiple</em><b>);</b></pre>

<!-- a6 --> 
<pre><em>resp</em><b> = selectdialoga(</b><em>table</em><b>,</b><em> keyfield</em><b>, </b><em> selectfield</em><b>,</b><em> descrfield</em><b>, </b><em> limitfield</em><b>,</b><em> limitvalue </em><b>);</b></pre>

<!-- a7 -->
<pre><em>resp</em><b> = selectdialoga(</b><em>table</em><b>,</b><em> keyfield</em><b>, </b><em> selectfield</em><b>,</b><em> descrfield</em><b>, </b><em> limitfield</em><b>,</b><em> limitvalue </em><b>, </b><em> multiple</em><b>);</b></pre>

<!-- a8 -->
<pre><em>resp</em><b> = selectdialoga(</b><em>title</em><b>,</b><em> prompt</em><b>, </b><em>table</em><b>,</b><em> keyfield</em><b>, </b><em> selectfield</em><b>,</b><em> descrfield</em><b>, </b><em> limitfield</em><b>,</b><em> limitvalue </em><b>);</b></pre>

<!-- a9 -->
<pre><em>resp</em><b> = selectdialoga(</b><em>title</em><b>,</b><em> prompt</em><b>, </b><em>table</em><b>,</b><em> keyfield</em><b>, </b><em> selectfield</em><b>,</b><em> descrfield</em><b>, </b><em> limitfield</em><b>,</b><em> limitvalue </em><b>, </b><em> multiple</em><b>);</b></pre>

<h3>Description:</h3>
<p>These functions open a dialog box with a list of all records in the table 
<em>table</em>, where the field <em>keyfield</em> is used 
for ordering, the <em>selectfield</em> is used for selecting data, 
and the <em>descrfield</em> is used for displaying descriptions. </p>

<p> <b>selectdialoga( )</b> allows the list to be limited to the 
records where the value of the 
<em>limitfield</em> matches the <em>limitvalue</em>. </p>

<p> On 32-bit systems, optional multiple selections and customized window
title and prompt are possible.  For 16-bit systems, the <b>selectdialogb()</b>
provides some of these choices here.  This function is replaced by
possible invocations of <b>selectdialog( )</b> on 32-bit systems. </p>

<p><b>selectdialogb( )</b> allows the default title of "Select" and prompt of 
"Select a value from this list:" to be replaced by the strings given as 
the first two arguments. In addition, it allows multiple selections if 
the last argument is present and nonzero and non-blank.</p>

<h3>Return Value:</h3>
<p>The selected value of the <em>selectfield</em>, if any is selected.  
OK or Cancel status of the dialog itself is available through 
<a href="#dialogOK">dialogOK( )</a>.
For <b>selectdialogb( )</b> wth multiple selection, 
the return value will be a set, which are the items selected.
If no items are selected, the return value will be a blank string. </p>

<h3>See Also:</h3>
<p>
<a href="#dialogOK">dialogOK( )</a> , 
<a href="#get">get( )</a> , 
<a href="#findexact">findexact( )</a> , 
<a href="#varSI">varSI( )</a> ,
<a href="#selectfromset">selectfromset( )</a> ,
</p>

<p>
<a rel="up" href="#S"> ^ --S-- </a>
</p>


<!-- ================================= -->
<hr/><a name="selectdialogf"></a> <h2>selectdialogf</h2>

<h3>Function Name: selectdialogf( ) -- RCONN 16 NCONN 32c </h3>

<h3>Synopsis:</h3>
<pre><em>name</em><b> = selectdialogf(title, initdir, typemaskpairs);</b></pre>
where
<pre><em>typemaskpairs</em><b> = makeset(type, mask, ... );</b></pre>

<h3>Description</h3>
<p>This opens a standard File Open Common Dialog, with specified question, 
directory, and the selections of file types listed as the typemaskpairs.
If the user selects OK, the return value is the selected file. The 
<a href="#dialogOK">dialogOK( )</a> function may 
be used to determine whether the user hit OK or Cancel.</p>

<p>The directory may be identified by a numbered path. The returned file-name
will be a full qualified path-name. </p>

<h3>Example:</h3>
<pre>
filepath = selectdialogf("Select or specify Document File", ".", 
    makeset("Text files", "*.txt", "Word files", "*.doc") );
if(dialogOK( ) == 0)
{
    return(0);   /* Cancelled */
}
</pre>

<h3>See Also:</h3>
<p>
<a href="#ExpandPath">ExpandPath( )</a> , 
<a href="#ReducePath">ReducePath( )</a> ,
<a href="#dialogOK">dialogOK( )</a> 
</p>


<p>
<a rel="up" href="#S"> ^ --S-- </a>
</p>

<!-- ================================= -->
<hr/><a name="selectdialogr"></a> <h2>selectdialogr</h2>

<h3>Function Name: selectdialogr( ) -- NCONN 32c</h3>
<h3>Synopsis:</h3>
<pre><em>keyvalue</em><b> = selectdialogr( </b><em>title</em><b> ,</b><em>prompt</em><b> , </b><em>reportref</em><b> , </b><em>selectcolumn</em><b> , </b><em>descrcolumn</em><b>);</b></pre> 
<pre><em>keyvalue</em><b> = selectdialogr( </b><em>title</em><b> ,</b><em>prompt</em><b> , </b><em>reportref</em><b> , </b><em>selectcolumn</em><b> , </b><em>descrcolumn</em><b> ,</b><em>multiple</em><b>);</b></pre>

<h3>Description:</h3>
<p>This function allows selections to be made from a data-set in a Report reference, as produced by 
<a href="#ConSelect">ConSelect( )</a> 
or 
<a href="#ServerReport">ServerReport( )</a> 
or one of the other report-generating functions. The list is filled with the values from the columns 
<em>selectcolumn</em> and <em>descrcolumn</em> and the selected values from the
<em>selectcolumn</em> are returned. If the additional argument, <em>multiple</em> is present and
set to nonzero, the dialog will allow multiple selections.</p>

<h3>Return Value:</h3>

<p>The item selected is returned, or if <em>multiple</em> is active, the 
items selected are returned as a set.  OK or Cancel status of 
the dialog itself is available through  
<a href="#dialogOK"> dialogOK( ) </a>, where this is zero or false for Cancel
and nonzero or true for OK.</p>

<a name="selectdialogrexample"/>
<h3>Example:</h3>

<p>This is a typical selection-dialog call found in the <b>global.lcx</b> file in many installations.
Some list of disciplines or systems has been loaded and stored as a global report.  </p>

<p>See the 
<a href="#ConSelectExample2">
second example </a> for 
<a href="#ConSelect">ConSelect( )</a> 
for the implementation of the <b> CacheCBase()</b> function. </p>

<pre>

G_SelectWhatever(string table, string exprompt)
{
    string vpx, stat, tdescr, prompt;

    vpx = CacheCBase(table);
    tdescr = StdField(table, "BASEDESCR");
    if(notext(exprompt))
    {
        prompt = concat("Select the ", tdescr, " from the list");
    }
    else
    {
        prompt = concat(exprompt, "\x0a Select the ", tdescr, " from the list");    }

    stat = selectdialogr(concat(tdescr, " Listing"), prompt,
        vpx, 0, 1,
        0);  // we select only a single Whatever!

    if(dialogOK() == 0) { return(""); }
    return(stat);
}

</pre>


<h3>See Also:</h3>
<p>
<a href="#ConSelect">ConSelect( )</a> ,
<a href="#ServerReport">ServerReport( )</a> ,
<a href="#dialogOK"> dialogOK( )</a> ,
<a href="#concat">concat( )</a> ,
<a href="#selectfromset">selectfromset( )</a> ,
<a href="#selectdialog">selectdialog( )</a> 
</p>

<p>
<a rel="up" href="#S"> ^ --S-- </a>
</p>
<!-- ================================= -->
<hr/><a name="selectinistring"></a> <h2>selectinistring</h2>

<h3>Function Name: selectinistring( ) -- RCONN 16 NCONN 32c </h3>
<h3>Synopsis:</h3>
<pre><em>keyvalue</em><b> = selectinistring( </b><em>title</em><b> ,</b><em>prompt</em><b> ,</b><em>inifile</em><b> ,</b><em>section</em><b>);</b></pre> 
<pre><em>keyvalue</em><b> = selectinistring( </b><em>title</em><b> ,</b><em>prompt</em><b> ,</b><em>inifile</em><b> ,</b><em>section</em><b> ,</b><em>multiple</em><b>);</b></pre>

<h3>Description:</h3>

<p>Ths function reads the entries in a section in an INI file and 
lists these in a dialog, whereafter theuser may select one or more 
items. If the multiple argument is nonzero and present, multiple 
selection may be done.</p>

<h3>Return Value:</h3>

<p>The item selected is returned, or if multiple is active, the 
items selected are returned as a set.  OK or Cancel status of 
the dialog itself is available through  
<a href="#dialogOK"> dialogOK( ) </a>.</p>

<h3>See Also:</h3>
<p>
<a href="#dialogOK"> dialogOK( )</a> ,
<a href="#getinistring">getinistring( )</a> , 
<a href="#stadlginistring">stadlginistring( )</a> <br/>
<a href="#sysdir">sysdir( )</a> ,
<a href="#concat">concat( )</a> ,
<a href="#selectfromset">selectfromset( )</a> ,
<a href="#selectdialogr"> selectdialogr( ) </a>,
<a href="#selectdialog">selectdialog( )</a> 
</p>

<p>
<a rel="up" href="#S"> ^ --S-- </a>
</p>

<!-- ================================= -->
<hr/><a name="selectfromset"></a> <h2>selectfromset</h2>

<h3>Function Name: selectfromset( ) -- RCONN 16 LCXCLI 32c</h3>
<h3>Synopsis:</h3>
<pre><em>keyvalue</em><b> = selectfromset( </b><em>title</em><b> ,</b><em>prompt</em><b> ,</b><em>inputset</em><b>);</b></pre>
<pre><em>keyvalue</em><b> = selectfromset( </b><em>title</em><b> ,</b><em>prompt</em><b> ,</b><em>inputset</em><b> ,</b><em>multiple</em><b>);</b></pre>

<h3>Description:</h3>

<p>Ths function reads the elements of a given set, and lists these in a dialog, whereafter the 
user may select one or more items. If the multiple argument is nonzero and present, 
multiple selection may be done.</p>

<h3>Return Value:</h3>
<p>The item selected is returned, or if multiple is active, the items selected are returned as a set.  </p>

<p>On the 32-bit systems, the returned value is blank when 
the dialog is cancelled, so the <a href="#notext"> notext( )</a>
function can be used to detect this. </p>

<p> On the 16-bit systems, the OK or Cancel status of the dialog itself is available 
through  <a href="#dialogOK"> dialogOK( ) </a>.  </p>

<h3>See Also:</h3>
<p>
<a href="#dialogOK">dialogOK( )</a> , 
<a href="#getinistring">getinistring( )</a> , 
<a href="#stadlginistring">stadlginistring( )</a> <br/>
<a href="#sysdir">sysdir( )</a> ,
<a href="#concat">concat( )</a> ,
<a href="#notext">notext( )</a> ,
<a href="#selectdialog">selectdialog( )</a> 
</p>

<p>
<a rel="up" href="#S"> ^ --S-- </a>
</p>

<!-- ================================= -->
<hr/><a name="ServerReport"></a> <h2>ServerReport</h2>
<h3>Function Name: ServerReport( ) -- NCONN 32c</h3>
<h3>Synopsis:</h3>
<pre><em>vpx</em><b> = ServerReport(</b><em>function</em><b>, </b><em>arg1</em><b>, ... );</b></pre>

<h3>Description:</h3>
<p>This function is used for running reports on the server. It is similar
to the <a href="#LCXRPC">LCXRPC( )</a> 
function, but allows for more data to be returned.  
The mechanism expects there to be a defined function on the server which
uses functions such as 
<a href="#ConSelect">ConSelect( )</a> 
<a href="#RepCopy">RepCopy( )</a> ,
or <a href="#RepServe">RepServe( )</a> 
(followed by <a href="#RepCordon">RepCordon( )</a>, and <a href="#RepPut">RepPut( )</a> )
which generates some form of report-data, which is 
then transmitted across to the client. The value from
<a href="#LCXRPC">LCXRPC( )</a> could only be a single string or set.</p>

<p>This server-side function should return the report-data as a return
value. It should not call 
<a href="#RepClose">RepClose( )</a> 
on this itself, as the report structure will have to last until 
the data has been sent to the client.
The system will do the necessary equivalent of the RepClose() function call
afterwards. This also means that if the report to be sent is a server-side
cached report stored as a global, the report should be duplicated with
<a href="#RepCopy">RepCopy( )</a> 
and the copy be sent out as the return value.</p>

<h3>Return value:</h3>
<p>The function returns a report-structure on the client, similar to the
one passed in from the server-side function, which may be examined 
further using
<a href="#RepInfo">RepInfo( )</a> and 
<a href="#RepGet">RepGet( )</a>, and it may be sorted or 
otherwise manipulated on the client side using 
<a href="#RepControl">RepControl( )</a> , 
<a href="#RepCordon">RepCordon( )</a>, and 
<a href="#RepPut">RepPut( )</a>. When it is no longer needed, it 
must be deallocated using 
<a href="#RepClose">RepClose( )</a>, lest memory is leaked. </p>

<h3>Availability:</h3>
<p>Since the <em>function</em> is called on the server, it must exist there. </p>

<a name="ServerReport.20Example"></a>
<h3>Example</h3>

<p>The following example shows how the server-side function and the 
client-side code call to that function cooperate. </p>
<pre>
/* Server-side report. */ 
DoSomeServerReport(string item1, string item2)
{
    string jc; 
    string vpx; 

    /* Create 4 columns */ 
    vpx = RepServe(4); 

    print(__HERE__, "item1 = ", item1, " item2=", item2); 

    /* Produce 10 rows of test-rabbits. */ 
    for(jc = 0; jc &lt; 10; jc+=1)
    {
        RepCordon(1, vpx);
        RepPut(-1, 0, concat("Test 1 ", jc), vpx);
        RepPut(-1, 1, concat("Test 2 ", jc), vpx);
        RepPut(-1, 2, concat("Test 3 ", jc), vpx);
        RepPut(-1, 3, concat("Test 4 ", jc), vpx);
    }

    print(__HERE__, "Report size",
        " R=", RepInfo("rows", vpx), 
        " C=", RepInfo("cols", vpx) ); 

    return(vpx);
}
</pre>

<p>On the Client side, the function using this will look like:</p>

<pre>
/* Read a report from the server. The server program for
    constructing this is the function DoServerReport()
    defined in the server macrocode. 
*/ 
testservrep()
{
    string vpx;
    string rcount, ccount, rj, cj;
    string Report, item;

    /* This causes the server to generate a report and the data of it to
        be sent to the client.  The vpx object is the data of the Report. */ 

    vpx = ServerReport("DoSomeServerReport", 
        "Argument Hei1", "Argument Hallo2"); 

    message(__HERE__, "Report size",
        " R=", RepInfo("rows", vpx), 
        " C=", RepInfo("cols", vpx) ); 

    if(vpx)
    {
        rcount = RepInfo("rows", vpx);
        ccount = RepInfo("cols", vpx); 

        Report = RepCreate("From server", 
            "P", "repform.lcx mcform.lcx", "printpage", 
            makeset("CA", 
                "Field 1", 20, 
                "Field 2", 20, 
                "Field 3", 20, 
                "Field 4", 20) );  

        for(rj = 0; rj &lt; rcount; rj+=1)
        {
            if(rj != 0) { RepCordon(1, Report); } 

            for(cj = 0; cj &lt; ccount; cj += 1)
            {
                item = RepGet(rj-rcount, cj, vpx); 

                /* message(__HERE__, "Item from row=", rj, 
                    " col=", cj, " = ", item);  */ 

                RepPut(-1, cj, item, Report); 
            }
        }
        RepRefresh(Report); 
        RepClose(vpx); 
    }
    return(0);
}
</pre>

<h3>See Also:</h3>
<p>
<a href="#RepServe">RepServe( )</a> ,
<a href="#RepCordon">RepCordon( )</a> ,
<a href="#RepPut">RepPut( )</a> ,
<a href="#RepInfo">RepInfo( )</a> ,
<a href="#RepGet">RepGet( )</a> ,
<a href="#RepClose">RepClose( )</a> ,
<a href="#LCXRPC">LCXRPC( )</a> 
</p>

<p>
<a rel="up" href="#S"> ^ --S-- </a>
</p>

<!-- ================================= -->
<hr/><a name="serverindex"></a> <h2>serverindex</h2>
<a name="serverindexdirect"></a> <h2>serverindexdirect</h2>

<h3>Function Name: serverindex( ) -- NCONN 32c TMGT 32s</h3>
<h3>Function Name: serverindexdirect( ) -- NCONN 32c TMGT 32s</h3>

<h3>Synopsis:</h3>
<pre><em>report</em><b> = serverindex(</b><em>siname</em><b>, </b><em>table</em><b>, </b><em>itemset</em><b>, </b><em>restriction</em><b>);</b></pre>
<pre><em>report</em><b> = serverindexdirect(</b><em>starepref</em><b>, </b><em>dialogref</em><b>, </b><em>treelinelist</em><b>, </b><em>table</em><b>, </b><em>itemset</em><b>, </b><em>restriction</em><b>);</b></pre>

<h3>Description:</h3>
<p>These functions run a status-index report, either as specified by <em>siname</em>, 
or based on the individual elements 
<em>starepref</em> which should refer to a section in STAREP.INI for the report layout, 
<em>dialogref</em> which should refer to a section in STADLG.INI for status-code values, and
<em>treelinelist</em> which should refer to one or more entries in section [$LINES] in statrees.ini. </p>

<p>The report will start running from the indicated table <em> table</em>, and the objects in that table, 
<em>itemset</em>, which may be a set of several objects. The <em>restriction</em>
allows the report to be limited to certain records with specific status,
disciplines, and other variables. </p>

<h3>Return value:</h3>
<p>The returned value is a report handle, which may be examined by functions
such as <a href="#RepInfo">RepInfo( )</a> or <a href="#RepGet">RepGet( )</a>, 
and manipulated with <a href="#RepControl">RepControl( )</a>, like other report-data sets.  </p>

<p>This Report will have internal legends set, so 
<a href="#RepInfo">RepInfo("legends index", Report)</a> calls will return these.</p>

<p>When the report is no longer needed, it should be deallocated using 
<a href="#RepClose">RepClose( )</a>. Failure to do this will cause 
memory leakage, and eventually a crash. </p>

<h3>See Also:</h3>
<p>
<a href="#RepClose">RepClose( )</a> ,
<a href="#RepInfo">RepInfo( )</a> ,
<a href="#RepGet">RepGet( )</a> ,
<a href="#RepControl">RepControl( )</a> ,
<a href="#statusindex">statusindex( )</a> ,
<a href="#statusindexdirect">statusindexdirect( )</a> ,
<a href="#statusindexjor">statusindexjor( )</a> <br/>
<a href="#statusindexupward">statusindexupward( )</a> <br/>
<a href="#RepServe">RepServe( )</a> ,
<a href="#RepCordon">RepCordon( )</a> ,
<a href="#RepPut">RepPut( )</a> ,
<a href="#LCXRPC">LCXRPC( )</a> ,
<a href="#RepLoad">RepLoad( )</a> 
</p>

<p>
<a rel="up" href="#S"> ^ --S-- </a>
</p>

<!-- ================================= -->

<hr/><a name="serverindexupward"></a><h2>serverindexupward</h2>

<a href="#serverindexupward">serverindexupward( )</a> 
<h3>Function Name: serverindexupward( ) -- TMGT 32s NCONN 32c</h3>

<h3>Synopsis:</h3>
<pre><em>report</em><b> = serverindexupward(</b><em>starepref</em><b>,</b><em>dialogref</em><b>,</b><em>treelinelist</em><b>,</b><em>table</em><b>,</b><em>pivot</em><b>,</b><em>restriction</em><b>,</b><em>itemset</em><b>);</b></pre>

<h3>Description:</h3>
<p>This function pulls a report from the whole or part of the Grand Report 
associated with the specified <em>starepref</em>, 
<em>dialogref</em> and <em>treelinelist</em>, and using the level 
corresponding to the <em>table</em> as the displayed top level. 
The <em>pivot</em> table is expected to be at the level from which equipment 
hierarchies go in one direction, and system variants go in the other 
direction. This is frequently <b>CERTAC1</b>, subsystems, or it could be 
some other similarly situated grouping, such as <b>WORKPACK</b>. </p>

<p>The <em>itemset</em> can be <b>*</b> for all items, or a 
set (assembled with <a href="#makeset">makeset( )</a> ) of the 
identifiers from the <em>table</em> that are to be reported on.  
The <em>restriction</em> can be a
<a href="#Secondary.20relational.20Expressions"> secondary expression </a>
limiting the set of records to ones where this expression evaluates as true.
For example, limiting to some disciplines or status-values. Like
<a href="#statusindexupward">statusindexupward( )</a>, the 
field-names and table-names in the expressions must refer to
existing fields in the report, with the same table-name and field-name
as used in the original section in starep.ini.
</p>

<h3>Return Value:</h3>
<p>The function returns a non-windowed report with all the
requested records in it, in the Grand Report format.</p>

<p>Remember to deallocate this report with
<a href="#RepClose">RepClose( )</a> 
when it is no longer needed.</p>

<h3>See Also:</h3>
<p>
<a href="#makeset">makeset( )</a> <br/>
<a href="#RepClose">RepClose( )</a> <br/>
<a href="#statusindexupward">statusindexupward( )</a> <br/>
<a href="#serverindex">serverindex( )</a> <br/>
<a href="#serverindexdirect">serverindexdirect( )</a> <br/>
<a href="#Secondary.20relational.20Expressions"> Secondary Expressions. </a><br/>
</p>

<p>
<a rel="up" href="#S"> ^ --S-- </a>
</p>

<!-- ================================= -->
<!-- ================================= -->
<hr/><a name="serverinistring"></a> <h2>serverinistring</h2>

<h3>Function Name: serverinistring( ) -- NCONN 32c TMGT 32s</h3>
<h3>Synopsis:</h3>
<pre><em>string</em><b> = serverinistring(</b><em>filename</em><b>, </b><em>section</em><b>, </b><em>entry</em><b>);</b></pre>

<h3>Description and return value:</h3>
<p>Similar to <a href="#getinistring">getinistring( )</a>, this function reads the value of a <em>entry</em> in
a <em>section</em> of an INI file, but in this case, the INI file is always one that is associated with the server. 
If the file, section, or entry is not found, a blank value is returned. </p>

<p>On the server side, this function is the same as 
<a href="#getinistring">getinistring( )</a> 
The reason for this function name being known on the server is that certain LCX code, notably in reports, 
may be run on either the server or the client, so the <b>serverinistring( )</b> 
call will work the same for both. 
<a href="call3206.html#Cat6232"> The on-field functions </a>
defined with <a href="evini.html#LCXMACRO"> $LCXMACRO entries </a> in View Windows 
will run on the client when in the View, but 
on the server in the process of generating a Quick Report. </p>

<p>On the client side, the server itself is asked to look at the file, so 
there is no need for having mapped the disk drive for the 
<a href="serverini.html#section.20drives"> server INI </a>
file from the client. This also means that
even if such a disk drive is mapped, the function will fail unless the server is actually running.  </p>

<p>The ini-file name may be prefixed with a numerical drive,  to be converted using the server-side
variant of <a href="#ExpandPath">ExpandPath( )</a> but this will only refer to the server's numerical
drives, which may not be the same as the ones the client uses. The purpose of this function 
is for macro functions in the client to read entries out of files such as <b>STATREES.INI</b> which 
belongs to the server code.  Internally, this functionality is used with status-dialogs.</p>

<p>Note that for <b>STADLG.INI</b>, the function
<a href="#stadlginistring">stadlginistring( )</a> 
should be used instead, as it is faster.</p>

<h3>Availability:</h3>
<p>This function is available in both client and server execution environments. 
It has identical calling semantics as the <a href="#getinistring ">getinistring ( )</a> 
function which it replaces for those occasions where the client wants to read something out of an INI file otherwise
mostly used by the server.  On the server, this function is identical to 
<a href="#getinistring">getinistring( )</a>.  The typical areas of use
for this function is to examine the contents of STADLG.INI for status-inspections and 
<a href="call0001.html"> get-status functions </a>.</p>

<h3>See Also:</h3>
<p>
<a href="#stadlginistring">stadlginistring( )</a> <br/>
<a href="call3206.html#Cat6232">Operations -- Category 6 (32-bit) On-field functions </a><br/>
<a href="evini.html#LCXMACRO"> View INI files - $LCXMACRO entries</a><br/>
<a href="call0001.html"> Get and Set Status -- Category 1  </a><br/> 
<a href="serverini.html#section.20drives"> Server INI [DRIVES] section</a><br/>
<a href="#getinistring">getinistring( )</a> <br/>
</p>

<p>
<a rel="up" href="#S"> ^ --S-- </a> 
</p>


<!-- ================================= -->
<hr/><a name="SetEUser"></a> <h2>SetEUser( )</h2> 

<h3>Function Name: SetEUser( ) -- NCONN 32c</h3>
<h3>Synopsis:</h3>
<pre><em>status</em><b> = SetEUser(</b><em>newusername</em><b>);</b></pre>
<pre><em>status</em><b> = SetEUser("");</b></pre>

<h3>Description:</h3>
<p>This function allows us to temporarily set another 
active user of WinPCS, as the <em>newusername</em>.  To 
revert back to the original logged-in user, call the function 
with the blank username.</p>

<h3>Return Value:</h3>
<p>The function returns 0 for OK, and non-zero values for various
errors associated with verifying that the username is actually
a valid WinPCS username. </p>

<p>The function
<a href="#DefinedUser">DefinedUser( )</a> 
can be used to verify that a user and password exist -- this function
only checks and never changes the effective user-name.</p>

<h3>See Also:</h3>
<a href="#DefinedUser">DefinedUser( )</a> 
<p>

<a rel="up" href="#S"> ^ --S-- </a> 
</p>

<!-- ================================= -->
<hr/><a name="setitem"></a> <h2>setitem</h2>

<h3>Function Name: setitem( ) -- LCX 16 LCX 32s LCX 32c LCX 64</h3>
<h3>Synopsis:</h3>
<pre><em>item</em><b> = setitem(</b><em>set</em><b>, </b><em>index</em><b>);</b></pre>

<h3>Description and Return Value:</h3>
<p> The selected part of the set, if available, is returned. If the set itself is blank, or the
index does not refer to some element of the set, a blank, length 0, string is returned instead.</p>

<p>If the selected item is an embedded set, this will be returned in its entirety; then another call
to setitem( ) on this will extract its individual elements.</p>

<h3>See Also:</h3>
<p>
<a href="#substr">substr( )</a><br/>
<a href="#makeset">makeset( )</a><br/>
<a href="#converttoset">converttoset( )</a><br/>
<a href="#tabtoset">tabtoset( )</a><br/>
</p>

<p>
<a rel="up" href="#S"> ^ --S-- </a>
</p>

<!-- ================================= -->
<hr/><a name="setlen"></a> <h2>setlen</h2> 

<h3>Function Name: setlen( ) -- LCX 16 LCX 32s LCX 32c LCX 64</h3>
<h3>Synopsis:</h3>
<pre><em>length</em><b> = setlen(</b><em>set</em><b>);</b></pre>

<h3>Description:</h3>
<p>This function counts the number of elements in a set. 
An ordinary, non-set, string is considered equivalent a 
one-element set, and a blank string is a zero-element set.
An embedded set inside a set is considered one item of the parent set. 
In order to examine this embedded set further it should be extracted with
<a href="#setitem">setitem( )</a> 
and then setlen( ) will give the length of that sub-set. 
</p>

<h3>Return Value:</h3>
<p>Number of elements in the set.</p>

<h3>See Also:</h3>
<p><a href="#strlen">strlen( )</a> ,<br/>
<a href="#setitem">setitem( )</a> <br/>
</p>

<p>
<a rel="up" href="#S"> ^ --S-- </a> <br/>
</p>

<!-- ================================= -->
<hr/><a name="SetProps"></a> <h2>SetProps</h2>
<h3>Function Name: SetProps( ) -- NCONN 32c TMGT 32s </h3>

<h3>Synopsis:</h3>
<pre><em>status</em><b> = SetProps(</b><em>table</em><b>, </b><em>serial</em><b>, </b><em>nameset</em><b>, </b><em>valueset</em><b>);</b></pre>

<h3>Description:</h3>
<p>This function assigns one or more property values, a associated named strings, 
on a particular record in a table, 
specified in the arguments. The <em>serial</em> is the record number, 
as defined in CXDICT ITEMUNIFLD, most commonly the value of the field RSERIAL 
of the record in the table <em>table</em>.</p>

<p>There may be several properties set at once, their names are to be listed in the <em>nameset</em>,
and their values may be listed in the the <em>valueset</em>. This is similar to what is done for
<a href="#multiput">multiput( )</a> 
and it may be used to limit network traffic. At present, all properties are marked with a type of
"text". Other types may be put into use later.</p>

<p>Properties are never erased, when setting new values of a property, the old value
becomes marked as voided, and it is normally omitted from the listings.</p>


<h3>See Also:</h3>
<p>
<a href="#ListProps">ListProps( )</a> , 
<a href="#multiput">multiput( )</a> ,
<a href="#makeset">makeset( )</a> 
</p>

<p>
<a rel="up" href="#S"> ^ --S-- </a> <br/>
</p>

<!-- ================================= -->
<hr/><a name="setreplace"></a> <h2>setreplace</h2>
<h3>Function Name: setreplace( ) -- LCX 16 LCX 32s LCX 32c LCX 64 </h3>

<h3>Synopsis:</h3>
<pre><em>newset</em><b> = setreplace(</b><em>set</em><b>, </b><em>index</em><b>, </b><em>newvalue</em><b>);</b></pre>

<h3>Description:</h3>
<p> Replaces a value in a set, at the specified index.  The modified set is returned.  </p>

<h3>Availability:</h3>
<p>Some 16-bit implementations never worked as expected, so some 
workaround had to be implemented. </p>

<h3>See Also:</h3>
<p>
<a href="#makeset">makeset( )</a> , 
<a href="#setitem">setitem( )</a> ,
<a href="#setlen">setlen( )</a> 
</p>

<p>
<a rel="up" href="#S"> ^ --S-- </a>
</p>


<!-- ================================= -->
<hr/><a name="SIRepGet"></a> <h2>SIRepGet</h2>
<h3>Function Name: SIRepGet( ) -- TMGT 32s </h3>

<h3>Synopsis:</h3>
<pre><em>value</em><b> = SIRepGet(</b><em>column</em><b>, </b><em>sireport</em><b>);</b></pre>

<h3>Description:</h3>
<p>This function reads a value from a column in the most recent record of a status index report
identified as <em>sireport</em>, during its construction of same. This is meant to be used in 
field callback functions to examine and and possibly change the data in the record,  before the 
SI report itself is "published". 
The <em>column</em> is the column of interest, 0 based, and the <em>sireport</em> refers to 
the status index report where this field appears. This will be coming in as the fourth argument
in the <a href="call3209.html">Field Callback Function</a>. </p>

<h3>Availability:</h3>
<p>Only in status index field callback functions, as referenced in STAREP.INI. 
and <a href="call3209.html">execution category 9</a>.
Only the part of the most recent row prior to the field under consideration is actually available,
as the later part of the record hasn't been established at the time the on-field function is called. 
Better means of editing data is available in post-processing functions that use the regular 
Report data structures.  </p>

<h3>See Also:</h3>
<p>
<a href="#SIRepPutExample">Example under SIRepPut( )</a> , 
<a href="#RepGet">RepGet( )</a> , 
<a href="#SIRepPut">SIRepPut( )</a> , 
<a href="call3209.html">Status Index Callback functions,  category 9</a>.
</p>

<p>
<a rel="up" href="#S"> ^ --S-- </a>
</p>


<!-- ================================= -->
<hr/><a name="SIRepPut"></a> <h2>SIRepPut</h2>
<h3>Function Name: SIRepPut( ) -- TMGT 32s </h3>

<h3>Synopsis:</h3>
<pre><em>value</em><b> = SIRepPut(</b><em>column</em><b>, </b><em>value</em><b>, </b><em>sireport</em><b>);</b></pre>

<h3>Description:</h3>
<p>This function can change a value in a column in the most recent record of a status index report
during the construction of same. This is meant to be used together with <a href="#SIRepGet">SIRepGet( )</a> 
in field callback functions to change the data in the record,  before the SI report is "published". 
The <em>column</em> is the column of interest, 0 based, and the <em>sireport</em> refers to 
the status index report where this field appears. This will be coming in as the fourth argument
in the <a href="call3209.html">Field Callback Function</a>.  
The <em>value</em> is the value to be written to the field.</p>

<h3>Availability:</h3>
<p>Only in status index field callback functions, as referenced in STAREP.INI. 
and <a href="call3209.html">execution category 9</a>.
Only the part of the most recent row prior to the field under consideration is actually available, later fields
in the record will be overwritten when the fields there are evaluated. 
Better means of editing data is available in post-processing functions that use the regular 
Report data structures.
</p>

<a name="SIRepPutExample"/>
<h3>Example:</h3>
<p>Field definition in STAREP.INI: </p>
<pre>
#leaf #ITEMFIELD TagOrID=30 (Tag or Check)
</pre>

<p>The matching function <b>TagOrID()</b> would then be something like, 
where the report-identifier has been emphasized in boldface: </p>
<pre>
TagOrID(string itemID, string treeline, string rootitem, string <b>reportid</b>, string columnindex)
{
    string leaftable, i, otherid;

    i = setlen(treeline);
    leaftable = setitem(treeline, i-1);

    if(("REF" != substr(leaftable, 1, 3)) &amp;&amp; ("AUT" != substr(leaftable, 1, 3)))
    {
        /* we have identified the leaf-table as being neither REF nor AUT something. */
        otherid = SIRepGet(columnindex-1, <b>reportid</b>);
        SIRepPut(columnindex-1, itemID, <b>reportid</b>);
        return(otherid);
    }
    else
    {
        /* we have identified the leaf-table as being REF or AUT something. */
        SIRepPut(columnindex-1, "", <b>reportid</b>); 
    }
    return(itemID);
}
</pre>

<p>Note that these on-field functions frequently only have been 
defined using the first one or two arguments, ignoring the others, 
but there are actually five arguments made available, as per the reference
<a href="call3209.html">Status Index Callback functions, category 9</a>.  </p>

<h3>See Also:</h3>
<p>
<a href="#RepPut">RepPut( )</a> , 
<a href="#SIRepGet">SIRepGet( )</a> , 
<a href="call3209.html">Status Index Callback functions,  category 9</a>.
</p>

<p>
<a rel="up" href="#S"> ^ --S-- </a>
</p>



<!-- ================================= -->
<hr/><a name="site"></a> <h2>site</h2>

<h3>Function Name: site( ) -- RCONN 16</h3>
<h3>Synopsis:</h3>
<pre><em>code</em><b> = site( );</b></pre>

<h3>Return Value:</h3>
<p>This function returns the current site-code, as defined in the ANCHOR.DLL</p>

<h3>Availability:</h3>
<p>This function only exists in the 16-bit systems</p>

<h3>See Also:</h3>
<p>
<a href="#user">user( )</a> , 
<a href="#sysdir">sysdir( )</a>
</p>

<p>
<a rel="up" href="#S"> ^ --S-- </a>
</p>


<!-- ================================= -->
<hr/><a name="sitecodes"></a> <h2>sitecodes</h2>

<h3>Function Name: sitecodes( ) -- NCONN 32c</h3>
<h3>Synopsis:</h3>
<pre><em>code</em><b> = sitecodes( );</b></pre>

<h3>Return Value:</h3>
<p>This function returns the site-codes associated with the logged-in user.
This is whatever is in the field SITE_CODE in the USER (or WUSER) table,
in the record for this user.
</p>

<h3>Availability:</h3>
<p>This function only exists on the 32-bit clients.</p>

<h3>See Also:</h3>
<p>
<a href="#user">user( )</a> , 
<a href="#pcs_permission">pcs_permission( )</a>
</p>

<p>
<a rel="up" href="#S"> ^ --S-- </a>
</p>


<!-- ================================= -->
<hr/><a name="sortset"></a> <h2>sortset</h2>

<h3>Function Name: sortset( ) -- LCX 16 LCX 32s LCX 32c LCX 64</h3>
<h3>Synopsis:</h3>
<pre><em>sorted</em><b> = sortset(</b><em>unsorted</em><b>, </b><em>command</em><b>);</b></pre>

<h3>Description:</h3>
<p>This function takes a set, <em>unsorted</em>, and a <em>command</em> 
indicating how to sort the set, and returns a copy of the set where the 
elements have been reordered according to the 
command given by the characters in <em>command</em>. 
These are none, one or more of:</p>

<p> <b>N</b> for Numeric ordering of the (then expected numeric) data. 
This sorts the data according to numerical value, rather than 
according to spelling.<br/>
<b>R</b> for Reverse ordering. The sorting is done alphabetically 
or numerical as per the absence or presence of the <b>N</b> command, 
but the result are ordered highest values first.<br/>
<b>I</b> for Case-Insensitive. Does not affect Numeric ordering, but 
causes upper and lower case letters to be treated the same in 
alphabetical sorting.</p>

<p>The input set can be generated by any function returning a set, 
including but not limited to 
<a href="#makeset">makeset( )</a>, 
<a href="#converttoset">converttoset( )</a>,
or <a href="#connset">connset( )</a>.</p>

<h3>Return Value:</h3>
<p>The return value is the sorted copy of the input set.</p>

<h3>See Also:</h3>
<p>
<a href="#makeset">makeset( )</a> , 
<a href="#converttoset">converttoset( )</a> ,
<a href="#connset">connset( )</a>,
<a href="#setitem">setitem( )</a>,
<a href="#setlen">setlen( )</a>
</p>


<p>
<a rel="up" href="#S"> ^ --S-- </a>
</p>

<!-- ================================= -->
<hr/><a name="SourceName"></a> <h2>SourceName</h2>
<h3>Function Name: SourceName( ) -- INSPECT 32c SYNFARE 32c </h3>

<h3>Synopsis:</h3>
<pre><em>name</em><b> = SourceName();</b></pre>

<h3>Description:</h3>
<p>This function is defined with Inspect and SYNFARE looping functions. It returns the name of the
table or data-set under consideration. For Inspect, this will be the name of the table opened, 
for SYNFARE this will be the table name or file name or Excel sheet name for the data being worked on.
For Inspect and SYNFARE, the function <a href="#TargetName">TargetName( )</a> is synonymous.
</p>

<h3>Availability:</h3>
<p>This function is only available under Inspect and SYNFARE for-all-record processing functions. </p>

<h3>See Also:</h3>
<p>
<a href="#TargetName">TargetName( )</a> <br/>
<a href="#InValue">InValue( )</a>  <br/>
<a href="#OutValue">OutValue( )</a> 
</p>

<p>
<a rel="up" href="#S"> ^ --S-- </a>
</p>

<!-- ================================= -->
<hr/><a name="SQLexec"/><h2>SQLexec( )</h2> 

<h3>Function Name: SQLexec( ) -- TMGT 32s</h3>

<h3>Synopsis:</h3>
<pre>
<b>infoset = SQLexec(</b><em>query</em><b>);</b>
<b>infoset = SQLexec(</b><em>query</em><b>, </b><em>tablehint</em><b>);</b>
<em>report</em><b> = setitem(infoset, 0);</b>
<em>status</em><b> = setitem(infoset, 1);</b>
<em>info</em><b> = setitem(infoset, 2);</b>
</pre>

<h3>Description:</h3>
<p>This function accepts an SQL query and sends it off to the
database system underlying WinPCS. It returns the results of
the query in a Report structure, which can later be processed. 
</p>

<p>The second argument, <em>tablehint</em> optionally allows running queries
on tables living in other database files than the main one, 
on those systems where there are several database-files. The 
<em>tablehint</em> is supposed to be the name of one table in the
desired alternate database file. It would typically be the same
as the table included in a SELECT statement.</p>



<h3>Return Value:</h3>
<p>The returned value is a set of three elements: </p>
<p>The first element is the report, referring to the results of the query, 
if the query had any results to return.  Like all WinPCS reports,
this can be examined further with functions like
<a href="#RepInfo">RepInfo( )</a> 
<a href="#RepGet">RepGet( )</a> 
and should eventually be deallocated using
<a href="#RepClose">RepClose( )</a> .</p>

<p>The second element is a numerical status value; it is
usually 0 for OK and non-0 for various errors. </p>

<p>The third element contains an explanation of any 
error.</p>


<h3>Availability:</h3>
<p>This function only works on systems that use an SQL database.
ISAM (BTRS) systems will not return anything useful from this 
function.</p>

<h3>See Also:</h3>
<p>
<a href="#RepInfo">RepInfo( )</a> ,
<a href="#RepGet">RepGet( )</a> ,
<a href="#RepClose">RepClose( )</a> ,
<a href="#ConSelect">ConSelect( )</a> 
</p>




<p>
<a rel="up" href="#S"> ^ --S-- </a>
</p>

<!-- ================================= -->
<hr/><a name="stadlginientries"/><h2>stadlginientries( )</h2> 

<h3>Function Name: stadlginientries( ) -- TMGT 32s</h3>
<h3>Synopsis:</h3>
<pre><em>entries</em><b> = stadlginientries(</b><em>section</em><b>);</b></pre>

<h3>Description:</h3>
<p>This function looks up a section in the cached stadlg.ini file, 
and returns the entries defined in that section as a set of values, in <em>entries</em>.</p>

<h3>See Also:</h3>
<p>
<a href="#serverinistring">serverinistring( )</a> , 
<a href="#stadlginistring">stadlginistring( )</a> , 
<a href="#getinistring">getinistring( )</a> 
</p>

<p>
<a rel="up" href="#S"> ^ --S-- </a>
</p>

<!-- ================================= -->
<hr/><a name="stadlginistring"/><h2>stadlginistring( )</h2> 

<h3>Function Name: stadlginistring( ) -- NCONN 32c TMGT 32s</h3>
<h3>Synopsis:</h3>
<pre><em>string</em><b> = stadlginistring(</b><em>section</em><b>, </b><em>entry</em><b>, </b><em>defaultvalue</em><b>);</b></pre>

<h3>Description:</h3>
<p>This function looks up an entry in the cached stadlg.ini file, 
and returns the value found, if it was. If it was not, the 
<em>defaultvalue</em> is returned instead. </p>

<p>This function is optimized, and should be used instead of equivalent
calls to <a href="#serverinistring ">serverinistring ( )</a> 
or <a href="#getinistring">getinistring( )</a>. </p>

<h3>See Also:</h3>
<p>
<a href="#stadlginientries">stadlginientries( )</a> , 
<a href="#serverinistring">serverinistring( )</a> , 
<a href="#getinistring">getinistring( )</a> 
</p>


<p>
<a rel="up" href="#S"> ^ --S-- </a>
</p>

<!-- ================================= -->
<hr/><a name="startconnscan"></a> <h2>startconnscan</h2>

<h3>Function Name: startconnscan( ) -- RCONN 16 NCONN 32c TMGT 32s TMGT 64s</h3>
<h3>Synopsis:</h3>
<pre><em>cursor</em><b> = startconnscan(</b><em>operation</em><b> , </b><em>itembase</em><b> , </b><em>itemID</em><b>);</b></pre>

<h3>Description:</h3>
<p>Prepares the search of a connection identified by the <em>operation</em> and 
<em>itembase</em> to some object known by its itemID. 
The <a href="#findconn">findconn( )  </a>
function is used for the actual search. After the search is at an end, the 
<a href="#stopconnscan">stopconnscan( )</a>  is used.  Note that the 
<a href="#connset">connset( )</a>  function may be easier to use in some cases.</p>

<h3>Return Value:</h3>
<p><b>0</b> on failures. If non-zero, the value is used to 
identify this one out of possibly several 
concurrent connection scans, to the <a href="#findconn">findconn( ) </a>,
and <a href="#stopconnscan">stopconnscan( )</a>, functions.</p>

<h3>Availability:</h3>
<p>Construction:</p>
<p> On the 32-bit clients, we may have to change the semantics 
of the startconnscan() and findconn() functions
so as to make them return data on several specified fields, 
rather than any "current record".</p>

<p>This scanning method is expensive on 32-bit client systems,
for much the same reasons that 
<a href="#get">get( )</a> is more expensive than
<a href="#multiget">multiget( )</a> on the client. 
The <a href="#ConSelect">ConSelect( )</a>, 
<a href="#connset"> connset</a>,
<a href="#RepServe">RepServe( )</a> 
functions should be considered used instead.
Alternately, the whole loop may be offloaded to the server-side and
accessed from the client via <a href="#LCXRPC"> LCXRPC</a></p>

<h3>See Also:</h3>
<p>
<a href="#findconn">findconn( ) </a>,
<a href="#stopconnscan">stopconnscan( )</a>,
<a href="#connset">connset( )</a>,
<a href="#RepServe">RepServe( )</a>,
<a href="#ConSelect">ConSelect( )</a>,
<a href="#LCXRPC"> LCXRPC</a>
</p>

<p>
<a rel="up" href="#S"> ^ --S-- </a>
</p>

<!-- ================================= -->
<hr/><a name="statusdialog"></a><h2>statusdialog</h2>
<h3>Function Name: statusdialog( ) -- NCONN 32c </h3>

<h3>Synopsis:</h3>
<pre><em>x</em><b> = statusdialog(</b><em>itembase</em><b>, </b><em>itemid</em><b>, </b><em>certbase</em><b>, </b><em>certID</em><b>);</b></pre> 
<pre><em>x</em><b> = statusdialog(</b><em>itembase</em><b>, </b><em>itemid</em><b>, </b><em>certbase</em><b>, </b><em>certID</em><b>, </b><em>hierinfo</em><b>);</b></pre> 

<h3>Description:</h3>
<p>This function starts a status-inspection dialog, of the same kind as 
the one that appears when double-clicking in a VCONN-list or a hierarchy 
where the status of some carrier-object is to be examined or changed.  
<b>statusdialog( )</b> is and LCX front-end for this dialog.  </p>

<p>There are several possible modes, defined in DDMATRIX, where ORIGIN matches the <em>certbase</em>,
DESTIN is DCLICK, and DESTIN_FIELD has one of these values:</p>

<table border="1" cellspacing="1" cellpadding="2">
<tbody>
<tr><td>DESTIN_FIELD</td><td>Meaning</td></tr>
<tr><td>STATUS</td><td>Run the optimized status dialog</td></tr>
<tr><td>OSTATUS</td><td>Run the old, non-optimized status dialog</td></tr>
<tr><td>LCXCALL</td><td>Run an LCX function on the client</td></tr>
<tr><td>SERVERLCX</td><td>Run an LCX function on the server</td></tr>
</tbody></table>

<p>The SERVERLCX and LCXCALL modes invoke functions with the standard DDMATRIX arguments 
and return value, as per <a href="call0005.html"> Drag and Drop actions </a>. </p>

<p>OSTATUS is present for compatibility with older configurations (before 2011-01-01) and this mode
invokes client-side Get and Set functions, with the status-dialog appearing between the calls.
In some cases, the Get function has been "stolen" for use as a non-status action function; the LCXCALL
or SERVERLCX modes should really be used for this in newer configurations. It may still see use if the
Get or Set function need additional user-interactions, beyond the status dialog, since there
is no user interaction available on the server.  </p> 

<p>STATUS is intended to work the same as the OSTATUS, but with better use of the network, where
the Get function is run on the server, before the dialog-box appears. 
Afterwards, the Set function is called, and it may indicate that the final 
touches have to be done on the client side, as it runs on the server itself.  </p>

<p>For now, the default is OSTATUS, but it may be changed to STATUS sometime in the future.</p>

<p>The following discussion applies to STATUS and OSTATUS</p>

<h3>Configuration</h3>
<p>The relevant entries in STATREES.INI and STADLG.INI are as follows:</p>
<table border="1" cellspacing="1" cellpadding="2">
<tbody>
<tr><td>File</td><td>Section</td><td>Entry</td><td>Synopsis</td><td>Example</td><td>Description</td></tr>
<tr><td>STATREES.INI
</td><td>[$SINGLE]
</td><td><em>certbase</em>+<em>certbase</em>=
</td><td><em>dialog</em> <em>treeline</em>
</td><td>REFITR1+REFITR1=ITR_DLG ONE_ITR1
</td><td>This indicates to the system where to begin handling the request for a status-dialog
of some single object. The left side is the check-sheet or certificate table (<em>certbase</em>)
appearing twice (this is for historical reasons) and the right-hand side identifies the status dialog
recipe from STADLG.INI and the tree-line info for locating the status values.
</td></tr>

<tr><td>STATREES.INI
</td><td>[$LINES]
</td><td><em>treeline</em>=
</td><td><em>penult</em>&gt;<em>certbase</em> <em>catflag</em> 
</td><td>ONE_ITR1=ENGEQUIP>REFITR1 1
</td><td>This refers to a tree-line that shows where the status information is located. The value of
<em>catflag</em> is 1 to indicate it is on the connection-table and 0 to indicate it is on
the <em>certbase</em> (leaf-table). Both varieties are common. The actual table-name <em>penult</em>
serves as a placeholder; the name of any table that has this kind of status carriers will be fine here. 
</td></tr>

<tr><td>STATREES.INI
</td><td>[$LEAVES]
</td><td><em>certbase</em>=
</td><td><em>carrier</em> <em>identityfield</em> <em>statusfield</em>
</td><td>REFITR1=CONITR1 LEFT_RIGHT STATUS
</td><td>This gives more details on where the status for some "leaf" (<em>certbase</em>) is found.
The <em>carrier</em> is the table where the <em>statusfield</em> is, and the <em>identityfield</em>
is the key-field used to find the correct record.  The nature of these have to match the <em>catflag</em>
value above; the example shown matches the value of 1. For <em>catflag</em> value 0, the entry would be
similar to AUTOPL=AUTOPL PL_NO STATUS. See the STATREES.INI file for more examples.  </td></tr>

<tr><td>STADLG.INI
</td><td>[$<em>dialog</em>]
</td><td>dialog=
</td><td><em>count</em> <em>rwbits</em> <em>additional dialog items</em>
</td><td>DIALOG=3 WWW edit(AB_DATE):E_CompleteDate 
</td><td>This defines the number of state buttons in the dialog-box,
the abilities to read or change these and any further information
or controls to appear below the status buttons. More details on all these
in <a href="call0003.html">Info Init functions</a>. See also the discussion
under <a href="#wildstatus">wildstatus( )</a>. 
</td></tr>

<tr><td>STADLG.INI
</td><td>[$<em>dialog</em>]
</td><td>states=
</td><td><em>first</em> <em>second</em> <em>third</em> ... <em>last</em>
</td><td>STATES=0 3 6
</td><td>These are the relevant status values
</td></tr>

<tr><td>STADLG.INI
</td><td>[$<em>dialog</em>]
</td><td><em>statusvalue</em>=
</td><td><em>description</em>
</td><td>0=Not Started
</td><td>Each status value is defined with a numerical value and description. 
These values are what will appear in the various status-carrying tables in 
their STATUS fields. 
</td></tr>

<tr><td>STADLG.INI
</td><td>[$<em>dialog</em>]
</td><td>get=
</td><td><em>count</em> <em>rwbits</em> <em>additional dialog items</em>
</td><td>get=OnGetClist
</td><td>Before the dialog is shown, the get-function is run to prepare the 
information to be shown.  See <a href="call0001.html">Get and Set functions</a> 
for details.  
</td></tr>

<tr><td>STADLG.INI
</td><td>[$<em>dialog</em>]
</td><td>set=
</td><td><em>count</em> <em>rwbits</em> <em>additional dialog items</em>
</td><td>set=OnSetClist
</td><td>After the status-dialog is shown, and the primary status value is
copied to the carrier table, the set-function may be run to make additional
updates. Common jobs is to set the correct icon value, so the status is readily
apparent in the hierarchies.  See <a href="call0001.html">Get and Set functions</a> 
for details.  
</td></tr>

<tr><td>STADLG.INI
</td><td>[$<em>dialog</em>]
</td><td>cdatset=
</td><td><em>count</em> <em>rwbits</em> <em>additional dialog items</em>
</td><td>cdatset=OnSetCDAT
</td><td>This is a variant of the set-function which is used when setting status
via CDAT. This function is expected to be found on the client-side, in one of the pre-loaded
files listed in <a href="winpcsini.html">WINPCS.INI</a>, section [WinPCS] entry LIBRARY=.
</td></tr>

</tbody></table>

<p>The two dialogflags, readable through
<a href="#dialogOK"> dialogOK( )</a> and <a href="#dialogchange"> dialogchange( )</a>,  and
settable through <a href="#FlagDialog"> FlagDialog( ) </a> are also changed as appropriate. 
The OK flag is set if the OK button is clicked, and reset if Cancel is clicked. 
The dialog-changed flag is set if any changes have been done to the status-settings on the dialog.</p>

<p>The <i>hierinfo</i> argument is a string that appears as an argument to the <b>get</b> and 
<b>set</b> functions. It is usually some kind of hierarchy information set.</p>

<h3>Diagnostics:</h3>
<p>STATREES.INI configuration errors will be made apparent with message-boxes. </p>
<p>STAREP.INI configuration errors might show as a funny-looking dialog.</p>

<h3>Return Value:</h3>
<p>The function returns a value indicating the level of updating expected to be done in 
a hierarchy. These values are suitable as return values for 
<a href= "call0005.html"> drag-drop functions</a>.
</p>

<p>For the LCXCALL and SERVERLCX modes, this will be the value returned from the 
<a href= "call0005.html">function</a> called, as per regular <a href= "ddmatrix.html">DDMATRIX</a>rules.</p>

<table border="1" cellspacing="1" cellpadding="2">
<tbody>
<tr><td>Value</td><td>Action</td></tr>

<tr><td>0</td><td>No Update</td></tr>
<tr><td>1</td><td>Update the visuals of the object in the hierarchy</td></tr>
<tr><td>2</td><td>Close and Re-open the object in the hierarchy</td></tr>
<tr><td>3</td><td>Close and Re-open the parent of the object in the hierarchy</td></tr>
<tr><td>4</td><td>Redraw the entire hierarchy</td></tr>

</tbody></table>

<h3>See Also:</h3>
<p>
<a href="#wildstatus">wildstatus( )</a>, <br/>
<a href="#dialogOK">      dialogOK( )</a>, <br/>
<a href="#dialogchange">  dialogchange( )</a>, <br/>
<a href="call0001.html"> Get and Set Status -- Category 1  </a> <br/>
<a href="call1602.html"> Add status -- Category 2 (16-bit only)</a> <br/>
<a href="call0003.html"> Info Init -- Category 3</a> <br/>
<a href="call0005.html"> Drag and drop actions -- Category 5</a> <br/>
</p>

<p>
<a rel="up" href="#S"> ^ --S-- </a>
</p>


<!-- ================================= -->
<hr/><a name="statusindex"></a> <h2>statusindex</h2>
<a name="statusindexdirect"></a> <h2>statusindexdirect</h2>

<h3>Function Name: statusindex( ) -- NCONN 32c</h3>
<h3>Function Name: statusindexdirect( ) -- NCONN 32c</h3>

<h3>Synopsis:</h3>
<pre><em>handle</em><b> = statusindex(</b><em>SIcode</em><b>, </b><em>itemreg</em><b>, </b><em>itemID</em><b>, </b><em>restrictcode</em><b>, </b><em>postprocode</em><b>, </b><em>Paper</em><b>, </b><em>filelist</em><b>, </b><em>function</em><b>, </b><em>arguments</em><b>); </b></pre>
<pre><em>handle</em><b> = statusindexdirect(</b><em>starepref</em><b>, </b><em>dialogref</em><b>, </b><em>treelinelist</em><b>, </b><em>itemreg</em><b>, </b><em>itemID</em><b>, </b><em>restrictcode</em><b>, </b><em>postprocode</em><b>, </b><em>Paper</em><b>, </b><em>filelist</em><b>, </b><em>function</em><b>, </b><em>arguments</em><b>); </b></pre>

<h3>Availability:</h3>
<p><b>statusindex( )</b> is the 32-bit system function for starting status index reports.  
It replaces the 16-bit <a href="#varSI">varSI( )</a> function.  </p>

<p><b>statusindexdirect( )</b> is the preferred form</p>

<h3>Description:</h3>
<p><b>statusindex( )</b> runs a status index view on the status index defined as
<em>Sicode</em> in the <b>[$CSI]</b> section in <b>STATREES.INI</b>. </p>

<p><b>statusindexdirect( )</b> runs a status index view on the status index defined 
using the <em>starepref</em> report layout from <b>STAREP.INI</b>, the <em>dilogref</em> status-dialog reference
from <b>STADLG.INI</b> and the list of tree-lines, <em>treelinelist</em> as defined in section
<b>[$LINES]</b> in <b>STATREES.INI</b>. Essentially it works on the important parts of the 
specifications traditionally found in section <b>[$CSI]</b> but does not actually use 
any of the information from this section.</p>

<p>The <em>itemreg</em> table
refers to the root of the hierarchy where the index is to be run from.  This table name must of 
course appear in at least one of the tree lines associated with the status index.</p>

<p> <em>itemID</em> refers to the identity of the item or items that the SI is to run off of.
This may be a simple string, a set of one or more identities, as assembled using functions
such as <a href="#makeset"> makeset( )</a> or returned from a multiple-selection 
<a href="#selectdialog"> selectdialog( ) </a> variant. It may also,
(as of 5 January 2007), be a single "<b>*</b>" which means that the statusindex is to run on all
items in the hierarchy root table <em>itemreg</em>, not just the one or ones listed. </p>

<p> All the following arguments from the <em>restrictcode</em> onwards are optional if omitted, 
reasonable defaults will be used. </p>

<p> The <em>restrictcode</em> is an relational expression evaluating fields in the various 
tables taking part in the status index, and performing comparisons between 
these and values given as constants. Since this should be a text value passed in,
the string may be assembled using ordinary means such as concat( ). The report does not
have access to variables in the macrocode, so the values of these must be included in the
string. The value <b>1</b> passes everything, and is the default if this (and all the following 
arguments) are missing.</p>

<p> The postprocode is a reference to the postprocessing function, similar to the 
actions available in <a href="#RepControl"> RepControl( ) </a>. 
This is a multi-part set where the first part 
indicates whether this is a pushbutton action or a function in a DLL, as follows:<br/>
<b>makeset("DLL", </b><em>dllname</em><b>, </b><em>function</em><b>);</b> Run the function defined in the DLL.<br/>
<b>makeset("CMI", </b><em>action</em><b>, ... )</b> Issue push-commands on selected fields and buttons before 
displaying the Report.</p>

<p> Examples of Postprocessing calls:<br/>
<b>a = statusindex("ACSUMSI", table, items, "1", makeset("DLL","HARDING.ADD","_PostAC1") );</b><br/>
<b>a = statusindex("ACSUMSI", table, items, "1", makeset("CMI","L:#0","L:#1","P:ASORT") );</b><br/>
</p>

<p> A non-op default for this is <b>0</b>.</p>

<p> The four arguments <em>Paper</em>, <em>filelist</em>, <em>function</em>, and <em>argument</em>
refer to formatting of the report. The <em>Paper</em> refers to the paper size and
orientation, the <em>filelist</em> is the names of one or more macrocode files,
and the <em>function</em> is the formatting function being called for the report.</p>

<p> The formatting function is used for formatting the report frame.
The <em>argument</em> is passed to this function, as its eighth argument.
See the <a href="call0010.html"> Print layout documentation </a>
for further description of this function. </p>

<p> Values of <em>Paper</em> can be:<br/>
<b>0</b> for A4 or A (8.5 by 11 inches) Portrait<br/>
<b>1</b> for A4 or A (8.5 by 11 inches) Landscape<br/>
<b>2</b> for A3 or B (11 by 17 inches) Portrait<br/>
<b>3</b> for A3 or B (11 by 17 inches) Landscape<br/>
<b>8</b> for Force Printer selection dialog<br/>
<b>9</b> for Ask the user what size and orientation is desired<br/>
</p>

<h3>Return Value:</h3>
<p>The return value is the Report handle identifying the status-index report. This may be used
with subsequent calls to functions such as 
<a href="#RepInfo">RepInfo( )</a> and
<a href="#RepGet">RepGet( )</a> to read and possibly change the contents of the report. 
The statusindex( ) function returns immediately, while the report is being produced, so it may be
necessary for the LCX code to wait until the report is finished. To check this, use the 
<a href="#RepInfo">RepInfo("ready", <em>identifier</em>)</a> call which will return 0 while
the report is in progress and 1 when it is finished and ready for reading. </p>

<h3>See Also:</h3>
<p> 
<a href="#serverindex"> serverindex( ) </a>,<br/>
<a href="#serverindexdirect"> serverindexdirect( ) </a>,<br/>
<a href="call0010.html#repformat"> Report formatting </a>,<br/>
<a href="#varSI">16-bit varSI( )</a>,<br/>
<a href="#RepInfo">RepInfo( )</a>,<br/>
<a href="#RepGet">RepGet( )</a>,<br/>
<a href="#RepPut">RepPut( )</a>,<br/>
<a href="winpcsini.html">WinPCS.INI documentation</a>,<br/>
<a href="#statusindexupward">statusindexupward( )</a> <br/>
STDREP documentation, <br/>
STADLG.INI documentation, <br/>
STATREES.INI documentation, <br/>
<a href="#Secondary.20relational.20Expressions"> Secondary Expressions. </a><br/>
</p>

<p>
<a rel="up" href="#S"> ^ --S-- </a>
</p>


<!-- ================================= -->
<hr/><a name="statusindexjor"></a> <h2>statusindexjor</h2>

<h3>Function Name: statusindexjor( ) -- NCONN 32c</h3>

<h3>Synopsis:</h3>
<pre><em>report</em><b> = statusindexjor(</b><em>starepref</em><b>,</b><em>dialogref</em><b>,</b><em>treelinelist</em><b>,</b>
<em>startlevel</em><b>,</b><em>pivot</em><b>,</b>
<em>restriction</em><b>,</b><em>startitemset</em><b>,</b>
<em>orientation</em><b>,</b><em>formatfile</em><b>,</b><em>formatfunction</em><b>,</b><em>formatparam</em><b>,</b>
<em>headertext</em><b>);</b></pre>

<h3>Availability:</h3>
<p><b>statusindexjor( )</b> only works with the 64bit Windows WinPCS server.
Other server versions treats this the same as the
<a href="#statusindexupward">statusindexupward( )</a>  function. </p>

<h3>Description</h3>
<p>This function uses the data from a Join of status carriers against
a variant of the Equipment Grand Report.</p>


<h3>Return Value:</h3>
<p>The return value is the Report handle identifying the status-index report. This may be used
with subsequent calls to functions such as 
<a href="#RepInfo">RepInfo( )</a> and
<a href="#RepGet">RepGet( )</a> to read and possibly change the contents of the report. 
The statusindex( ) function returns immediately, while the report is being produced, so it may be
necessary for the LCX code to wait until the report is finished. To check this, use the 
<a href="#RepInfo">RepInfo("ready", <em>identifier</em>)</a> call which will return 0 while
the report is in progress and 1 when it is finished and ready for reading. </p>

<h3>See Also:</h3>
<p> 
<a href="#serverindex"> serverindex( ) </a>,<br/>
<a href="#serverindexdirect"> serverindexdirect( ) </a>,<br/>
<a href="call0010.html#repformat"> Report formatting </a>,<br/>
<a href="#varSI">16-bit varSI( )</a>,<br/>
<a href="#RepInfo">RepInfo( )</a>,<br/>
<a href="#RepGet">RepGet( )</a>,<br/>
<a href="#RepPut">RepPut( )</a>,<br/>
<a href="winpcsini.html">WinPCS.INI documentation</a>,<br/>
<a href="#statusindexupward">statusindexupward( )</a> <br/>
STDREP documentation, <br/>
STADLG.INI documentation, <br/>
STATREES.INI documentation, <br/>
<a href="#Secondary.20relational.20Expressions"> Secondary Expressions. </a><br/>
</p>

<p>
<a rel="up" href="#S"> ^ --S-- </a>
</p>



<!-- ================================= -->
<hr/> <a name="statusindexupward"></a> <h2>statusindexupward</h2>
<h3>Function Name: statusindexupward( ) -- NCONN 32c</h3>

<h3>Synopsis:</h3>
<pre><em>report</em><b> = statusindexupward(</b><em>starepref</em><b>,</b><em>dialogref</em><b>,</b><em>treelinelist</em><b>,</b>
<em>startlevel</em><b>,</b><em>pivot</em><b>,</b>
<em>restriction</em><b>,</b><em>startitemset</em><b>,</b>
<em>orientation</em><b>,</b><em>formatfile</em><b>,</b><em>formatfunction</em><b>,</b><em>formatparam</em><b>,</b>
<em>headertext</em><b>);</b></pre>

<h3>Description</h3>
<p>This function uses the data from a Grand Report, identified via
the <em>starepref</em> and <em>treelinelist</em>, which will be cached if
it isn't already; then a subset of the data in this report is 
copied out, with fields determined by the specifications in the 
<em>starepref</em> and <em>dialogref</em>, and possibly with further 
limitations, according to the list of start-level tags in the 
<em>startitemset</em>, and the expression <em>restriction</em>.  
The report can be formatted, just lika other 
status index reports, using the formatfile and formatfunction. When driven
from REFREP, this can use the AUTOCODE subsystem if that is defined. </p>

<p>The arguments are:</p>
<ul>
<li><em>starepref</em> - Reference to a section in STAREP.INI </li>
<li><em>dialogref</em> - Reference to a section in STADLG.INI </li>
<li><em>treelinelist</em> - Reference to an entry in the STATREES.INI
section [$LINES] identifying a list of one or more tree-lines. </li>

<li><em>startlevel</em> - Table on which the report is started. </li>

<li><em>pivot</em> - Grand Reports have a special meaning to the "pivot" 
table, This is the lowest table that is common to all tree-lines. 
Frequently this is the CERTAC1 table, though CERTMC1 or WORKPACK could
also be a pivot table in some circumstances.  </li>

<li><em>restriction</em> - This is an expression that allows for limiting
the values actually listed to a collection of status values, disciplines,
areas, etc. present in the basic result set. 
See the <a href="#Secondary.20relational.20Expressions">
Secondary Expressions.</a> for more details.</li>

<li><em>startitemset</em> - This is a list of tags in the table
<em>startlevel</em> where the report is run from. If this is 
a single *, all records in the <em>startlevel</em> table will be used. 
This should be formatted as an LCX set, using
<a href="#makeset">makeset( )</a> 
or any other function that returns a set of values.  </li>

<li><em>orientation</em> - This is one of 0 1 2 3 8 or 9; the same as 
the <em>Paper</em> argument defined for 
<a href="#statusindexdirect">statusindexdirect( )</a>. Typical values
are 1 for Landscape and 0 for Portrait </li>

<li><em>formatfile</em> - This refers to one or more LCX files where the
formatting code is. One of these can be AUTOCODE </li>

<li><em>formatfunction</em> - This is the function being used for the 
formatting, it is a standard Report formatting function, as described
in <a href="call0010.html">Report formatting functions</a> </li>

<li><em>formatparam</em> - This is an argument to the formatting function.
Special values are used with AUTOCODE. See 
<a href="call0010.html">the formatting-functions</a>
for more on the AUTOCODE subsystem.  </li>

<li><em>headertext</em> - This is the text in the header, as passed
to the formatting function. Usually pulled from REFREP. </li>
</ul>

<p>The values of <em>starepref</em>, <em>dialogref</em>, 
<em>treelinelist</em>, and <em>pivot</em> are used to identify the
relevant Grand Report.</p>

<h3>Return Value</h3>
<p>The returned value is the handle identifying the visible Report.
This can be used with functions such as
<a href="#RepInfo">RepInfo( )</a>, <a href="#RepGet">RepGet( )</a>, 
or <a href="#RepControl">RepControl( )</a> 
for any post-processing activities. </p>

<h3>See Also:</h3>
<p> 
<a href="#GrandReport">GrandReport( )</a>,<br/> 
<a href="#statusindex"> statusindex( ) </a>,<br/>
<a href="#statusindexdirect"> statusindexdirect( ) </a>,<br/>
<a href="#serverindexupward"> serverindexupward( ) </a>,<br/>
<a href="#serverindex"> serverindex( ) </a>,<br/>
<a href="#serverindexdirect"> serverindexdirect( ) </a>,<br/>
<a href="#Secondary.20relational.20Expressions"> secondary expression </a>
</p>

<p>
<a rel="up" href="#S"> ^ --S-- </a>
</p>

<!-- ================================= -->
<hr/><a name="StdField"></a> <h2>StdField</h2>

<h3>Function Name: StdField( ) -- RCONN 16 NCONN 32c TMGT 32s TMGT 64s</h3>

<h3>Synopsis:</h3>
<pre><em>fieldname</em><b> = StdField(</b><em>tablename</em><b>, </b><em>cxdictname</em><b>);</b></pre>

<h3>Description:</h3>
<p>This function looks at stored CXDICT information about tables, and returns a specified 
field. The function operates equivalent to <br/>
<b><a href="#findexact"> findexact</a>("CXDICT", "ITEMBASE", tablename);<br/>
fieldname = <a href="#get">get</a> ("CXDICT", cxdictname);</b><br/>
except that it uses preloaded information that may be present, and hence will not 
reposition CXDICT as well as being a lot more efficient.</p>

<h3>Availability:</h3>
<p>This function does not work properly unless the CXDICT table contains correct 
information.</p>

<h3>See Also:</h3>
<p>
<a href="cxdict.html">CXDICT documentation</a>, 
<a href="#findexact">findexact( )</a> ,
<a href="#get">get( )</a> ,
</p>

<p>
<a rel="up" href="#S"> ^ --S-- </a>
</p>

<!-- ================================= -->
<hr/><a name="StepDialog"></a> <h2>StepDialog</h2>

<h3>Function Name: StepDialog( ) -- NCONN 32c</h3>
<h3>Synopsis:</h3>
<pre><b>StepDialog(</b><em>title</em><b>,</b><em>tablename</em><b>,</b><em>tagnumber</em><b>,</b><em>countfield</em><b>,</b><em>textfieldroot</em><b>,</b><em>datafieldroot</em><b>,</b><em>userfieldroot</em><b>)</b></pre>
<pre><b>StepDialog(</b><em>title</em><b>,</b><em>tablename</em><b>,</b><em>tagnumber</em><b>,</b><em>countfield</em><b>,</b><em>textfieldroot</em><b>,</b><em>datafieldroot</em><b>,</b><em>userfieldroot</em><b>,makeset(</b><em>remarkfield</em><b>),makeset(</b><em>legend</em><b>))</b></pre>

<h3>Description:</h3>
<p>This function opens up a specialized status-dialog, which will display the contents of a number of
fields with dates in them to be used in a step-wise reporting. One or more optional remarks-fields
can also be included, these will appear at the end. </p>

<table border="1">
<tbody>
<tr><td>Argument</td><td>Description</td></tr>
<tr><td><em>title</em></td><td>Title of the dialog-box
</td></tr>
<tr><td><em>tablename</em></td><td>The table where the information is. All field references are to fields in this table.
</td></tr>
<tr><td><em>tagnumber</em></td><td>This is the value of the table's 
<a href="cxdict.html">ITEMFIELD</a> 
used to identify the record of interest. This is typically a tag-number, thus the name of the parameter.
</td></tr>
<tr><td><em>countfield</em></td><td>
This is the name of a field in the table that contains a value indicating how many steps to be shown. 
Thus, different records in the table can have different number of steps assigned to it, this becomes a
per-record variable.
</td></tr>
<tr><td><em>textfieldroot</em></td><td>
The legends for the Steps are found in a number of text-type fields with this name and a suffix 1, 2 etc, for the number
of steps defined in the <em>countfield</em>. 
</td></tr>
<tr><td><em>datafieldroot</em></td><td>
The data-values for the Steps are found in a number of date-type fields with this name and a suffix 1, 2 etc, for the number
of steps defined in the <em>countfield</em>. 
</td></tr>
<tr><td><em>userfieldroot</em></td><td>
The fields recording the user who performed the numbered Step are found in a number of 
text-type fields with name starting with <em>userfieldroot</em> and a suffix 1, 2 etc, for the number
of steps defined in the <em>countfield</em>. 
</td></tr>
<tr><td><em>remarkfield</em></td><td>
There may optionally be one or more additional remarks fields. This is a set listing their fieldnames in the table.
</td></tr>
<tr><td><em>legend</em></td><td>
When having the optional remarks field or fields present, this set lists their legends to be displayed on the
dialog window.
</td></tr>
</tbody>
</table>

<h3>Return Value:</h3>
<p>An integer value from the internal C StepCompletionDialog() function. </p>


<h3>See Also:</h3>
<p>
<a href="#wildstatus">wildstatus( )</a>,
STADLG.INI documentation,
<a href="#StdField">StdField( )</a>, 
<a href="#dialogOK">dialogOK( )</a> 
</p>

<p>
<a rel="up" href="#S"> ^ --S-- </a>
</p>

<!-- ================================= -->
<hr/><a name="stopconnscan"></a> <h2>stopconnscan</h2>

<h3>Function Name: stopconnscan( ) -- RCONN 16 NCONN 32c TMGT 32s TMGT 64s</h3>
<h3>Synopsis:</h3>
<pre><em>garbage</em><b> = stopconnscan(</b><em>cursor</em><b>);</b></pre>

<h3>Description:</h3>
<p>Terminates the search of a connection identified by the operation and itembase in the 
<a href="#startconnscan">startconnscan( )</a> call that generated the <em>cursor</em>.  </p>

<h3>Return Value:</h3>
<p>Not useful for anything.</p>

<h3>See Also:</h3>
<p>
<a href="#findconn">findconn( )</a> ,
<a href="#startconnscan">startconnscan( )</a> ,
</p>

<p>
<a rel="up" href="#S"> ^ --S-- </a>
</p>

<!-- ================================= -->
<hr/><a name="StoreAllTablesData"></a> <h2>StoreAllTablesData</h2>

<h3>Function Name: StoreAllTableData( ) -- TMGT 32s</h3>
<h3>Synopsis:</h3>
<pre><b>StoreAllTablesData(</b><em>directory</em><b>);</b></pre>
<pre><b>StoreAllTablesData(</b><em>directory</em><b>, </b><em>options</em><b>);</b></pre>

<h3>Description:</h3>
<p>This function produces a TXS file and a CSV data file for each of 
the tables in the system, and places them in the specified directory. 
The files will have the table-name as their names, thus for the table 
CERTAC1 there will be a file CERTAC1.TXS describing its layout and 
a file CERTAC1.CSV with the data in it.  The CSV files is in a form
suitable for reading by the 
<a href="#LoadCSVDataFromDir">LoadCSVDataFromDir( )</a> function. 
</p>

<p>Options can be given to modify the default action of placing all
TXS and CSV files for all tables together in a single directory:</p>

<table border="1"> <tbody>
<tr><td><b>S:1</b></td><td>Place the files for what is determined
to be "system tables" into their own directory, named 
<em>directory</em><b>-S</b> </td></tr>
<tr><td><b>T:0</b></td><td>Do not generate TXS files, only the 
CSV files.</td></tr>
</tbody> </table>

<p>The following tables are considered to be the "system tables":
<b>CORE, CXDICT, DDMATRIX, EDSRC, FLOC, LINKS, RCONN, REFLINK, REFREP,
STDREP, SYMT, TEMPLATE, TEMPS, TRACKER, USER, USYM</b></p>

<h3>See Also:</h3>
<p>
<a href="#DateCanonical">DateCanonical( )</a> 
<a href="#date">date( )</a> 
<a href="#time">time( )</a> 
<a href="#LCXASYNC">LCXASYNC( )</a> 
<a href="#LoadCSVDataFromDir">LoadCSVDataFromDir( )</a> 
<a href="serverini.html#section.20periodic">Server.ini periodic jobs</a> 
</p>

<p>
<a rel="up" href="#S"> ^ --S-- </a>
</p>


<!-- ================================= -->
<hr/><a name="strchr"></a> <h2>strchr</h2>

<h3>Function Name: strchr( ) -- LCX 16 LCX 32s LCX 32c LCX 64</h3>
<h3>Synopsis:</h3>
<pre><em>position</em><b> = strchr(</b><em>text</em><b>, </b><em>character</em><b>);</b></pre>

<h3>Return Value:</h3>
<p>Position base 1 of leftmost occurrance of the character if found in the text, 0 if the 
character is not found. </p>

<h3>See Also:</h3>
<p>
<a href="#strstr">strstr( )</a> ,
<a href="#strrchr">strrchr( )</a> ,
<a href="#strstr">strstr( )</a> , 
<a href="#inset">inset( )</a> ,
<a href="#getfilepath">getfilepath( )</a> , 
<a href="#getfilext">getfilext( )</a> , 
<a href="#getfilename">getfilename( )</a> 
</p>

<p>
<a rel="up" href="#S"> ^ --S-- </a>
</p>

<!-- ================================= -->
<hr/><a name="strlen"></a> <h2>strlen</h2>

<h3>Function Name: strlen( ) -- LCX 16 LCX 32s LCX 32c LCX 64</h3>
<h3>Synopsis:</h3>
<pre><em>count</em><b> = strlen(</b><em>text</em><b>);</b></pre>

<h3>Return Value:</h3>
<p>The number of characters in the argument. 0 for empty strings.</p>

<h3>See Also:</h3>
<p>
<a href="#setlen">setlen( )</a>
</p>

<p>
<a rel="up" href="#S"> ^ --S-- </a>
</p>

<!-- ================================= -->
<hr/><a name="strrchr"></a> <h2>strrchr</h2>

<h3>Function Name: strrchr( ) -- LCX 16 LCX 32s LCX 32c LCX 64</h3>
<h3>Synopsis:</h3>
<pre><em>position</em><b> = strrchr(</b><em>text</em><b>, </b><em>character</em><b>);</b></pre>

<h3>Return Value:</h3>
<p>Position base 1 of rightmost occurrance of the character if found, 0 if the character is 
not found.</p>

<h3>See Also:</h3>
<p>
<a href="#strchr">strchr( )</a> ,
<a href="#inset">inset( )</a> ,
<a href="#getfilepath">getfilepath( )</a> , 
<a href="#getfilext">getfilext( )</a> , 
<a href="#getfilename">getfilename( )</a> 
</p>


<p>
<a rel="up" href="#S"> ^ --S-- </a>
</p>

<!-- ================================= -->
<hr/><a name="strstr"></a> <h2>strstr</h2>

<h3>Function Name: strstr( ) -- LCX 16 LCX 32s LCX 32c LCX 64</h3>
<h3>Synopsis:</h3>
<pre><em>position</em><b> = strstr(</b><em>text</em><b>, </b><em>pattern</em><b>, </b><em>caseinsensitive</em><b> );</b></pre>

<h3>Description</h3>
<p>This function looks for a string <em>pattern</em>within a string <em>text</em>, 
which may be compared case-sensitive or case-insensitive, depending on the given value
of the third argument, <em>caseinsensitive</em>.  Set this to <b>0</b> for matching case exactly
or set it to <b>1</b> for matching any case. </p>

<h3>Return Value:</h3>
<p>The position base 1 of the leftmost occurrance of the substring <em>pattern</em> if 
found, <b>0</b> if the substring is not found.</p>

<h3>Example</h3>
<p>The <b>strstr()</b> function may be used simply to determine the presence or absence of the substring:</p>
<pre>

    status = get("ENGMAST", "ENG_STATUS");

    if(strstr(status, "Deleted", 1))
    {
        /* Do whatever is desired for tags marked as deleted */
    }

</pre>


<h3>See Also:</h3>
<p>
<a href="#substr">substr( )</a> ,
<a href="#strchr">strchr( )</a> ,
<a href="#inset">inset( )</a> ,
<a href="#getfilepath">getfilepath( )</a> , 
<a href="#getfilext">getfilext( )</a> , 
<a href="#getfilename">getfilename( )</a> 
</p>

<p>
<a rel="up" href="#S"> ^ --S-- </a>
</p>



<!-- ================================= -->
<hr/><a name="strword"></a> <h2>strword</h2>

<h3>Function Name: strword( ) -- LCX 32s LCX 32c</h3>

<h3>Synopsis:</h3>
<pre>/* First word */
<em>rcat</em><b> = strword(</b><em>text</em><b>, 0);</b>
<em>word</em><b> = setitem(</b><em>rcat</em><b>, 0);</b>
</pre>

<pre>/* Subsequent words */
<em>rcat</em><b> = strword(</b><em>ignored</em><b>, </b><em>rcat</em><b>);</b>
<em>word</em><b> = setitem(</b><em>rcat</em><b>, 0);</b></pre>

<h3>Description: </h3>
<p>This function pulls out space-separated words from a string <em>text</em>.
It uses the return value and the second argument to maintain positioning in
the string. </p>

<p>The second argument is 0 for the initial positioning, and
the <em>rcat</em> holds the position from which the next call is
to look at the string.</p>

<p>On the
first call, the first word is returned, and on later calls, the positioning
information established on the first call is used to find subsequent words.  </p>

<p>The string will be remembered, between the calls. </p>

<h3>Return Value:</h3>
<p>The function returns a set, where the first part is the word
that was found and the remainder of the set is the original string and an 
integer used for knowing where to continue looking on the next turn. 
On reaching the end of the string beyond the last word, the "word" 
found and returned then will be blank.
</p>

<h3>See Also:</h3>
<p>
<a href="#strchr">strchr( )</a> ,
<a href="#strrchr">strrchr( )</a> ,
<a href="#setitem">setitem( )</a> ,
<a href="#notext">notext( )</a>
</p>

<p>
<a rel="up" href="#S"> ^ --S-- </a>
</p>
<!-- ================================= -->
<hr/><a name="substr"></a> <h2>substr</h2>

<h3>Function Name: substr( ) -- LCX 16 LCX 32s LCX 32c LCX 64</h3>
<h3>Synopsis:</h3>
<pre><em>text</em><b> = substr(</b><em>string</em><b>, </b><em>start</em><b>, </b><em>length</em><b>);</b></pre>
<pre><em>text</em><b> = substr(</b><em>string</em><b>, </b><em>start</em><b>);</b></pre>
<pre><em>text</em><b> = SUBSTR(</b><em>string</em><b>, </b><em>start</em><b>, </b><em>length</em><b>);</b></pre>
<pre><em>text</em><b> = SUBSTR(</b><em>string</em><b>, </b><em>start</em><b>);</b></pre>

<h3>Description:</h3>
<p>This function takes out a part of a string <em>string</em>, from and including the position <em>start</em>, and 
<em>length</em> characters.  If the length is omitted, the entire rest of the string is copied. If the 
start position is beyond the end of the input string or the length is 0, the return value is a 
blank string.</p>

<h3>Return Value:</h3>
<p>The selected substring, if any.</p>

<h3>Limitation:</h3>
<p>Using substr() on identifiers for data and fieldnames can lead to 
code that is different to maintain. There is a semi-established 
convention for table names, in that the first 3 or 4 letters 
(AUTO- ENG- DOC- CERT- REF-) identify
a class or group of tables, but even this has exceptions: REFREP is a 
system-table, while the other REF- tables are either proformas or 
background-data.  </p>

<p>Apart from this, tag-numbers are generally so variable
so as to make most code using substr() on them to be essentially 
nonportable and probably in need of frequent changes even within a
project. The solution to this problem was the original motivation for 
making WinPCS the way it is now, using public and private identifiers, 
record numbers and RCONN connection information rather than direct 
copy-reference linkages; thus decoupling the data-layout from the 
data display.  substr() is a relic from those bad old days, but 
because this function is still quite useful when used correctly, 
it has been retained. </p>

<p>The problem of fieldnames is that we cannot know about special 
properties of the spelling of some arbitrary fieldname where it appears
in one role. Having a pushbutton reference to a fieldname in a View INI file
for example, and then making the function called depend on the spelling
of this fieldname (DOC_NO, DRAWING, ISO, PID, HU_DWG etc.) is not good.
Better in this case to have different functions, even if these are simple
fronts for another, common one. That way, if someone comes along and want
to refer to PID instead of HU_DWG, there is no weird behavior apparent. </p>

<h3>See Also:</h3>
<p>
<a href="#setitem">setitem( )</a> ,
<a href="#getfilepath">getfilepath( )</a> , 
<a href="#getfilext">getfilext( )</a> , 
<a href="#getfilename">getfilename( )</a> 
</p>

<p>
<a rel="up" href="#S"> ^ --S-- </a>
</p>

<!-- ================================= -->
<hr/><a name="sysdir"></a> <h2>sysdir</h2>

<h3>Function Name: sysdir( ) -- RCONN 16</h3>
<h3>Synopsis:</h3>
<pre><em>path</em><b> = sysdir( );</b></pre>

<h3>Return Value:</h3>
<p>This function returns the path of the ANCHOR.DLL file. including the final backslash. It 
is often used with <a href="#concat">concat( )</a> to form full paths for use in 
<a href="#getinistring">getinistring( )</a> or any of the View and Entry startup functions.</p>

<h3>Availability:</h3>
<p>This function is only defined in 16-bit systems. On all systems, this function call can be replaced by
<a href="#ExpandPath">ExpandPath</a><b>("0:\");</b>.  Also note that all functions referring to files on 32-bit systems
are now accepting reduced paths for these, so there should be little need for having to use the
<a href="#ExpandPath">ExpandPath( )</a> function either, in many places where this was mandatory on 16-bit systems. </p>

<h3>See Also:</h3>
<p>
<a href="#site">site( )</a> , 
<a href="#user">user( )</a> , 
<a href="#getinistring">getinistring( )</a> ,
<a href="#ExpandPath">ExpandPath( )</a> ,
<a href="#getfilepath">getfilepath( )</a> , 
<a href="#getfilext">getfilext( )</a> , 
<a href="#getfilename">getfilename( )</a> ,
</p>

<p>
<a rel="up" href="#S"> ^ --S-- </a>
</p>

<!-- ================================= -->
<!-- T -->



<hr/><a name="T"></a><h2>--T--</h2>
<p>
<a href="#tabtoset">tabtoset( )</a><br/>
<a href="#TableSum">TableSum( )</a><br/>
<a href="#TableSumProcess">TableSumProcess( )</a> <br/>
<a href="#TableSumSet">TableSumSet( )</a><br/>
<a href="#TableToReport">TableToReport( )</a><br/>
<a href="#TargetGet">TargetGet( )</a><br/>
<a href="#TargetName">TargetName( )</a> <br/>
<a href="#TargetPut">TargetPut( )</a><br/>
<a href="#Tagstatus">Tagstatus( )</a> <br/>
<a href="#TCPConv">TCPConv( )</a><br/>
<a href="#Text">Text( )</a><br/>
<a href="#time">time( )</a><br/>
<a href="#trace">trace( )</a><br/>
<a href="#traceconn">traceconn( )</a><br/>
<a href="#traceconnrun">traceconnrun( )</a> <br/>
<a href="#traceconnstart">traceconnstart( )</a> <br/>
<a href="#traceconnstop">traceconnstop( )</a> <br/>
<a href="#traceset">traceset( )</a><br/>
<a href="#treelinelist">treelinelist( )</a><br/>
</p>
<p>
<a rel="up" href="#Functions.20Reference"> ^ Functions Reference </a> 
<a rel="previous" href="#S"> &lt; --S-- </a>
<a rel="next" href="#U"> &gt; --U-- </a>
</p>


<!-- ================================= -->
<hr/><a name="tabtoset"></a> <h2>tabtoset</h2>

<h3>Function Name: tabtoset( )-- LCX 16 LCX 32s LCX 32c LCX 64</h3>

<h3>Synopsis:</h3>
<pre><em>set</em><b> = tabtoset(</b><em>tabset</em><b>);</b></pre>
<pre><em>set</em><b> = tabtoset(</b><em>tabset</em><b>, </b><em>sepchar</em><b>) </b></pre>

<h3>Description</h3>
<p>This function receives a delimited text and converts it to a standard set, that can be handled 
using the <a href="#setitem">setitem( )  </a>
<a href="#setlen">setlen( ) </a> and other functions. The default separator character is <b>9</b>, 
the tab character, but other ordinal values may be specified as desired. Use the 
<a href="#ordinal">ordinal( )</a> function to produce these numerical character values if desired.</p>

<h3>Example:</h3>

<p>A button in STATREES.INI is defined as: </p>
<pre> $button GRAPH=LCXCALL 0 (Summary Graphs) Summphases 15,17,16,11 </pre>
<p>and the function it calls, <b>Summphases( )</b> could begin as follows:</p>
<pre>
Summphases(string tail, string tableset, string Rootitem, string Rootbase, string 
SIname)
{
    string ztail, col_LEAF,  col_STATUS_WEEK, col_CARRIER_RSERIAL, col_subsym;

    ztail = tabtoset(tail, ordinal(","));

    col_LEAF = setitem(ztail, 0);
    col_STATUS_WEEK = setitem(ztail, 1);
    col_CARRIER_RSERIAL = setitem(ztail, 2);
    col_subsym = setitem(ztail, 3);
/* the rest of the function is omitted here */
}
</pre>
<p> Here, the tail, <b>15,17,16,11</b> is converted to the set <b>15+17+16+11+</b> by <b>tabtoset( )</b> and 
then the indexes are extracted using <a href="#setitem">setitem( )</a>.</p>

<h3>See Also:</h3>
<p>
<a href="#converttoset"> converttoset( ) </a>, 
<a href="#csvtoset"> csvtoset( ) </a>, 
<a href="#ordinal"> ordinal( )  </a>, 
<a href="#ASCIITABLE">Table of ASCII Codes</a>,
<b>STATREES.INI LCXCALL </b>
</p>

<p>
<a rel="up" href="#T"> ^ --T-- </a>
</p>

<!-- ================================= -->
<hr/><a name="TableSum"></a> <h2>TableSum</h2>

<h3>Function Name: TableSum( ) -- NCONN 32c TMGT 32s</h3>
<h3>Synopsis:</h3>
<pre>
<em>fieldset</em><b> = makeset(</b><em>fieldname1</em><b>, </b><em>fieldname2</em><b> ... ); </b>
<em>valueset</em><b> = TableSum(</b><em>tablename</em><b>, </b><em>fieldset</em><b>);</b>
</pre>

<h3>Description:</h3>
<p>This function reads the contents of some table, <em>table</em>, and adds up the numerical
values it finds in the various fields listed in the <em>fieldset</em>, then returns the sums of these
as the elements of a set. Each element of the set corresponds to the field-name element of
<em>fieldset</em>. This function runs on the server, when called from the client it will make 
a single pass to code on the server.</p>

<p>The summation is algebraic: numerial values in the <em>fieldset</em> fields will be added and if they are negative, 
they will be subtracted.  Non-numerical data in these fields will evaluate as zero. </p>

<p>The function
<a href="#TableSumSet">TableSumSet( )</a> 
is similar, but provides a break-down of data on one or more "distinction" fields. </p>

<h3>See Also:</h3>
<p>
<a href="#TableSumSet">TableSumSet( )</a> ,
<a href="#makeset">makeset( )</a> ,
<a href="#setlen">setlen( )</a> ,
<a href="#setitem">setitem( )</a> 
</p>

<p>
<a rel="up" href="#T"> ^ --T-- </a>
</p>

<!-- ================================= -->

<hr/><a name="TableSumDistinct"></a><h2>TableSumDistinct</h2>

<h3>Function Name: TableSumDistinct( ) -- TMGT 32s</h3>

<h3>Synopsis:</h3>
<pre><b>TableSumDistinct(</b><em>table</em><b>,</b><em>countfield</em><b>,</b><em>distinctfieldset</em><b>);</b></pre>

<h3>Description:</h3>
<p>UNDER CONSTRUCTION</p>

<h3>Return Value:</h3>
<p>UNDER CONSTRUCTION</p>

<h3>See Also:</h3>
<p>
<a href="#TableSumSet">TableSumSet( )</a> <br/>
</p>

<p>
<a rel="up" href="#T"> ^ --T-- </a>
</p>


<!-- ================================= -->

<hr/><a name="TableSumProcess"></a><h2>TableSumProcess</h2>

<h3>Function Name: TableSumProcess( ) -- TMGT 32s NCONN 32c</h3>

<h3>Synopsis:</h3>
<pre><b>TableSumProcess(</b><em>reportset</em><b>, </b><em>expression</em><b>, </b><em>listcolumn</em><b>, </b><em>countcolumn</em><b>);</b> </pre>
<pre><b>TableSumProcess(</b><em>reportset</em><b>, </b><em>expression</em><b>, </b><em>listcolumn</em><b>, </b><em>countcolumn</em><b>, </b><em>blankreplacement</em><b>);</b> </pre>

<h3>Description:</h3>
<p>This function takes the returned value, <em>reportset</em> from a call to
<a href="#TableSumSet">TableSumSet( )</a> 
and allows running summaries on it, where all the distinct values of some column, <em>listcolumn</em>, 
are grouped together. Additionally, this can be done for a subset of the data where some <em>expression</em>
makes for further limitations. This kind of expression follows the rules for
<a href="#Secondary.20relational.20Expressions"> Secondary Expressions. </a>, with the exception that 
it uses single quotes instead of at-signs.  </p>

<p><em>listcolumn</em> and <em>countcolumn</em> can be field-names as used with
<a href="#TableSumSet">TableSumSet( )</a> 
or they can be column indexes. For the expression, we must use the fieldnames. 
These are defined in the first part of the returned value from 
<a href="#TableSumSet">TableSumSet( )</a> 
so should be straightforward.</p>

<p>Similar to what applies to <a href="#TableSum">TableSum( )</a>, 
if there isn't a <em>countcolum</em> as such with particular count in it to be 
added towards the total, the value <b>"=1"</b> for <em>countcolumn</em> will 
make it behave as if there had been a column there with the 
value <b>1</b> in it. </p>

<p>If there are unwanted blank values in the <em>listcolumn</em> that should be
interpreted differently as a non-blank value, this substitution value
has to be given as the fifth argument, <em>blankreplacement</em>. When this is missing or blank, 
blank values of <em>listcolumn</em> will remain as such.</p>

<p>The function runs in-memory only, and does not access any disk file or database. This makes it
quite inexpensive, so it can be called repeatedly with different parameters. </p>

<h3>Return Value:</h3>
<p>A set of set of values, where each sub-set gives the distinct value of the <em>listcolumn</em> and
the number of such values as per numbers seen in countcolumn. </p>


<h3>See Also:</h3>
<p>
<a href="#TableSumSet">TableSumSet( )</a> <br/>
<a href="#Secondary.20relational.20Expressions"> Secondary Expressions. </a> <br/>
</p>

<p>
<a rel="up" href="#T"> ^ --T-- </a>
</p>


<!-- ================================= -->
<hr/><a name="TableSumSet"></a> <h2>TableSumSet</h2>

<h3>Function Name: TableSumSet( ) -- NCONN 32c TMGT 32s</h3>
<h3>Synopsis:</h3>
<pre>
<em>tallyfieldset</em><b> = makeset(</b><em>tallyfieldname1</em><b>, </b><em>tallyfieldname2</em><b> ... );</b>
<em>distnameset</em><b> = makeset(</b><em>distname1</em><b>, </b><em>distname2</em><b> ... );</b>
<em>valueset</em><b> = TableSumSet(</b><em>tablename</em><b>, </b><em>tallyfieldset</em><b>, </b><em>distnameset</em><b>);</b>
</pre>

<h3>Description:</h3>
<p>This function reads the contents of some table, <em>table</em>, and adds up the numerical
values it finds in the various fields listed in the <em>tallyfieldset</em>, then returns the sums of all these
for each of the possible combinations of values found in the fields listed as the <em>distnameset</em>, as a
multi-layer "set of sets". The first element of this set lists the total record count and the relevant fieldnames,
beginning with the fields listed in the <em>distnameset</em> and followed by the fields listed in the
<em>tallyfieldset</em>.  The subsequent elements show the various combinations of values in the distfields, and 
the sums of each of the <em>tallyfieldset</em> fields.  An additional record at the end contains the accumulated sum
of all the values found in the <em>tallyfieldset</em> fields. </p>

<p>The summation is algebraic: numerical values in the <em>tallyfieldset</em> fields will be added and if they are negative, 
they will be subtracted.  Non-numerical data in these fields will evaluate as zero. </p>

<p>This function runs on the server, when called from the client it will make 
a single pass to code on the server.</p>

<p>It has turned out to be very common that we want to count some field in the table with effective weight 1, 
for numbers of discipline, status, category, or other sets of codes, but without actually having to create 
or maintain any such field that has the value 1 in it for all records.  To simulate this field, 
the special fieldname <b>=1</b> can be used for one or more of the names in the <em>tallyfieldset</em>. 
That will make it behave as if there were a field with the value 1 present in that position for all records. </p>

<p>Also, since a set-of-set can be cumbersome, and even though the calls to the <b>TableSumSet( )</b>
function are not terribly expensive, it is still more efficient to make the call to <b>TableSumSet( )</b>
once for a lot of different collections of distinct values, then it is only a matter of string processing,
no data IO required, to edit and summarize further over the various combinations in the <em>valueset</em>.  </p>

<p>To this end, the function <a href="#TableSumProcess">TableSumProcess( )</a> has been created.</p>

<h3>Return Value</h3>
<p>The returned value is a multi-level "set of sets", forming essentially a small report, whose record-count can be
determined by calling
<a href="#setlen">setlen( )</a> 
on the <em>valueset</em>, then each record is returned as the element set via
<a href="#setitem">setitem( )</a> 
on the indexed record. Each field in in that record is then the elements of this, findable via
another call to
<a href="#setitem">setitem( )</a> 
indexed over the number of elements in the row set.</p>

<p>The first row is the total record count and allthe fieldnames involved, first the
ones in <em>distnameset</em> then the ones in the <em>tallyfieldset</em>, including =1 indications for 
any such automatic fields. Subsequent rows indicate the values of the distinct combinations in the
<em>distnameset</em> and the sums or tallies in the <em>tallyfieldset</em>. The last record is
the sum totals of each of the <em>tallyfieldset</em> columns. </p>

<h3>See Also:</h3>
<p>
<a href="#TableSum">TableSum( )</a> ,
<a href="#TableSumProcess">TableSumProcess( )</a> ,
<a href="#makeset">makeset( )</a> ,
<a href="#setlen">setlen( )</a> ,
<a href="#setitem">setitem( )</a> 
</p>

<p>
<a rel="up" href="#T"> ^ --T-- </a>
</p>

<!-- ================================= -->
<hr/><a name="TableToReport"></a> <h2>TableToReport</h2>

<h3>Function Name: TableToReport( ) -- NCONN 32c TMGT 32s</h3>

<h3>Synopsis:</h3>
<pre>
<em>report</em><b> = TableToReport(</b><em>tablename</em><b>, </b><em>restriction</em><b>);</b>
</pre>

<h3>Description:</h3>
<p>This function reads the contents of a table, possibly with 
some restriction-expression applied, and returns the results in
a Report data structure. As always, this report should be deallocated
after use, either explicitly with
<a href="#RepClose">RepClose( )</a>, or as part of the return actions for
a function called via 
<a href="#ServerReport ">ServerReport ( )</a>.  </p>

<h3>Return Value:</h3>
<p>The data is returned in the usual report format, which can be
handled via functions such as 
<a href="#RepInfo">RepInfo( )</a>, 
<a href="#RepControl">RepControl( )</a>, and 
<a href="#RepGet">RepGet( )</a>.</p>

<p>The legends set in the report reflect the fieldnames from the table, thus
<b><a href="#RepInfo">RepInfo("legendset", </b><em>report</em><b>)</a></b> 
will return the fieldnames as a set. </p>

<h3>See Also:</h3>
<p>
</p>

<p>
<a rel="up" href="#T"> ^ --T-- </a>
</p>

<!-- ================================= -->
<hr/><a name="TargetGet"></a> <h2>TargetGet</h2>

<h3>Function Name: TargetGet( ) -- TRANS 16 INSPECT 32c SYNFARE 32c</h3>
<h3>Synopsis:</h3>
<pre><em>value</em><b> = TargetGet(</b><em>fieldname</em><b>);</b></pre>

<h3>Description:</h3>
<p>
Reads the value of the selected field <em>fieldname</em> in the output table, 
as this has been defined through the transfer functions. This reads that table whatever 
nature this actually may be.
</p>

<h3>Availability:</h3>
<p>
The <b>TargetGet( )</b> and 
<a href="#TargetPut">TargetPut( )</a> functions only make sense in a callback 
function run during TRANS or Standard Import execution.
</p>

<h3>See Also:</h3>
<p>
<a href="#InValue"> InValue( ) </a> , 
<a href="#TargetPut"> TargetPut( )</a>  
</p>
<p>
<a rel="up" href="#T"> ^ --T-- </a>
</p>

<!-- ================================= -->
<hr/><a name="TargetName"></a> <h2>TargetName</h2>
<h3>Function Name: TargetName( ) -- INSPECT 32c SYNFARE 32c </h3>

<h3>Synopsis:</h3>
<pre><em>name</em><b> = TargetName();</b></pre>

<h3>Description:</h3>
<p>This function is defined with Inspect and SYNFARE looping functions and for TRANS and Standard Imports. 
It returns the name of the table or data-set being written to under. For Inspect and SYNFARE this will be
the exact same as the 
<a href="#SourceName">SourceName( )</a> 
function. 
</p>

<h3>Availability:</h3>
<p>This function is available under Inspect and SYNFARE for-all-record processing functions. 
TRANS documentation is under construction.</p>

<h3>See Also:</h3>
<p>
<a href="#SourceName">SourceName( )</a> <br/>
<a href="#InValue">InValue( )</a>  <br/>
<a href="#OutValue">OutValue( )</a> 
</p>
<p>
<a rel="up" href="#T"> ^ --T-- </a>
</p>


<!-- ================================= -->
<hr/><a name="TargetPut"></a> <h2>TargetPut</h2>

<h3>Function Name: TargetPut( ) -- TRANS 16 INSPECT 32c SYNFARE 32c </h3>
<h3>Synopsis:</h3>
<pre><em>value</em><b> = TargetPut(</b><em>fieldname</em><b>, </b><em>datum</em><b>);</b></pre>

<h3>Description:</h3>
<p>Assigns the value of the selected field in the output table, whatever nature this table 
actually may be.</p>

<h3>Availability:</h3>
<p>The <a href="#TargetGet"> TargetGet( )</a> and <b>TargetPut( )</b> functions only 
make sense in a callback function run during TRANS or Standard Import execution.</p>

<h3>See Also:</h3>
<p>
<a href="#TargetGet">TargetGet( )</a>,
<a href="#InValue">InValue( )</a>,
<a href="#OutValue">OutValue( )</a>
</p>

<p>
<a rel="up" href="#T"> ^ --T-- </a>
</p>

<!-- ================================= -->

<hr/><a name="Tagstatus"></a><h2>Tagstatus</h2>

<a href="#Tagstatus">Tagstatus( )</a> 
<h3>Function Name: Tagstatus( ) -- TMGT 32s NCONN 32c</h3>

<h3>Synopsis:</h3>
<pre><b>Tagstatus(</b><em>tagnumber</em><b>,</b><em>tablehint</em><b>,</b><em>statustype</em><b>,</b><em>translatecode</em><b>);</b></pre>

<h3>Description:</h3>
<p>UNDER CONSTRUCTION</p>

<h3>Return Value:</h3>
<p>UNDER CONSTRUCTION</p>

<h3>See Also:</h3>
<p>
<a href="#example">example( )</a> <br/>
</p>

<p>
<a rel="up" href="#T"> ^ --T-- </a>
</p>

<!-- ================================= -->
<hr/><a name="TCPConv"></a> <h2>TCPConv</h2>

<h3>Function Name: TCPConv( ) -- LCX 32s LCX 32c </h3>
<h3>Synopsis:</h3>
<pre><em>reply</em><b> = TCPConv(</b><em>servername</em><b>, </b><em>portnumber</em><b>, </b><em>request</em><b>)</b></pre>
 
<h3>Description:</h3>
<p>This makes a TCP connection to the indicated <em>portnumber</em> on the
server identified with hostname or IP-address as <em>servername</em>, then sends the
text of the <em>request</em> argument, then reads the reply from the server, and
sends this back as the return value. </p>

<p>The function does not make any assumptions about the server, other than it being able
to read and reply with plain text. For a http server, there is no in-built framing, so all 
the header and payload data has to be assembled for the transmission, and taken
apart from the returned value.</p>


<p>
<a rel="up" href="#T"> ^ --T-- </a>
</p>


<!-- ================================= -->
<hr/><a name="Text"></a> <h2>Text</h2>

<h3>Function Name: Text( ) -- PPVIEW 16 PPVIEW 32</h3>
<h3>Synopsis:</h3>
<pre><b>Text(text, x, y, flags, facename, size) </b></pre>

<h3>Description:</h3>
<p><b>Text( )</b> draws the string <em>text</em>, on a single line 
anchored at the point <em>x</em>,<em>y</em>. The text is drawn 
in the font indicated by <em>facename</em>, and the <em>size</em> is 
the height of capitals in 1/10mm units. </p>

<p>The flags control weight and positioning as follows: <br/>
Weight: <br/>
        Default is Normal weight.<br/>
        B - for Bold<br/>
        I - for Italic<br/></p>

<p>Positioning vertically:<br/>
        Default is Bottom justified.<br/>
        C - for Vertical Centered <br/>
        T - for Top justified<br/></p>

<p>Positioning horizontally:<br/>
        Default is Horizontal centered.<br/>
        L - for Left justified<br/>
        R - for Right justified<br/></p>

<p>Special formatting:<br/>
If the first two characters in the text are <b>^?</b> then each 
character of the text will be drawn individually. The Symbol font 
may be selected, and the text may be realined if it contains 
the following control sequences:<br/>
<b>^U</b>    Superscript<br/>
<b>^D</b>    Subscript<br/>
<b>^N</b>    Back to normal from Superscript or subscript<br/>
<b>^Y</b>    Selects the Symbol font<br/>
<b>^R</b>    Selects the specified font<br/>
<br/>This is useful for drawing complicated formulas. A serif 
font such as Times New Roman 
looks better than a non-serif font such as Arial.</p>

<h3>Availability:</h3>
<p>Only available in a printing function.</p>

<h3>See Also:</h3>
<p>
<a href="#BoundedText">BoundedText( )</a>
</p>

<p>
<a rel="up" href="#T"> ^ --T-- </a>
</p>

<!-- ================================= -->
<hr/><a name="time"></a> <h2>time</h2>

<h3>Function Name: time( ) -- LCX 16 TMGT 32s NCONN 32c TMGT 64s</h3>
<h3>Synopsis:</h3>
<pre><em>value</em><b> = time( );</b></pre>
<pre><em>value</em><b> = TIME( ) (LCX 16 only) </b></pre>

<h3>Description:</h3>
<p>This function returns the current time of the system clock.  </p>

<p>On 32-bit systems, this is the time of the server, even 
if the client's time is different. </p>

<p>The return format is predictable, and if only part of the 
returned string is of interest, the <a href="#substr"> substr( )</a> 
function can be used. The format of the string as given by the 
<b>time( )</b> function is compatible with type <b>T</b> 
(time) data fields in tables.</p>

<h3>Return Value:</h3>
<p>A 11-character string which represents the time of the system 
clock at the moment of the call as follows:<br/>
        hh:mm:ss.cc<br/>
where hh is hours (00--23), mm is minutes (00--59), 
ss is seconds (00--59), and cc is 
1/100s of seconds (00--99).</p>

<h3>Standalone Replacement:</h3>
<p>Since the date and time are defined by the server in 
the client/server systems,
the standalone version of this function, as made available to the
the LC97, LC64, and LCXT programs, the function is called 
<a href="#zfunctions">
ztime()</a></p>


<h3>See Also:</h3>
<p>
<a href="#date"> date( ) </a>, 
<a href="#week"> week( ) </a>
</p>

<p>
<a rel="up" href="#T"> ^ --T-- </a>
</p>

<!-- ================================= -->
<hr/><a name="trace"></a> <h2>trace</h2>

<h3>Function Name: trace( ) -- LCX 16 LCX 32s LCX 32c LCX 64</h3>

<h3>Synopsis (LCX 32s LCX 32c LCX 64):</h3>
<pre> <em>text</em><b> = trace(</b><em>item ... </em><b>);</b></pre>

<h3>Synopsis (LCX 16)</h3>
<pre> <em>text</em><b> = trace(</b><em>item</em><b>);</b></pre>

<h3>Description:</h3>
<p>This function emits a message on a Debug terminal, containing the 
text of the argument. The 32-bit version allows several arguments
similar to <a href="#message">message( )</a>, 
whereas the 16-bit versions only allows one argument.  In this case
the <a href="#concat">concat( )</a> function may be used to feed them 
into <b>trace( )</b>.  </p>

<p>To identify the position of these messages, the 
<a href="#Predefined.20Constants"> __HERE__ </a>
predefined value can be used, typically as the first argument, for example:</p>
<pre>
trace(__HERE__, "Manhours of tag ", itemid, " in table ", itembase, " is ", manhr); 
</pre>

<p>Note that this function does nothing but waste time unless 
WinPCS is running in some debug mode where interesting messages 
can appear on a console, serial port, <a href="netdebug.html">netrx</a>,
or <a href="netdebug.html#udprx">udprx</a> 
window.  To turn the debugging capability on or off, use 
one of the <a href="#CWULIB">CWULIB( )</a> or
<a href="#AimDebugOutput">AimDebugOutput( )</a> functions. As the
function call can slow things down, since it has to push out text, 
most calls to this function should be removed once testing 
and debugging is done. </p>

<h3>Return Value:</h3>
<p>The value of the argument or concatenation of the arguments.</p>

<h3>See Also:</h3>
<p>
<a href="#concat">concat( )</a> <br/>
<a href="#CWULIB"> CWULIB( )</a> <br/>
<a href="#message">message( )</a> <br/> 
<a href="#print">print( )</a> 
</p>

<p>
<a rel="up" href="#T"> ^ --T-- </a>
</p>

<!-- ================================= -->

<hr/>
<a name="traceset"></a> <h2>traceset</h2>
<a name="traceconn"></a> <h2>traceconn</h2>

<h3>Function Name: traceset( ) -- TMGT 32s</h3>
<h3>Function Name: traceconn( ) -- RCONN 16 NCONN 32c TMGT 32s</h3>

<h3>Synopsis:</h3>
<pre><em>remoteID</em><b> = traceset(</b><em>remotetable</em><b>, </b><em>itemtable</em><b>, </b><em>itemID</em><b>, </b><em>traceentry</em><b>);</b></pre>
<pre><em>remoteID</em><b> = traceconn(</b><em>remotetable</em><b>, </b><em>itemtable</em><b>, </b><em>itemID</em><b>);</b>(RCONN16 only)</pre>
<pre><em>remoteID</em><b> = traceconn(</b><em>remotetable</em><b>, </b><em>itemtable</em><b>, </b><em>itemID</em><b>, </b><em>traceentry</em><b>);</b></pre>
<pre><em>remoteID</em><b> = traceconn(</b><em>remotetable</em><b>, </b><em>itemtable</em><b>, </b><em>itemID</em><b>, </b><em>traceentry</em><b>, </b><em>savebase</em><b>);</b>(TMGT 32s only)</pre>

<h3>Description:</h3>
<p>The traceconn or traceset function looks for the remotely connected objects in table <em>remotetable</em>
that can be found via either all tree-lines (RCONN 16), or only the ones identified in the 
specified entry <em>traceentry</em> in the section [$TRACE] in 
of STATREES.INI (RCONN 16/NCONN 32c/TMGT 32s). </p>

<p>traceset( ) is optimized, it uses cached statrees.ini information instead of re-reading the file
each time.</p>

<p>When the function is run in a loop from a server-side report (
<a href="#ServerReport">ServerReport( )</a> 
call or a status index),  there is an option of making it slightly more efficient when there is only
one or a few tables whose position must be retained. The default is to make a separate environment
for the traceconn; in a loop, this continual adding and removing this extra environment is rather
expensive, and can be avoided by specifying the name of the table to keep position on, via
the optional argument <em>savebase</em>.</p>

<h3>Return Value:</h3>
<p>The remote item (tag from the <em>remotetable</em> found if there was any. This is a set of 
all such items found, as there can be more than one.</p>

<h3>See Also:</h3>
<p>
<a href="#connset">connset( )</a> ,
<a href="#startconnscan">startconnscan( )</a> 
</p>

<p>
<a rel="up" href="#T"> ^ --T-- </a>
</p>

<!-- ================================= -->
<hr/><a name="traceconnrun"></a> <h2>traceconnrun</h2>

<h3>Function Name: traceconnrun( ) -- RCONN 16 NCONN 32c TMGT 32s</h3>

<h3>Synopsis:</h3>
<pre><em>remoteID</em><b> = traceconnrun(</b><em>handle</em><b>, </b><em>itemID</em><b>); </b></pre>

<h3>Description:</h3>
<p>This function gets the related objects to an itemID as per the prepared 
<a href="#traceconnstart">traceconnstart( )</a>. 
</p>

<h3>Return Value:</h3>
<p>The remote items found if any, in a set. 
</p>

<h3>See Also:</h3>
<p>
<a href="#connset">connset( )</a> ,
<a href="#startconnscan">startconnscan( )</a> ,
<a href="#traceconnstart">traceconnstart( )</a> ,
<a href="#traceconnstop">traceconnstop( )</a> 
</p>

<p>
<a rel="up" href="#T"> ^ --T-- </a>
</p>

<!-- ================================= -->
<hr/><a name="traceconnstart"></a> <h2>traceconnstart</h2>

<h3>Function Name: traceconnstart( ) -- RCONN 16 NCONN 32c TMGT 32s</h3>

<h3>Synopsis:</h3>
<pre><em>handle</em><b> = traceconnstart(</b><em>remotetable</em><b>, </b><em>itemtable</em><b>, </b><em>statreesname</em><b>);</b></pre>

<h3>Description:</h3>
<p>
This function prepares the trace-connection based on the referenced
entry in the section $TRACE in STATREES.INI
</p>

<h3>Return Value:</h3>
<p>
A handle identifying the traceconn-activity.  To find the connections
of the specified table, use <a href="#traceconnrun">traceconnrun( )</a>. 
This may be used repeatedly for finding several different objects.
When finished, use <a href="#traceconnstop">traceconnstop( )</a> 
to deallocate the handle. Failure to do so will cause memory leaks. 
</p>

<h3>See Also:</h3>
<p>
<a href="#connset">connset( )</a> ,
<a href="#startconnscan">startconnscan( )</a> ,
<a href="#traceconnrun">traceconnrun( )</a> ,
<a href="#traceconnstop">traceconnstop( )</a> 
</p>

<p>
<a rel="up" href="#T"> ^ --T-- </a>
</p>

<!-- ================================= -->
<hr/><a name="traceconnstop"></a> <h2>traceconnstop</h2>

<h3>Function Name: traceconnstop( ) -- RCONN 16 NCONN 32c TMGT 32s</h3>

<h3>Synopsis:</h3>
<pre><b>traceconnstop(</b><em>handle </em><b>);</b></pre>

<h3>Description:</h3>
<p>This function cleans up and deallocates any state data
created when using
<a href="#traceconnstart">traceconnstart( )</a> 
and
<a href="#traceconnrun.">traceconnrun.( )</a> 
If not performed,  memory leakage will occur, and the server or client
could eventually crash. </p>

<h3>See Also:</h3>
<p>
<a href="#traceconnstart">traceconnstart( )</a> 
</p>

<p>
<a rel="up" href="#T"> ^ --T-- </a>
</p>

<!-- ================================= -->

<hr/>
<a name="treelinelist"></a> <h2>treelinelist</h2>

<h3>Function Name: treelinelist( ) -- NCONN 32c TMGT 32s</h3>

<h3>Synopsis:</h3>
<pre><em>treelineset</em><b> = treelinelist(</b><em>section</em><b>, </b><em>entry</em><b>, </b><em>table1</em><b>, </b><em>table2</em><b>);</b></pre>

<h3>Description:</h3>
<p>This function reads a subset of the cached tree-lines from the server,
for typical subsequent use with
<a href="#openhierarchy">openhierarchy( )</a>.  Another
use for this function will be in connection with debugging or
discovery activities.</p>

<p>The <em>section</em> argument should be to one of
<b>$LINES</b> or <b>$TRACE</b>. The <em>entry</em> argument 
should be one of the entries found in this section in STATREES.INI.
</p>

<p>The set of tree-lines is then limited to those that contain both of
the tables named as <em>table1</em> and <em>table2</em>.</p> 

<h3>Return Value:</h3>
<p>The function returns the set of tree-lines, as found from the
section in statrees.ini.  If the section or entry arguments don't
refer to anything present in statrees.ini, the
returned value will be blank. And if none of the 
tree-lines defined in the section and entry contain the two tables, 
the returned value will also be blank. The returned values from several
calls to <b>treelinelist( )</b> may be concatenated, for these cases where
there are several sets of tree-lines that may apply.
</p>

<h3>See Also:</h3>
<p>
<a href="#stadlginistring">stadlginistring( )</a> <br/>
<a href="#serverinistring">serverinistring( )</a> ,
<a href="#openhierarchy">openhierarchy( )</a>.
</p>

<p>
<a rel="up" href="#T"> ^ --T-- </a>
</p>
<!-- ================================= -->

<!-- U -->

<hr/><a name="U"></a><h2>--U--</h2>
<p>
<a href="#unicert">unicert( )</a><br/>
<a href="#update">update( )</a><br/>
<a href="#URLDecode">URLDecode( )</a> <br/>
<a href="#URLEncode">URLEncode( )</a> <br/>
<a href="#user">user( )</a><br/>
<a href="#user">USER( )</a><br/>
</p>
<p>
<a rel="up" href="#Functions.20Reference"> ^ Functions Reference </a> 
<a rel="previous" href="#T"> &lt; --T-- </a>
<a rel="next" href="#V"> &gt; --V-- </a>
</p>



<!-- ================================= -->
<hr/><a name="unicert"></a> <h2>unicert</h2>

<h3>Function Name: unicert( ) -- RCONN 16 NCONN 32c</h3>
<h3>Function Name: certificate( ) -- RCONN 16</h3>
<h3>Function Name: printcert( ) -- RCONN 16</h3>

<h3>Synopsis:</h3>
<pre><b>unicert(</b><em>mode</em><b>, </b><em>macrofiles</em><b>, </b><em>macrofunction</em><b>, </b><em>optarg</em><b>, ...);</b></pre>
<pre><b>certificate(</b><em>macrofiles</em><b>, </b><em>macrofunction</em><b>, </b><em>optarg</em><b>, ...);</b></pre>
<pre><b>printcert(</b><em>macrofiles</em><b>, </b><em>macrofunction</em><b>, </b><em>optarg</em><b>, ...);</b></pre>

<h3>Availability:</h3>
<p>Only <b>unicert( )</b> is available on 32-bit systems, the other functions are not necessary, since 
the calls to:<br/>
<b>certificate(...)</b> is identical to <b>unicert("", ...)</b><br/>
<b>printcert(...)</b> is identical to <b>unicert("I", ...)</b></p>

<p>These functions are not available in the server environment since there is no place to view
the output. </p>

<h3>Description:</h3>
<p>This function performs print preview or printing of a
certificate-style document to be drawn as per the code 
in the <em>macrofunction</em>. Various paper formats and 
a print immediate mode can be requested through key characters in the <em>mode</em> argument. </p>

<p>Values of <em>mode</em> can be one of the characters <b>0,1,L,2,3,8,9,A</b> for determining paper 
size and orientation:</p>
<p>
<b>0</b> for A4 or A (8.5 by 11 inches) Portrait<br/>
<b>1</b> or <b>L</b> for A4 or A (8.5 by 11 inches) Landscape<br/>
<b>2</b> for A3 or B (11 by 17 inches) Portrait<br/>
<b>3</b> for A3 or B (11 by 17 inches) Landscape<br/>
<b>8</b> for Force Printer selection dialog<br/>
<b>9</b> or <b>A</b> for Ask the user what size and orientation is desired<br/>
</p>

<p> In addition, the character <b>I</b> for print Immediately with no preview phase may be added. </p>

<p> During the printing operation, a call is made to the function referred to as <em>macrofunction</em>, for
it to perform the drawing of the contents of the certficate.  This function is called from the system as </p>
<pre>
<em>macrofunction</em><b>(</b><em>optarg</em><b>, ... )</b><br/>
</pre>
<p>where the optional arguments from <em>optarg</em> onwards are copies of the arguments 
as passed into the <b>unicert( )</b> function call.   </p>

<p>The <em>macrofunction</em> is expected to be in one of the files listed in the <em>macrofiles</em> argument. 
There may be more than one file listed, with spaces separating the names, and any or all of them may be 
referred to using the numbered "drives" as discussed under <a href="#ExpandPath">ExpandPath( )</a>.</p>

<p>The <em>macrofunction</em> is started in its own environment, which means that it does not see any global variables
or opened tables visible from the function calling <b>unicert( )</b>. All parameters must be passed through as arguments,
and any tables must be opened once again. The return value passed back from the <em>macrofunction</em> into the 
system is ignored, but it is recommended that the function return <b>0</b>. </p>

<p>To perform the drawing actions, the <em>macrofunction</em> can use the full set of drawing functions: </p>
<p>
<a href="#Height">Height( )</a>  <br/>
<a href="#Hline">Hline( )</a> <br/>
<a href="#Image">Image( )</a>   <br/>
<a href="#Line">Line( )</a> <br/>
<a href="#Origin">Origin( )</a> <br/>
<a href="#Text">Text( )</a>  <br/>
<a href="#BoundedText">BoundedText( )</a>  <br/>
<a href="#Vline">Vline( )</a>  <br/>
<a href="#Width">Width( )</a></p>

<p>All X and Y coordinates and dimensions are in 1/10mm units, measured above (Y) and to 
the right (X) of the Origin point. This is the lower left corner of the page, unless the 
<a href="#Origin">Origin( )</a> function has been called. </p>

<p>Positive values of Y are upwards and positive values of X are to the right, </p>

<p>Where not otherwise noted, the X and Y values are signed, and negative values refer to 
locations below or to the left of the origin point. </p>

<p>Normal LCX functions, except for the ones restricted to be used for DDE transactions 
only,  may be called in the course of drawing a certificate or form.  Notably, all the 
database interfacing functions ( <a href="#get">get( )</a> , <a href="#findexact">findexact( )</a> , 
<a href="#startconnscan">startconnscan( )</a> , ... ) are available 
and may be used for generating texts and controlling the presence and absence of 
various items.</p>

<h3>Return Value: (RCONN 16)</h3>
<p>Always zero.</p>

<h3>Return Value: (NCONN 32c)</h3>
<p>This is some integer value. For the calls that produce a print-preview window, this is the 
window handle. For the calls running print-jobs directly, this is some other small integer.
Do not expect to be able to determine anything from this value, consider it reserved and not
to be relied on until and unless further notice is given. </p>

<h3>See Also:</h3>
<p> 
<a href="call0010.html"> Print layout documentation </a><br/>
<a href="#Height">Height( )</a>,
<a href="#Hline">Hline( )</a>, 
<a href="#Image">Image( )</a>,  
<a href="#Line">Line( )</a>,
<a href="#Origin">Origin( )</a> , 
<a href="#Text">Text( )</a>, 
<a href="#Vline">Vline( )</a>, 
<a href="#Width">Width( )</a> 
</p>

<p>
<a rel="up" href="#U"> ^ --U-- </a>
</p>

<!-- ================================= -->
<hr/><a name="update"></a> <h2>update</h2>

<h3>Function Name: update( ) -- RCONN 16 NCONN 32c TMGT 32s TMGT 64s</h3>
<h3>Synopsis:</h3>
<pre><em>status</em><b> = update(</b><em>table</em><b>);</b></pre>

<h3>Description:</h3>
<p>This updates the current record in the named table with the values placed there with 
<a href="#put">put( )</a>  calls. </p>

<h3>Return Value:</h3>
<p>Status of the Update operation, encoded as a set where the first value is the numeric 
code and the second value is some standard error message. 
Use <a href="#setitem">setitem( )</a>  to pick out the value for use in 
<a href="#if.2delse">if-else</a> tests.</p>

<h3>See Also:</h3>
<p>
<a href="#insert">insert( )</a>,
<a href="#delete">delete( )</a>, 
<a href="#entrydialog">entrydialog( )</a>,
<a href="#put">put( ) </a>
</p>
<p>
<a rel="up" href="#U"> ^ --U-- </a>
</p>

<!-- ================================= -->
<hr/><a name="URLDecode"></a> <h2>URLDecode</h2>
<h3>Function Name: URLDecode( ) -- LCX 32</h3>
<h3>Synopsis:</h3>
<pre><em>text</em><b> = URLDecode(<em>htmlcodedtext</em> );</b></pre>

<h3>Return Value:</h3>
<p>The URLDecode() function replaces <b>+</b> signs 
in the inbound <em>htmlcodedtext</em> by spaces, and 
converts all <b>%hh</b>
to their original characters.</p>

<p>The coding may be from a string coming from a browser, 
or it may have been created by the 
<a href="#URLEncode">URLEncode( )</a> 
function. </p>

<h3>See Also:</h3>
<p>
<a href="#DecodeTag">DecodeTag( )</a> <br/> 
</p>

<p>
<a rel="up" href="#U"> ^ --U-- </a>
</p>


<!-- ================================= -->
<hr/><a name="URLEncode"></a> <h2>URLEncode</h2>
<h3>Function Name: URLEncode( ) -- LCX 32</h3>
<h3>Synopsis:</h3>
<pre><em>htmlcodedtext</em><b> = URLEncode(<em>text</em> );</b></pre>

<h3>Return Value:</h3>
<p>The URLEncode() function changes the incoming text so it is compatible with HTML transports.
All characters except for letters, digits, underscore, period, and dash are converted to %hh 
representations, then all spaces are converted to plus signs.</p>

<p>The 
<a href="#URLDecode">URLDecode( )</a> 
function converts the string back. </p>

<h3>See Also:</h3>
<p>
<a href="#EncodeTag">EncodeTag( )</a> <br/>
</p>

<p>
<a rel="up" href="#U"> ^ --U-- </a>
</p>



<!-- ================================= -->
<hr/><a name="user"></a> <h2>user</h2>

<h3>Function Name: user( ) -- RCONN 16 NCONN 32c TMGT 32s  TMGT 64s</h3>
<h3>Synopsis:</h3>
<pre><em>name</em><b> = user( );</b></pre>

<h3>Return Value:</h3>
<p>On 16-bit WinPCS and on the 32-bit clients, 
The return value is the current user identity, entered in the 
WinPCS log-on dialog upon startup, or possibly from -U command-line
parameters or network. </p>

<p>On the server, this is the name of the user who is running the particular 
request from the client. </p>

<!--
<p>On servers, the return value is the
WinPCS-system defined user, on behalf of whom the 
server is doing the particular job.</p> -->

<h3>See Also:</h3>
<p>
<a href="#loginuser"> loginuser( ) </a>
</p>
<p>
<a rel="up" href="#U"> ^ --U-- </a>
</p>


<!-- ================================= -->
<!-- V -->

<hr/><a name="V"></a><h2>--V--</h2>
<p>
<a href="#varSI">varSI( )</a><br/>
<a href="#VarHierarchy">VarHierarchy( )</a><br/>
<a href="#VerifyDir">VerifyDir( )</a> <br/>
<a href="#Vhierarchy">Vhierarchy( )</a><br/>
<a href="#viewdialog">viewdialog( )</a><br/>
<a href="#Vline">Vline( )</a><br/>
<a href="#Vstdrep">Vstdrep( )</a><br/>
</p>
<p>
<a rel="up" href="#Functions.20Reference"> ^ Functions Reference </a> 
<a rel="previous" href="#U"> &lt; --U-- </a>
<a rel="next" href="#W"> &gt; --W-- </a>
</p>

<!-- ================================= -->
<hr/><a name="varSI"></a> <h2>varSI</h2>

<h3>Function Name: varSI( ) -- RCONN 16</h3>
<h3>Function Name: statusindex( ) -- RCONN 16</h3>
<h3>Function Name: statusindexA( ) -- RCONN 16</h3>
<h3>Function Name: statusindexNV( ) -- RCONN 16</h3>
<h3>Function Name: ui_multiindex( ) -- RCONN 16</h3>

<h3>Synopsis:</h3>
<pre>
<em>result</em><b> = statusindex(</b><em>SIcode</em><b>, </b><em>itemreg</em><b>, </b><em>itemID</em><b>)</b>
<em>result</em><b> = statusindexA(</b><em>SIcode</em><b>, </b><em>itemreg</em><b>, </b><em>itemID</em><b>, </b><em>repname</em><b>)</b>
<em>result</em><b> = statusindexNV(</b><em>SIcode</em><b>, </b><em>itemreg</em><b>, </b><em>itemID</em><b>, </b><em>repname</em><b>)</b>
<em>status</em><b> = ui_multiindex(</b><em>title</em><b>, </b><em>legend</em><b>, </b><em>SIcode</em><b>, </b><em>itemreg</em><b>)</b>
<em>result</em><b> = varSI(</b><em>opcode</em><b>, </b><em>SIcode</em><b>, </b><em>itemreg</em><b>, </b><em>itemID/title</em><b>, </b><em>repname/prompt</em><b>, </b><em>postprocode</em><b>, 
             </b><em>optional restrictcode</em><b>, </b><em>optional filelist</em><b>, </b><em>optional function</em><b>, </b><em>optional Landscape flag</em><b>, </b><em>optional arguments</em><b>)</b>
</pre>

<p>Specifically, this is indicated as one of the following:</p>

<pre>
<b>varSI("R", </b><em>SIcode</em><b>, </b><em>itemreg</em><b>, </b><em>itemID/title</em><b>, </b><em>repname/prompt</em><b>, "NA", </b><em>restrictexpr</em><b>, ...)</b>
<b>varSI("M", </b><em>SIcode</em><b>, </b><em>itemreg</em><b>, </b><em>dialogtitle</em><b>, </b><em>repname/prompt</em><b>, "NA", "NA", ...)</b>
<b>varSI("P", </b><em>SIcode</em><b>, </b><em>itemreg</em><b>, </b><em>itemID/title</em><b>, </b><em>repname/prompt</em><b>, </b><em>postprocode</em><b>, "NA", ...)</b>
<b>varSI("Q", </b><em>SIcode</em><b>, </b><em>itemreg</em><b>, </b><em>itemID/title</em><b>, </b><em>repname/prompt</em><b>, "NA", "NA", ...)</b>
</pre>

<h3>Availability:</h3>
<p>This applies to 16-bit systems only. For 32-bit systems, see 
the reference for the function <a href="#statusindex">statusindex( )</a>.</p>

<h3>Description:</h3>
<p><b>varSI( )</b> is the ultimate 16-bit systems Status Index operational 
function. <b>varSI( )</b> covers all the older 
<b>statusindex??( )</b> variants as special cases. Notably:</p>

<p>1. <tt><em>result</em>
<b> = statusindex(</b><em>SIcode</em><b>, </b><em>itemreg</em><b>, 
</b><em>itemID</em><b>)</b></tt><br/>
is identical to  <br/>
<tt><em>result</em>
<b> = varSI("", </b><em>SIcode</em><b>, </b><em>itemreg</em><b>, 
</b><em>itemID</em><b>, "Standard", "NA", "NA")</b></tt><br/>
 </p>
<p>2. <tt><em>result</em>
<b> = statusindexA(</b><em>SIcode</em><b>, </b><em>itemreg</em><b>, 
</b><em>itemID</em><b>, </b><em>repname</em><b>)</b></tt><br/>
is identical to  <br/>
<tt><em>result</em>
<b> = varSI("", </b><em>SIcode</em><b>, </b><em>itemreg</em><b>, 
</b><em>itemID</em><b>, </b><em>repname</em><b>, "NA", "NA")</b></tt></p>

<p>3.  <tt><em>result</em>
<b> = statusindexNV(</b><em>SIcode</em><b>, </b><em>itemreg</em><b>, 
</b><em>itemID</em><b>, </b><em>repname</em><b>)</b></tt><br/>
is identical to  <br/>
<tt><em>result</em>
<b> = varSI("Q", </b><em>SIcode</em><b>, </b><em>itemreg</em><b>, 
</b><em>itemID</em><b>, </b><em>repname</em><b>, "NA", "NA")</b></tt></p>

<p>4. <tt><em>result</em>
<b> = ui_multiindex(</b><em>title</em><b>, </b><em>prompt</em><b>, 
</b><em>SIcode</em><b>, </b><em>itemreg</em><b>)</b></tt><br/>
is identical to  <br/>
<tt><em>result</em>
<b> = varSI("M", </b><em>SIcode</em><b>, </b><em>itemreg</em><b>, 
</b><em>title</em><b>, <a href="#makeset">makeset</a>(</b>
<em>prompt</em><b>, "Standard"), "NA", "NA")</b></tt></p>
 
<p><b>varSI( )</b> runs a status index view on the status index defined as 
<em>Sicode</em> in the <b>[$CSI]</b> section in <b>STATREES.INI</b>. 
The <em>itemreg</em> and <em>itemID</em>
refers to the root item of the SI, its location and common identity. 
This must of course appear in at least one of the tree 
lines associated with the status index. </p>

<h3>Forall selection: </h3>
<p>If the report has a selection field, defined in <b>STATREES.INI</b>, by 
the <b>$select=</b> entry, pushing the Forall button in the View will cause 
another LCX environment to be opened, and the function referred 
to in <b>STATREES.INI</b> to be executed once per selected record.</p>

<h3>DDE commands:</h3>
<p>The repname is used to identify DDE operations via WinPCS.INI, in 
the cases where the Regedit, Excel, or Word buttons are pushed in 
the Report View. When this is done, the contents of the report is 
written to a temporary file. Then, if the [DDEAPPS] section in 
WinPCS.INI has no entry beginning with repname=, the application 
is started on this file and left to the user's mercy.</p>

<p>If there is an entry in the [DDEAPPS] section in WinPCS.INI 
matching the report name, it is expected to be on the form </p>

<p>repname=LCXfile DDEfunction</p>

<p>Then, the STDREP table is opened and positioned on the record 
where the STDREP field REPORTNAME matches the repname. After this, 
a DDE environment similar to the one rundde( )  sets up is invoked, 
on the application and the file, and then control is passed 
on to the LCX function referred to in WinPCS.INI, as:</p>

<p>DDEfunction(filename, server, exepath, topic)</p>

<p>Here, filename is the temporary file's name. This function 
might possibly assume that the current record in STDREP holds 
the report's name in its REPORTNAME, and strange behavior could 
result when this is not the case. The return value of this inner 
DDEfunction is not used for anything within the system.</p>

<p>Arguments:<br/>
<em>opcode</em>:      <br/>
<b>M</b> for Multi-selection<br/>
<b>P</b> Postprocessing to be done<br/>
<b>Q</b> Quiet, no view<br/>
<b>R</b> restriction, do not list all items found, but only 
the ones that pass the test in this expression.<br/>
<b>F</b> Use specified function, file(s), orientation and argument 
for report formatting, rather than the ones defined in 
<b>STDREP</b>, <b>STATREES.INI</b> or <b>WINPCS.INI</b>. 
All 32 possible combinations are potentially useful.
</p>

<p><em>SIcode</em>:   SI code referring to an entry in the 
<b>[$CSI]</b> section in <b>STATREES.INI</b></p>

<p><em>itemreg</em>:  Name of Table for the trunk or top item in 
the Status index.</p>

<p><em>itemID/title</em>: <br/>
For Opcode including <b>M</b>:     The title of the Select-dialog window<br/>
For Opcode not including <b>M</b>: The identity of the top item 
in a <em>tablename+serial+</em> form.  (RCONN's ITEMBASE and ITEMCONFLD)</p>

<p><em>repname/prompt</em>: <br/>
For Opcode including <b>M</b>:     A 2-part set, consisting of <br/>
    1: The prompt of the Select-dialog window followed by the reportname. <br/>
    2: If the second part is missing, the reportname will be set to `Standard` <br/>

For Opcode not including <b>M</b>: The name of the report as 
defined to be used via <b>WinPCS.INI</b> or <b>STDREP</b> entries. </p>

<p>postprocode:  <br/>
For Opcode not including P: Not used. <br/>
For Opcode including P:     A reference to the postprocessing function, similar to the  
actions available in RepControl( ). This is a multi-part set where the first part 
indicates whether this is a pushbutton action or a function in a DLL, as follows: <br/>
makeset("DLL", dllname, function); Run the function defined in the DLL.<br/>
makeset("CMI", action, ... ) Issue push-commands on selected fields and buttons before 
displaying the Report.<br/></p>

<p>Example of Postprocessing calls:</p>

<pre>a = varSI("MP", "ACSUMSI", table, "Multiple Status Index",   "Select one or more", 
makeset("DLL","HARDING.ADD","_PostAC1") );
a = varSI("MP", "ACSUMSI", table, "Multiple Status Index",   "Select one or more", 
makeset("CMI","L:#0","L:#1","P:ASORT") ); </pre>

<p>optional restrictcode: <br/>
For Opcode not including R: Not used.<br/>
For opcode including R: An relational expression evaluating fields in the various 
tables taking part in the status index, and performing comparisons between 
these and values known here in the LCX function.</p>

<p>
optional filelist:<br/>
optional function:<br/>
optional Landscape flag:<br/>
optional argument:<br/>
For Opcode not including F: Not used.<br/>
For opcode including F: The formatting function, to exist in one of the files in the 
filelist, is used for formatting the report frame.
The optional argument is passed into this function, as its eighth argument.
The Landscape flag is evaluated and if non-zero, the report is formatted as 
Landscape; if zero the report is in Portrait format.</p>

<p>See the Print layout documentation for further description of this function. </p>

<h3>Return Value:</h3>
<p>1 for OK, 0 for Cancel, and -1 on errors.</p>

<h3>See Also:</h3>
<p>
<a href="#statusindex">statusindex( ) (32-bit systems)</a> ,
<a href="#statusindexdirect">statusindexdirect( )</a> <br/>
<a href="#statusindexupward">statusindexupward( )</a> <br/>
<a href="#selectdialog">selectdialog( )</a> ,
<a href="#dialogOK">dialogOK( )</a> ,
<a href="#Scoded">Scoded( )</a> ,
<a href="#InvScoded">InvScoded( )</a> ,
<a href="#rundde">rundde( )</a> ,
<a href="#ddepoke">ddepoke( )</a> ,
<a href="#ddeexecute">ddeexecute( )</a> <br/>
WinPCS.INI documentation,
STDREP documentation,
STADLG.INI documentation,
STATREES.INI documentation,
Report formatting, <br/>
<a href="#cannedindex">cannedindex( )</a>,
varSI( ) Example ,<br/>
<a href="#Secondary.20relational.20Expressions"> Secondary Expressions. </a><br/>
</p>

<p>
<a rel="up" href="#V"> ^ --V-- </a>
</p>


<!-- ================================= -->
<hr/><a name="Secondary.20relational.20Expressions"></a>
<h2> Secondary relational Expressions </h2>

<p>The relational expression used for restriction in status-index functions, such as
<a href="#statusindex">statusindex( )</a> , 
<a href="#statusindexdirect">statusindexdirect( )</a> ,
<a href="#serverindexupward">serverindexupward( )</a> , and
<a href="#statusindexupwards">statusindexupwards( )</a> as well as with 
WinPCS' Listing (also called Quick or Standard) 
Reports is simply a string as far as LCX is concerned; it is usually put together with 
a function such as <a href="#concat">concat( )</a> . The expression uses the following elements, 
which resembles the equivalent expressions in LCX:</p>

<table border="1" cellspacing="1" cellpadding="2">

<tbody>
<tr><td>Element</td> <td>Meaning</td> <td>Notes</td> </tr>

<tr><td><tt>==</tt></td><td> Comparison -- equality </td><td> </td></tr>
<tr><td><tt>!=</tt></td><td>Comparison -- inequality </td><td> </td></tr>
<tr><td><tt>&lt;=</tt></td><td>Comparison -- less than or equal </td><td>Most useful for numerical values </td></tr>
<tr><td><tt>&gt;=</tt></td><td>Comparison -- greater than or equal  </td><td>Most useful for numerical values </td></tr>
<tr><td><tt>&lt;</tt></td><td>Comparison -- less than</td><td>Most useful for numerical values </td></tr>
<tr><td><tt>&gt;</tt></td><td>Comparison -- greater than</td><td>Most useful for numerical values </td></tr>
<tr><td><tt>&amp;&amp;</tt></td><td>Conjunction And </td><td> </td></tr>
<tr><td><tt>||</tt></td><td>Conjunction Or </td><td> </td></tr>
<tr><td><tt>!</tt></td><td>Negation, Not</td><td> Used with parentheses to make expressions with not-and, neither/nor, etc.  </td></tr>
<tr><td><tt>(</tt></td><td>Left parenthesis </td><td> </td></tr>
<tr><td><tt>)</tt></td><td>Right parenthesis </td><td> 
The left and right parentheses can be used to enclose sub-expressions, to change the precedence or apply negation.  </td></tr>

<tr><td> <tt>@</tt><em>text</em><tt>@</tt> </td><td> A constant, numerical or non-numerical string </td><td>
This can come from an LCX variable, expression, or be specified as a regular string value. See note below </td></tr>

<tr><td> <em>number</em> </td><td> Numerical value </td><td>
Numbers do not need to be delimited; this is the same kind of rule as 
LCX itself uses, in that the delimited string <tt>@</tt><em>number</em><tt>@</tt> 
is the same as that number by itself.  </td></tr>

<tr><td> <em>tablename</em><tt>:</tt><em>fieldname</em> </td><td> A reference to a table and field in that table. </td><td>
The table must be opened in the course of the status index, and the field must exist in the table, but does 
not have to be visible in the index report listing. There are a number of macros available in status indexes
to indicate tables and fields generally specified elsewhere. See below.  </td></tr>

<tr><td> <em>tablename</em><tt>:</tt><em>fieldname</em><tt>:</tt><em>filterfunction</em> </td><td>
A reference to a table and field in that table with a filtering function being called to modify the value. </td><td>
As above, the table must be opened in the course of the status index, and the field must exist in the table, but does 
not have to be visible in the index report listing. There are a number of macros available in status indexes
to indicate tables and fields generally specified elsewhere. The filter function must be defined on the server, since
the status-index reporting action takes place there.  </td></tr>

</tbody>
</table>



<p>Quick reports, and the function 
<a href="#TableSumProcess">TableSumProcess( )</a> 
that use these expressions use the single quote instead of the at-sign. 
The operation is otherwise the same.  </p>

<p>The @ was chosen in an attempt to minimize interference with 
legitimate double quotes as found in LCX string expressions (which may be handled 
using \x22 s for the double quotes but this is not pleasant) and occasionally in data (line 
numbers for example).  Should it be necessary to use another character, this can be 
configured, system-wide, by the entry</p>
<pre>

[REPORT]
SILQUOTE=character to use
</pre>
<p>
in WinPCS.INI.</p>

<p>The default is SILQUOTE=@.</p>

<h3>Macros for table--names</h3>
<p>In addition to any real table names, these macros or shortcuts for specific tables
in a report can be used and they will work when these may be different between versions 
of reports, as well as being different from record to record.</p>

<p>Notice that table- and field-names understood in the restrictions 
from copying data from Grand Reports, using
<a href="#statusindexupward">statusindexupward( )</a> or 
<a href="#serverindexupward">serverindexupward( )</a> 
are limited to the set of table- and field-names actually listed in the
relevant section of starep.ini, with codes such as <b>#0</b> or <b>#itemfld</b> 
retained.</p>

<p>These strings are mostly the same as the ones used in STAREP.INI</p>

<table border="1" cellspacing="1" cellpadding="2">
<tbody>
<tr><td>Element</td> <td>Meaning</td> <td>Notes</td> </tr>
<tr><td>#0</td> <td>Highest level table in the report</td> <td>This is the first table-name in the tree-line.</td> </tr>
<tr><td>#1</td> <td>Second level table in the report</td> <td>Similarly #2 and onwards refer to levels further down.</td> </tr>
<tr><td>#penult</td> <td>Penultimate table </td> <td>
Most commonly this will refer to the equipment table that carries a particular check-sheet or punchitem. </td> </tr>
<tr><td>#leaf</td> <td>Last table</td> <td>The terminology of arboreal culture carries on: on going up a tree you will eventually 
end at a leaf. Similarly, this is the reference-object being reported on, such as a check-sheet or punchitem.</td> </tr>
<tr><td>#carrier</td> <td>Table where the status-value is stored.</td> 
<td>This is the table in which where the status value is located. Depending on the nature of the 
objects reported on, this can be the same as the #leaf table, or it can be the connection-table between the #penult and #leaf tables.</td> </tr>
</tbody>
</table>

<h3>Macros for field-names</h3>
<p>These refer to field-names in CXDICT for the corresponding table</p>
<p>#penult:#ITEMFLD
refers to the main identity field in the level right above the leaf level.</p>

<h3>The filter function</h3>
<p>These functions are expected to be on the server, and they take the original value from the table
as the argument and return the filtered value. Typical cases might be to convert dates to Julian Day
numbers for the purposes of range comparisons, but the function can do anything. </p>

<p>Example:</p>

<pre>
jdconv(string fieldvalue)
{
    return(julday(fieldvalue));
}
</pre>

<p>This will be called in references similar to <b>#carrier:CREATE_DATE:jdconv</b> </p>

<p>The most common use of these functions is to generate some simple numerical value for a property or string, 
to make it easy to define greater-than or less-than comparisons, for selecting a range.</p>

<h3>See Also:</h3>
<p>
varSI( ) example 
</p>

<p>
<a rel="up" href="#V"> ^ --V-- </a>
</p>



<!-- ================================= -->
<hr/><a name="varSI.20Example"></a> <h2>varSI() Example</h2>

<p>This varSI( )  call lists all records where a desired discipline (held in variable disp) is 
found, and the status value is not equal to 3. (of course this could also be taken from a 
LCX variable): (REFITR is a table, with the discipline code in the field DISP and the 
status is held in field STATUS in one of several status-carrying tables, each of which will 
match the #carrier name.</p>

<pre>

example( )
{
string disp, psc, repname, expr;
/* disp, psc, and repname are here to be given values by any normal means; 
here, disp = "J"; is used */
expr = concat("REFITR:DISP==@", disp, "@ &amp;&amp; #carrier:STATUS != 3");
varSI("R", "AC1SI", "CERTAC1", psc, repname, "0", expr);
}
</pre>

<p> The expr variable will contain the expression</p>

<p>REFITR:DISP==@J@ &amp;&amp; #carrier:STATUS != 3</p>

<p>and the resultant report will contain all records for discipline J where the status value is 
not equal to 3. </p>

<p>
<a rel="up" href="#V"> ^ --V-- </a>
</p>

<!-- ================================= -->
<hr/><a name="VarHierarchy"></a> <h2>VarHierarchy</h2>

<h3>Function Name: <tt> VarHierarchy()</tt> - NCONN 32c RCONN 16</h3>

<h3>Synopsis</h3>
<pre><b>
VarHierarchy(</b><em>hightable</em><b>, </b><em>distfield</em><b>, 
    </b><em>filterfile</em><b>, </b><em>iconfilter</em><b>, </b><em>descrfilter</em><b>, 
    </b><em>limitexpr1</em><b>, 
    </b><em>semiconfieldtab</em><b>, </b><em>semiconfieldid</em><b>, </b><em>semiconmode</em><b>, 
    </b><em>displayfieldlist</em><b>);</b></pre>

<h3>Description</h3>
<p>This function opens a variant of the Hierarchy, with 3 levels, where 
the first two levels are based on data found in the same table, 
<em>hightable</em> and 
the 3rd level is from another table referenced to from 
this highest level table. </p>

<p> The 1st level is shown as distinct values of <em>distfield</em> 
from <em>hightable</em>. The icons to be shown are the ones with names 
produced by the <em>iconfilter</em> function, and the description is the text
coming out of the <em>descrfilter</em> function. The <em>distfield</em> 
should be a duplicated key value in this table, showing some common 
interesting parameter such as week due, discipline, area, etc.</p>

<p>These functions resemble the filterfunctions defined in CXDICT. </p>

<p>The 2nd level shows all instances of <em>hightable</em> 
matching the ``parent'' <em>distfield</em> value, and where 
the <em>limitexpr1</em> evaluates as true. This allows limiting the
found items further, to ones with certain status-setting or similar. </p>

<p>The display-mechanism here uses the standard CXDICT ITEMICONFLD, 
ITEMFLD, ITEMDESFLDS and possibly FILTERFUNCTION for 
the displayed record in <em>hightable</em>.
(16-bit: The <em>displayfieldlist</em> fields are used to show 
the interesting part of these objects. This may replace the 
CXDICT filter function since a simple concatenation of field data 
values is faster on the 16-bit systems)</p>

<p>The 3rd level are semi-connected objects seen from certain fields
in the start-table, (table, record-number), using standard
CXDICT fields for displaying this as in ordinary hierarchies. 
<em>semiconfieldtab</em> is a field with the next 
level table name, <em>semiconfieldid</em> is the field with the 
next level object identity, and <em>semiconmode</em> is 1 for this 
object identity being ITEMFLD and 0 if this is ITEMUNIFLD.</p>

<p>When the instances are created as a result of a connection between a
tag and a proforma sheet, the ITEMUNIFLD is what is being used in the 
connection table.  When the instances are created and are regularly
connected objects in their own right, the ITEMFLD containing copy-
references is the better choice.</p>

<h3>DDMATRIX interactions:</h3>
<p>As in all hierarchies, the DDMATRIX table contains references to the 
functions and menu entries that are required for the various levels. 
Right-clicks on 2nd and 3rd levels are handled as ordinary 
DDMATRIX lookup-activities. On the 2nd level, it uses the 
<em>hightable</em> and that table's standard CXDICT ITEMFLD fieldname 
for the ORIGIN, as is the usual way of doing this, since the objects seen 
here are indeed the ones defined in the <em>hightable</em>. </p>

<p>Right-clicks on the top level also map onto DDMATRIX but
here, the matching key for the ORIGIN must be different from the main
table since we generally do not want to have the same menu choices for the
groupings of <em>distfield</em> as we do for the objects themselved
where they are identified by <em>hightable</em> and the ITEMFLD. </p>

<p>Instead of the table, (in the 16-bit systems at least) a pseudo-table
name is synthesized from the original table name, by replacing the first 
3 characters with <b>HV</b> and the original first character, as for example:</p>

<pre>
AUTOPL becomes HVAOPL<br/>
CONPMR becomes HVCPMR<br/>
DOCPROJ becomes HVDPROJ<br/>
ENGINST becomes HVEINST<br/>
REFFTC1 becomes HVRFTC1
</pre>

<p>The field ORIGIN in DDMATRIX should be this pseudo-table name, and the
secondary field ORIGIN_FIELD should be the specified <em>distfield</em>.
The calls to the function will still use the real table-name, where the
value in <em>DISTFIELD</em> and that fieldname also is given as they 
are in the table. The pseudo-table is only used for looking up in DDMATRIX
and not passed onwards. </p>
 
<!--
Right-clicks on the 1st level also map onto DDMATRIX but
the called function has to use the hierinfo parameter to determine
what is what.  This is quite messy, and it is likely that 
changes will occur here.  
-->

<h3>Example</h3>

<p>There is a table for preservation instances, that contain the 
week number when the activity is to be performed.  The idea is
to create the high-level schedule, showing all the weeks of
interest in the system. Under each week, the instances with that 
week set will be shown, and under each of these is the tag or equipment
that has this particular requirement. </p>

<pre>
/* 
    Called from PCSD.INI through:
        Preservation Schedule=0:\pmrgen.lcx L PresvSchedule
*/

PresvSchedule(string symdir, string file, string perm)
{
    VarHierarchy("CONPMR", "NEXT_WEEK", 
        "0:\pmrgen.lcx", "PSIcon", "PSDescr", 
        "STATE==@1@", 
        "LEFT", "LEFT_RSERIAL", 0
        );
    return(0);
}

PSDescr(string weekid)
{
    if(weekid == 0)
    {
        return(" Stopped Preservation Requirements");
    }
    return(concat(weekid, " Preservation Requirement for Year Week ", weekid));
}

PSIcon(string weekid)
{
    string wkx;

    if(weekid == 0) { return("BM0WEEK"); }

    wkx = week();

    if(weekid == wkx) { return("BMTWEEK"); }
    if(weekid &lt; wkx) { return("BMPWEEK"); }
    return("BMFWEEK");
}
</pre>

<p>The filter functions deal with the description-string. The logic is 
that instances with next-week set to 0 are stopped, and others are either
overdue, due, or to be done in the future. The icon shown on each week,
and coming from the PSIcon() function, reflects this. </p>

<p>
<a rel="up" href="#V"> ^ --V-- </a>
</p>

<!-- ================================= -->
<hr/><a name="viewdialog"></a> <h2>viewdialog</h2>

<h3>Function Name: <tt> viewdialog()</tt> - RCONN 16</h3>

<h3>Synopsis</h3>
<pre><em>result</em><b> = viewdialog(</b><em>table</em><b>, </b><em>inifile</em><b>, </b><em>keyfield</em><b>, </b><em>initialvalue</em><b>);</b>
<em>status</em><b> = dialogOK()</b> </pre>

<h3>Description</h3>
<p>This opens an View Form on the named table, using the named .INI file, 
which should have contents matching the table; and the initial record in 
the table is the one where the value of keyfield is equal to initvalue. 
If this is duplicated, the first duplicate is entered. </p>

<p> Control does not return to the LCX code after the call until the dialog box is closed.  </p>

<h3>Return Value:</h3>
<p>The value of the field keyfield in the view when the View is closed.
This is controlled by EXIT commands in the View INI file. 
The status of the dialog, indicating OK or Cancel, is found via the 
dialogOK() function. This function will return 
1 if the View was terminated with OK, 0 if it was cancelled 
or not started. </p>

<h3>Errors</h3>

<h3>See Also:</h3>
<p>
<a href="#entrydialog ">entrydialog ( )</a> 
<a href="#dialogOK">dialogOK( )</a> 
<a href="evini.html#Introduction"> View and Entry .INI files reference.  </a>
</p>

<p>
<a rel="up" href="#V"> ^ --V-- </a>
</p>

<!-- ================================= -->
<hr/><a name="VerifyDir"></a> <h2>VerifyDir</h2>
<h3>Function Name: VerifyDir( ) -- LCX 16 LCX 32s LCX 32c LCX 64 </h3>

<h3>Synopsis:</h3>
<pre><em>status</em><b> = VerifyDir(</b><em>path</em><b>);</b></pre>

<h3>Description:</h3>

<h3>Availability:</h3>
<p>UNDER CONSTRUCTION</p>

<h3>See Also:</h3>

<p>
<a rel="up" href="#V"> ^ --V-- </a>
</p>


<!-- ================================= -->
<hr/><a name="Vhierarchy"></a> <h2>Vhierarchy</h2>

<h3>Function Name: Vhierarchy( ) -- RCONN 16 NCONN 32c</h3>

<h3>Synopsis:</h3>
<pre><b>Vhierarchy( </b><em>Root</em><b>, </b><em>phase</em><b>);</b></pre>

<h3>Description:</h3>
<p>This function opens a standard hierarcy view on the table <em>Root</em>, 
with the optional phase-code identified as <em>phase</em>.  
The Root and phase map to entries in WinPCS.INI section [HIERTOP]</p>

<h3>See Also:</h3>
<p>
<a href="#openhierarchy">openhierarchy( )</a>,
<a href="#runview">runview( )</a>,
<a href="#Vstdrep">Vstdrep( )</a>
</p>

<p>
<a rel="up" href="#V"> ^ --V-- </a>
</p>

<!-- ================================= -->
<hr/><a name="Vline"></a> <h2>Vline</h2>

<h3>Function Name: Vline( ) -- PPVIEW 16 PPVIEW 32</h3>
<h3>Synopsis:</h3>
<pre><b>Vline(</b><em>x</em><b>, </b><em>y1</em><b>, </b><em>y2</em><b>);</b></pre>
<pre><b>Vline(</b><em>x</em><b>, </b><em>y1</em><b>, </b><em>y2</em><b>, </b><em>weight</em><b>);</b></pre>
<pre><b>Vline(</b><em>x</em><b>, </b><em>y1</em><b>, </b><em>y2</em><b>, </b><em>weight</em><b>, </b><em>color</em><b>);</b></pre>

<h3>Description:</h3>
<p>The <b>Vline( )</b> function draws a vertical line at a distance <em>x</em> from the Origin point of the 
paper, from a vertical position <em>y1</em> to another vertical position <em>y2</em>.  The <em>weight</em> argument if 
present, gives a line of the specified thickness. Additionally, the color of the line may be 
specified by adding the fifth argument, <em>color</em>.</p>

<h3>Availability:</h3>
<p>Only available in a printing function.</p>

<h3>See Also:</h3>
<p>
<a href="#Hline">Hline( )</a> , 
<a href="#Line">Line( )</a> 
</p>
<p>
<a rel="up" href="#V"> ^ --V-- </a>
</p>

<!-- ================================= -->
<hr/><a name="Vstdrep"></a> <h2>Vstdrep</h2>

<h3>Function Name: Vstdrep( ) -- RCONN 16 NCONN 32c</h3>
<h3>Synopsis:</h3>
<pre><b>Vstdrep( );</b></pre>

<h3>Description:</h3>
<p>This function opens the Standard Reports (or Quick-reports) selection 
dialog and allows the user to select a Report to be run.</p>

<h3>See Also:</h3>
<p>
<a href="#runview">runview( )</a> , 
<a href="#Vhierarchy">Vhierarchy( ) </a>
</p>
<p>
<a rel="up" href="#V"> ^ --V-- </a>
</p>


<!-- ================================= -->
<!-- W -->

<hr/><a name="W"></a><h2>--W--</h2>
<p>
<a href="#week">week</a><br/>
<a href="#WeekDelta">WeekDelta</a><br/>
<a href="#WeekFromDate">WeekFromDate</a><br/>
<a href="#WeekShift">WeekShift</a><br/>
<a href="#Width">Width</a><br/>
<a href="#wildstatus">wildstatus( )</a><br/>
</p>
<p>
<a rel="up" href="#Functions.20Reference"> ^ Functions Reference </a> 
<a rel="previous" href="#V"> &lt; --V-- </a>
<a rel="next" href="#X"> &gt; --X-- </a>
</p>


<!-- ================================= -->
<hr/><a name="week"></a> <h2>week</h2>

<h3>Function Name: week( ) -- LCX 16 TMGT 32s NCONN 32c TMGT 64s </h3>
<h3>Synopsis:</h3>
<pre><em>value</em><b> = week( );</b></pre>
<pre><em>value</em><b> = WEEK( ) (LCX 16 only) </b></pre>

<h3>Description:</h3>
<p>This function reads the system calendar 
and figures out the year and week number in that year. The underlying 
logic knows about such things as 53-week years, and 
year-number mismatches near New Year, where January 1st may be 
partway into the last week on the previous year, or December 31st 
may be in the first week of the next year.</p>

<p>On 32-bit systems, the date on the server is used as the basis for the 
calculation, analogous to what is done with the 
<a href="#date"> date( ) </a> and <a href="#time"> time( ) </a> functions.</p>

<h3>Return Value:</h3>
<p>A six digit string on the form: <em>YYYYWW</em>
where <em>YYYY</em> is the year and <em>WW</em> is the week number (<b>01</b>--<b>53</b>)</p>

<h3>Limitation:</h3>
<p>Weeks are reckoned from Monday to Sunday in all versions 
of WinPCS, even if the civil calendar may argue otherwise.</p>

<h3>Standalone Replacement:</h3>
<p>Since the date and time are defined by the server in the client/server systems,
the standalone version of this function, as made available to the
the LC97, LC64, and LCXT programs, the function is called 
<a href="#zfunctions">
zweek()</a></p>
 
<h3>See Also:</h3>
<p>
<a href="#date"> date( ) </a> , 
<a href="#time"> time( ) </a> ,
<a href="#julday">julday( )</a>, 
<a href="#caldat"> caldat( ) </a>,
<a href="#WeekShift"> WeekShift( ) </a> , 
<a href="#WeekDelta"> WeekDelta( ) </a> .
</p>

<p>
<a rel="up" href="#W"> ^ --W-- </a>
</p>

<!-- ================================= -->
<hr/><a name="WeekDelta"></a> <h2>WeekDelta</h2>

<h3>Function Name: WeekDelta( ) -- LCX 16 LCX 32s LCX 32c LCX 64</h3>
<h3>Synopsis:</h3>
<pre><em>count</em><b> = WeekDelta(</b><em>week1</em><b>, </b><em>week2</em><b>);</b></pre>

<h3>Description:</h3>
<p>
Given two year and week values, return the number of weeks between them, taking 
things like 53-week years, leap years, and all that into consideration.
</p>

<h3>Return Value:</h3>
<p>
The number of weeks between <em>week1</em> and <em>week2</em>, as if evaluating <em>week1-week2</em>.
</p>

<h3>See Also:</h3>
<p>
<a href="#WeekShift"> WeekShift( ) </a>,  
<a href="#julday">julday( )</a>, 
<a href="#caldat"> caldat( ) </a>,
<a href="#week"> week( ) </a> .
</p>

<p>
<a rel="up" href="#W"> ^ --W-- </a>
</p>


<!-- ================================= -->
<hr/><a name="WeekFromDate"></a> <h2>WeekFromDate</h2>

<h3>Function Name: WeekFromDate( ) -- LCX 16 TMGT 32s NCONN 32c TMGT 64s</h3>
<h3>Synopsis:</h3>
<pre><em>week</em><b> = WeekFromDate(</b><em>date</em><b>);</b></pre>

<h3>Description:</h3>
<p>Given a date, this function will return the week  
that date is in. This is the opposite of 
<a href="#DateFromWeek"> DateFromWeek( ) </a> . </p>

<p>If the incoming date is blank, the returned value will 
be the first week of 2000, 200001.</p>

<h3>Standalone Replacement:</h3>
<p>Since the date-format is defined by the server in the client/server systems,
the standalone version of this function, as made available to the
the LC97, LC64, and LCXT programs, the function is called 
<a href="#zfunctions">
zWeekFromDate()</a></p>

<h3>See Also:</h3>
<p>
<a href="#week"> week( ) </a> ,
<a href="#date"> date( ) </a> , 
<a href="#julday">julday( )</a>, 
<a href="#caldat"> caldat( ) </a>,
<a href="#WeekShift"> WeekShift( ) </a> , 
<a href="#WeekDelta"> WeekDelta( ) </a> ,
<a href="#DateFromWeek"> DateFromWeek( ) </a> . 
</p>

<p>
<a rel="up" href="#W"> ^ --W-- </a>
</p>


<!-- ================================= -->
<hr/><a name="WeekShift"></a> <h2>WeekShift</h2>

<h3>Function Name: WeekShift( ) -- LCX 16 LCX 32s LCX 32c LCX 64</h3>
<h3>Synopsis:</h3>
<pre><em>week2</em><b> = WeekShift(</b><em>week1</em><b>, </b><em>offset</em><b>);</b></pre>

<h3>Description:</h3>
<p>Given a year and week and an offset, return the proper year and week, taking things like 
53-week years, leap years, and all that into consideration.
</p>

<h3>Return Value:</h3>
<p>The Return Value is the year and week offset weeks offset from week1. The effect is 
similar to evaluating <em>week1+offset</em>.
</p>

<h3>See Also:</h3>
<p>
<a href="#WeekDelta"> WeekDelta( ) </a> ,
<a href="#julday">julday( )</a>, 
<a href="#caldat"> caldat( ) </a>,
<a href="#week"> week( ) </a> .
</p>

<p>
<a rel="up" href="#W"> ^ --W-- </a>
</p>

<!-- ================================= -->
<hr/><a name="Width"></a> <h2>Width</h2>

<h3>Function Name: Width( ) -- PPVIEW 16 PPVIEW 32</h3>
<h3>Synopsis:</h3>
<pre><em>value</em><b> = Width( );</b></pre>

<h3>Return Value:</h3>
<p>The returned value is the width of the paper in 1/10mm units.  This is always a positive 
number. </p>

<h3>Description:</h3>
<p>The <b>Width( )</b> function gives the width of the paper.  This is dependent on the 
Portrait/Landscape printer setting, and on the actual paper size selected. </p>

<h3>Availability:</h3>
<p><b>Width( )</b> is only available in a printing environment.</p>

<h3>See Also:</h3>
<p>
<a href="#Height">Height( ) </a>
</p>
<p>
<a rel="up" href="#W"> ^ --W-- </a>
</p>

<!-- ================================= -->
<hr/><a name="wildstatus"></a> <h2> wildstatus </h2>
<h3>Function Name: wildstatus( ) -- NCONN 32c</h3>

<h3>Synopsis:</h3>
<pre><em>statusset</em><b> = wildstatus(</b><em>dialogspec</em><b>, </b><em>optionset</em><b>, 
</b><em>title</em><b>, </b><em>initialstatus</em><b>, 
</b><em>filelist</em><b>, 
</b><em>collectfunction</em><b>, </b><em>getfunction</em><b>, </b><em>acceptfunction</em><b>, </b><em>envparam</em><b>);</b></pre> 

<h3>Description:</h3>
<p>This function creates and opens a status-dialog similar to the ones 
defined in STADLG.INI using only locally specified parameters. </p>

<p>A number of status-options are shown, in addition to some other 
optional fields defined, and the dialog has an OK and a Cancel button
to accept or close it at the end.  The similarity to some of the argument
and similar statements in STADLG.INI come down to the fact that both
use the same functionality.  </p>

<p>In some ways, this function can be seen as a hybrid of the 
<a href="#question">question( )</a> and 
<a href="#statusdialog">statusdialog( )</a> functions, since this
opens a status-dialog looking question dialog, with buttons and 
dialog elements in it, and returns the selection made. While it 
uses the same code as the statusdialogs, no accesses to STADLG.INI
or the server is required, it is all created locally on 
in the client. On tablet-systems, this is used for
the flat-file status setting activities there. </p>

<p>Arguments:<br/>

<em>dialogspec</em> A string on the form count R/W/T control:function...
equivalent to the definitions of DIALOG= in STADLG.INI. See the 
<a href="call0003.html">
discussion on info init functions</a> for more on the control: statements. <br/>

<em>optionset</em> This set consists of pairs of elements 
where the first one in the pair is the numerical status value and
the second element is the descriptive legend as it is to appear
on the dialog.  <br/>

<em>title</em> This is the title of the dialog <br/>

<em>initialstatus</em> This is the initial status-value to be displayed 
in the dialog. If this is not set to match any of the values in 
<em>optionset</em>, no initial value will be shown.  <br/>

<em>filelist</em> This is the list of files where the following functions
are defined. The usual numbered path logic applies.  <br/>

<em>collectfunction</em> This function collects the on-screen dialog items
values into a set to be part of the return value<br/>

<em>getfunction</em> This function is similar to the get-function of
STADLG.INI; it is run to initialize global variables just before the 
dialog is opened.  <br/>

<em>acceptfunction</em> This function checks the elements in the dialog
when the user clicks 
and is used to determine whether the selections and items are 
acceptably filled out and returns 0 to stop and leave the dialog open,
or 1 to pass and close the dialog when the user clicks OK.  <br/>

<em>envparam</em> This value is passed through to the functions, this can be
a reference to a report-structure, an open file, or anything else that may be
a context needed inside the functions. </p>

<p>The dialog uses the three specified functions as callback actions, 
to perform the actions required locally.</p>

<p>(More details to be added)</p>

<h3>The <i>getfunction</i></h3>
<p>This function is used to initially populate the edit-controls and selection
boxes, with default values, or with values extracted from the <i>envparam</i>. 
This function is called as:</p>
<pre>
<i>getfunction</i><b>(</b><i>initialstatus</i><b>,</b><i>title</i><b>,</b><i>envparam</i><b>);</b>
</pre>
<p>and its return value is functioally ignored, though it may be used for debugging purposes.
To ensure future compatibility, make the function return 0. </p>

<h3>The <i>acceptfunction</i></h3>
<p>This function is called when the user clicks OK, in order to check if the dialog-values
selected are acceptable. The function may open message-boxes or selectdialogs as desired, to
indicate to the user what was not acceptable with the data.  
This function is called as:</p>
<pre>
<i>acceptfunction</i><b>(</b><i>status</i><b>);</b>
</pre>
<p>and should return 1 when data has been determined to be acceptable and 0 for hold 
and stay in the dialog. When data is not acceptable, it is a good idea to open a message
box about why the data could not be used so that the user doesn't feel 
stuck in the dialog-box.</p>

<h3>The <i>collectfunction</i></h3>
<p>The purpose of this function is to collect the values in the dialog and return them
to the function calling the wildstatus() function itself.  This function is called when 
the dialog contents have been found acceptable.  The function is called as:</p>
<pre>
<i>collectfunction</i><b>(</b><i>initialstatus</i><b>,</b><i>title</i><b>,</b><i>envparam</i><b>);</b>
</pre>
<p>and should return the values in a set form so that the caller of wildstatus() can find them.
</p>

<h3>Named Elements</h3>
<p>The default naming of elements as DLG_EDIT1, DLG_EDIT2, etc., can be cumbersome,
so there is an option of specifying a variable name for each control, by placing the
variable-name in a set of parentheses after the control type (edit, big, select, info, 
command), for example, </p>
<pre>
select(DISCP):D_label+D_pb+D_action
</pre>
<p>will make the variable for this selection into DISCP instead of some DLG_SELECT<i>n</i>.</p>

<p>Global variables of the same names will be re-used. Sometimes this may be exploited where
optional selection elements can be omitted, and their variables will still exist if defined
as global variables prior to the wildstatus() call; thus, should the above selection element be
optional, declaring a global variable named DISCP will allow the now invisible and unused selection
to be handled in the getfunction, acceptfunction, and collectfunction as if it were present
and visible. </p>

<h3>Example:</h3>
<pre>

StatItem(string View, string table)
{
    string instat, field, tag, ntstatus;
    string dlgok, title;
    string newcomment, nstat; 
    string inicomment;
    string standardicon, bs, cfield;

    field = StdField(table, "ITEMFLD"); 
    tag = get(table, field); 

    if(!fieldexists(table, "ENG_STATUS")) { return(0); }

    cfield = "REMARKS";
    if(!fieldexists(table, cfield)) { cfield = "COMMENTS"; }
    if(!fieldexists(table, cfield)) { cfield = ""; }
    inicomment = ""; 
    if(!notext(cfield)) { inicomment = get(table, cfield); }

    instat = ordinal( get(table, "ENG_STATUS") ); 

    title = concat("Status of ", tag); 

    ntstatus = wildstatus("9 WWWWWWWWW edit:E_comments", 
        makeset("65", "ACTIVE",
                "68", "DELETED",
                "69", "ERROR",
                "70", "FUTURE",
                "72", "HOLD",
                "73", "INCOMPLETE",
                "78", "NOT FOUND",
                "81", "QUERY",
                "86", "VENDOR"), 
        title,                  /* Description of item */
        instat,                 /* Initial status */
        "0:\tagstat.lcx",   /* File-list */
        "Xcollect",         /* Collect */
        "Xongeta",          /* Get */
        "XAccept",          /* Accept */ 
        inicomment);                /* Get, collect, functions param */

    dlgok = dialogOK(); 

    if(!dlgok) { return(0); }

    nstat = ASCII( setitem(ntstatus, 1) ); 
    put(table, "ENG_STATUS", nstat); 

    /* Figure out the standard icon, standardicon for this table. */ 
    standardicon = StdField(table, "DEFAULTICON");
    put(table, "ICON", concat(standardicon, "_", nstat)); 

    if(!notext(cfield)) 
    { 
        put(table, cfield, setitem(ntstatus, 0));
    }
    update(table); 
    return(0);
}

E_comments() { return("Comments"); }

/* Set an Initial value for the edit-control */
Xongeta(string status, string descr, string info)
{
    DLG_EDIT1 = info;
    return(0);
}

/* On OK, read values off the controls and 
    return them to main function. */
Xcollect(string status, string descr, string info)
{
    return(DLG_EDIT1);
}

/* Status should not be 0. Pass everything else. */ 
XAccept(string status)
{
    if(status == 0) { return(0); }
    return(1); 
}

</pre>

<h3>See Also:</h3>
<p>
<a href="#question">question( ) </a>,
<a href="#statusdialog">statusdialog( ) </a>,
<a href="call0003.html"> Info Init -- Category 3</a><br/>
</p>

<p>
<a rel="up" href="#W"> ^ --W-- </a>
</p>

<!-- ================================= -->
<!-- X -->

<hr/><a name="X"></a><h2>--X--</h2>
<p> This is a placeholder. There are no functions whose names start with X.  </p>

<p>
<a rel="up" href="#Functions.20Reference"> ^ Functions Reference </a> 
<a rel="previous" href="#W"> &lt; --W-- </a>
<a rel="next" href="#Y"> &gt; --Y-- </a>
</p>

<!-- ================================= -->
<!-- Y -->

<hr/><a name="Y"></a><h2>--Y--</h2>
<p>
<a href="#yesno">yesno( )</a><br/>
</p>
<p>
<a rel="up" href="#Functions.20Reference"> ^ Functions Reference </a> 
<a rel="previous" href="#X"> &lt; --X-- </a>
<a rel="next" href="#Z"> &gt; --Z-- </a>
</p>

<!-- ================================= -->
<hr/><a name="yesno"></a> <h2>yesno</h2>

<h3>Function Name: yesno( ) -- LCX 16 LCXCLI 32c</h3>

<h3>Synopsis:</h3>
<pre><em>value</em><b> = yesno(</b><em>title</em><b>, </b><em>question</em><b>);</b></pre>

<h3>Description:</h3>
<p>A message box with the specified title <em> title</em> and question <em> question</em> is 
displayed, and there are two buttons, 
labeled <b>Yes</b> and <b>No</b>. If the question is made out of several parts, 
use <a href="#concat">concat( )</a> to paste them together before the question is asked.</p>

<h3>Return Value:</h3>
<p><b>0</b> if the user answered No and <b>1</b> if the user answered Yes.</p>

<h3>See Also:</h3>
<p>
<a href="#message">message( )</a> , 
<a href="#input">input( )</a> , 
<a href="#question">question( )</a>
</p>

<p>
<a rel="up" href="#Y"> ^ --Y-- </a>
</p>

<!-- ================================= -->
<!-- Z -->

<hr/><a name="Z"></a><h2>--Z--</h2>
<p>
<a href="#zfunctions">zAssembleDate( )</a><br/>
<a href="#zfunctions">zdate( )</a><br/>
<a href="#zfunctions">zDateCanonical( )</a><br/>
<a href="#zfunctions">zDateFromWeek( )</a><br/>
<a href="#zfunctions">ztime( )</a><br/>
<a href="#zfunctions">zweek( )</a><br/>
<a href="#zfunctions">zWeekFromDate( )</a><br/>
<a href="#zfunctions">zcaldat( )</a><br/>
<a href="#zfunctions">zjulday( )</a><br/>
</p>
<p>
<a rel="up" href="#Functions.20Reference"> ^ Functions Reference </a> 
<a rel="previous" href="#Y"> &lt; --Y-- </a>
<a rel="next" href="#A"> &gt; --A-- </a>
</p>

<!-- ================================= -->
<hr/><a name="zfunctions"></a> <h2>date/time standalone replacement functions.</h2>

<h3>Function Name: zAssembleDate( ) -- LCXT LC97 LC64</h3>
<h3>Function Name: zdate( ) -- LCXT LC97 LC64</h3>
<h3>Function Name: zDateCanonical( ) -- LCXT LC97 LC64</h3>
<h3>Function Name: zDateFromWeek( ) -- LCXT LC97 LC64</h3>
<h3>Function Name: ztime( ) -- LCXT LC97 LC64</h3>
<h3>Function Name: zweek( ) -- LCXT LC97 LC64</h3>
<h3>Function Name: zWeekFromDate( ) -- LCXT LC97 LC64</h3>
<h3>Function Name: zcaldat( ) -- LCXT LC97 LC64</h3>
<h3>Function Name: zjulday( ) -- LCXT LC97 LC64</h3>

<h3>Synopsis:</h3>
<pre><em>date</em><b> = zAssembleDate(</b><em>year</em><b>, </b><em>month</em><b>, </b><em>day</em><b>);</b></pre>
<pre><em>daynumber</em><b> = zjulday(</b><em>date</em><b>);</b></pre>
<pre><em>date</em><b> = zdate();</b></pre>
<pre><em>date</em><b> = zDateCanonical(</b><em>regdate</em><b>);</b></pre>
<pre><em>date</em><b> = zDateFromWeek(</b><em>week</em><b>, </b><em>day</em><b>);</b></pre>
<pre><em>date</em><b> = zcaldat(</b><em>daynumber</em><b>);</b></pre>
<pre><em>time</em><b> = ztime();</b></pre>
<pre><em>week</em><b> = zweek();</b></pre>
<pre><em>week</em><b> = zWeekFromDate(</b><em>date</em><b>);</b></pre>

<h3>Description:</h3>
<p>These are replacements for the functions
<a href="#AssembleDate">AssembleDate( )</a> ,
<a href="#caldat">caldat( )</a> ,
<a href="#date">date( )</a> ,
<a href="#DateCanonical">DateCanonical( )</a> ,
<a href="#DateFromWeek">DateFromWeek( )</a> ,
<a href="#julday">julday( )</a> ,
<a href="#time">time( )</a> ,
<a href="#week">week( )</a> , and
<a href="#WeekFromDate">WeekFromDate( )</a>  for the standalone LCX programs 
LCXT (GUI windows), LC97 (console, windows) and LC64 (console, Linux).  For details on the functions, see the
corresponding function without the prefixed z. </p>

<p>The function returning dates will return them in the YYYY-MM-DD format, and
the functions that take dates as arguments will expect them to appear
in the same format.  Use 
<a href="#concat">concat( )</a>, 
<a href="#substr">substr( )</a>, and
<a href="#zAssembleDate">zAssembleDate( )</a> 
to convert to and from and operate on other date formats.</p>

<h3>See Also:</h3>
<p>
<a href="#AssembleDate">AssembleDate( )</a> <br/>
<a href="#caldat">caldat( )</a> <br/>
<a href="#date">date( )</a> <br/>
<a href="#DateCanonical">DateCanonical( )</a> <br/>
<a href="#DateFromWeek">DateFromWeek( )</a> <br/>
<a href="#julday">julday( )</a> <br/>
<a href="#juldayadaptive">juldayadaptive( )</a> <br/>
<a href="#time">time( )</a> <br/>
<a href="#week">week( )</a> <br/>
<a href="#WeekFromDate">WeekFromDate( )</a> 
</p>

<p>
<a rel="up" href="#Z"> ^ --Z-- </a>
</p>

<!-- ================================= -->

<hr/><a name="Groups"></a><h2>Groups of functions</h2> 

<p>The functions available in the WinPCS system are organized in different groups as to purpose,
availability, and the DLL or subsystem where they are defined. In the following, a number of 
pages with collections of functions are given: </p>

<p>

<a href="#Text.20File.20reading.20functions"> 
    Text File reading functions </a>  <br/>

<a href="#In.2dline.20DDE.20client.20functions"> 
    In-line DDE client functions </a>  <br/>
</p>

<p>
<a rel="up" href="#Top"> ^ To the top</a>
<a rel="previous" href="#Top"> &lt; To the top</a>
<a rel="next" href="#Text.20File.20reading.20functions"> 
    Text File reading functions </a> 
</p>

<!-- ================================= -->

<hr/><a name="Text.20File.20reading.20functions"></a> 
<h2>Text File reading functions</h2>

<p>The following functions are available for general reading text files. 
Certain other functions, such as the <a href="#getinistring">getinistring( )</a> 
and <a href="#selectinistring">selectinistring( )</a> 
functions read .INI files, but the functions presented here can read any text files.</p>

<h3>Availability:</h3>
<p>The functions are available as part of the LCX DLLs so they can be used under 
any of the systems as well as standalone. </p>

<p>The documentation is UNDER CONSTRUCTION</p>

<h3>Functions:</h3>
<p>
<em>ident</em><b> = </b> <a href="#FiStartRead">FiStartRead</a> <b>(</b><em>path</em><b>)</b><br/>
<a href="#FiClose">FiClose</a> <b>(</b><em>ident</em><b>)</b><br/>
<em>character</em><b> = </b> <a href="#FiReadChar">FiReadChar</a> <b>(</b><em>ident</em><b>)</b><br/>
<em>text</em><b> = </b> <a href="#FiReadLine">FiReadLine</a> <b>(</b><em>ident</em><b>)</b><br/>
<em>text</em><b> = </b> <a href="#FiReadParagraph">FiReadParagraph</a> <b>(</b><em>ident </em><b>)</b><br/>
<em>set</em><b> = </b> <a href="#FiReadParagraphSet">FiReadParagraphSet</a> <b>(</b><em>ident</em><b>)</b><br/>
<em>text</em><b> = </b> <a href="#FiReadUntil">FiReadUntil</a> <b>(</b><em>ident</em><b>, </b><em>stop</em><b>)</b><br/>
<em>value</em><b> = </b> <a href="#FiSize">FiSize</a> <b>(</b><em>ident</em><b>)</b><br/>
<em>status</em><b> = </b> <a href="#FiStatus">FiStatus</a> <b>(</b><em>ident</em><b>) </b><br/>
</p>

<h3>How to use these functions:</h3>
<p>
The file's name may be established in whatever way is desired, such as for example
using <a href="#selectdialogf">selectdialogf( )</a> , 
<a href="#getinistring">getinistring( )</a> , <a href="#findexact">findexact( )</a> and 
<a href="#get">get( )</a> , or any other means. </p>


<p> Then the file is opened using 
<a href="#FiStartRead">FiStartRead( )</a> and the handle returned from this function is then saved
and used for subsequent calls in the other functions taking an argument <em>ident</em>.</p>

<p>Note that as this is part of the LCX function set,
the <a href="#ExpandPath">ExpandPath( )</a> function must be used on a file-name prior to passing it to 
<a href="#FiStartRead">FiStartRead( )</a> . </p>

<p>The various FiReadXXX functions can then be used to read the contents of the file:  </p>

<ul>
<li> <a href="#FiReadChar">FiReadChar( )</a> reads a single character. </li>

<li> <a href="#FiReadLine">FiReadLine( )</a> 
reads a whole line ending with a newline character. This endline character is not returned. The 
<a href="#csvtoset">csvtoset( )</a> function
may be used to convert the read-in line from a CSV file into a set, with specified quotes and separators.</li>

<li> <a href="#FiReadParagraph">FiReadParagraph( )</a> 
reads a number of lines in one go, and returns the line-break characters (check) until
a blank line is encountered. </li>

<li> <a href="#FiReadParagraphSet">FiReadParagraphSet( )</a> 
is similar, it returns the lines found as a set, each line to an element. If it is of interest to
separate some text into words, use the converttoset( ) function using the space character as the separator. </li>

<li> <a href="#FiReadUntil">FiReadUntil( )</a> 
returns whatever is in the file up to, but not includeing (check), the specicfied value
<em>stop</em>. </li>

</ul>

<p>On reaching the end of the file, the reading-functions will return blanks, and the function 
<a href="#FiStatus">FiStatus( )</a> 
will return 1 to indicate the end. 
<a href="#FiStatus">FiStatus( )</a> 
returns 0 when the file has more contents that can be read. </p>

<p>When finished reading the file, it should be closed, using
<a href="#FiClose">FiClose( )</a> 
</p>


<h3>See Also:</h3>
<p>
<a href="#getinistring">getinistring( )</a> <br/>
<a href="#csvtoset">csvtoset( )</a> <br/>
<a href="#ExpandPath">ExpandPath( )</a> <br/>
<a href="#FiClose">FiClose( )</a> <br/>
</p>


<!-- ================================= -->

<hr/><a name="In.2dline.20DDE.20client.20functions"></a> <h2>In-line DDE client functions</h2> 

<p>The <a href="#rundde">rundde( )</a> and <a href="#runddeA">runddeA( )</a> 
functions, which only were defined for 16-bit systems,
take callbacks for their actions. A more flexible 
approach is the in-line DDE, which is handled using the following functions:</p>

<h3>Functions:</h3>
<p>
<em>services</em> <b>=</b> <a href="#DDEsvclist">DDEsvclist</a> <b>( )</b><br/>
<em>hconv</em> <b>=</b> <a href="#DDEconnect">DDEconnect</a> <b>(</b><em>server</em><b>, </b><em>topic</em><b>)</b><br/>
<a href="#DDEdisconnect">DDEdisconnect</a> <b>(</b><em>hconv</em><b>)</b><br/>
<a href="#DDEexecute">DDEexecute</a> <b>(</b><em>hconv</em><b>, </b><em>command</em><b>)</b><br/>
<a href="#DDEpoke">DDEpoke</a> <b>(</b><em>hconv</em><b>, </b><em>address</em><b>, </b><em>value</em><b>)</b><br/>
<em>value</em> <b>=</b> <a href="#DDErequest">DDErequest</a> <b>(</b><em>hconv</em><b>, </b><em>address</em><b>, </b><em>converttabs</em><b>)</b><br/>
<em>status</em> <b>=</b> <a href="#DDEstatus">DDEstatus</a> <b>(</b><em>hconv</em><b>)</b><br/>
</p>

<h3>Other general functions of interest for use in DDE client code:</h3>
<p>
<a href="#invoke">invoke</a><b>(</b><em>commandline</em><b>)</b><br/>
<em>path</em><b> = </b> <a href="#GetPath">GetPath</a> <b>(</b><em>keyword</em><b>, </b><em>includebslash</em><b>)</b><br/>
<em>path</em><b> = </b> <a href="#RegPath">RegPath</a> <b>(</b><em>service</em><b>)</b><br/>
<em>set</em><b> = </b> <a href="#tabtoset">tabtoset</a> <b>(</b><em>data</em><b>, </b><em>sepchar</em><b>)</b><br/>
<em>set</em><b> = </b> <a href="#tabtoset">tabtoset</a> <b>(</b><em>data</em><b>)</b><br/>
<em>set</em><b> = </b> <a href="#csvtoset">csvtoset</a> <b>(</b><em>data</em><b>)</b><br/>
</p>

<!-- ================================= -->

<hr/><a name="Examples"></a> <h2>Examples</h2>

<!-- <a name="Odometer.20Example"></a> <h2>Odometer Example</h2> -->
<!-- <a name="Report.20Example"></a> <h2>Report Example</h2> -->
<!-- <a name="DDE.20server.20example"></a><h2>DDE server example</h2> -->

<p>
<br/><a href="#Odometer.20Example">Odometer Example</a>
<br/><a href="#Report.20Example">Report Example</a>
<br/><a href="dde.html#DDE.20server.20example">DDE server example</a>
</p>

<p>
Examples as parts of other sections:
Report-forall callback function 
Drag-drop function 
</p>


<!-- ================================= -->
<hr/><a name="Report.20Example"></a> <h2>Report Example</h2>

<p>The following function must be run from somewhere within WinPCS; the Report 
functions and database functions used are not available in the stand-alone execution 
utility, LCXT.</p>

<p> A table called ENGINST is read in its entirety and the results are placed in five fields in a 
Report, similar to what a selection in the Report Generator would give. This also uses 
the odometer to control premature exits from the loop.</p>

<pre>
TableLoop( )
{
    string fd, tagcount;
    string tag, eqt, table;
    string keyfield;
    string bs, initial;
    string mx, bx, Report;

    table = "ENGINST";
    keyfield = "RSERIAL";

    Report = RepCreate ("From ENGINST", "L", "", "", 
        makeset ("CI", "Number", 5), 
        makeset ("CI", "Name", 20), 
        makeset ("CI", "Description", 40), 
        makeset ("CI", "System", 5), 
        makeset ("CI", "Function", 5) ); 

    CounterHere (concat ("Scanning", table), 1);

    tagcount = 0;
    initial = 1;
    while (1)
    {
        if (initial)
        {
            bx = findfirst (table, keyfield);
            bs = setitem (bx, 0);
            initial = 0;
            /* The first record in the Report will already
                have been RepCordon( )ed. */
        }       
        else 
        {
            bs = fetchnext (table);
            if(bs == 0)
                RepCordon (1, Report);
        }

        if(bs != 0) { break ; }

        CounterStep ( );

        if(CounterCheck ( ) == 1)
        {
            break ;
        }

        /* Copy stuff to Report. */
        RepPut (-1, 0, get (table, "RSERIAL"), Report);
        RepPut(-1, 1, get(table, "TAG_NO"), Report);
        RepPut(-1, 2, get(table, "SERV_DESCR"), Report);
        RepPut(-1, 3, get(table, "SYSTEM_NO"), Report);
        RepPut(-1, 4, get(table, "EQUIP_TYPE"), Report);

        tagcount+=1;
    }
    CounterAway ( );
    RepRefresh (Report);
    return (tagcount);
}
</pre>


<!-- ================================= -->
<hr/><a name="ASCIITABLE"></a> <h2> Table of ASCII Codes</h2>

<p>In several places throughout WinPCS and the LCX macro system, there are references 
to the numerical values of characters. For example, there are such references in 
<a href="#Constants"> the section on "\xhh " codes </a>
and functions such as <a href="#ASCII"> ASCII( ) </a> and 
<a href="#ordinal"> ordinal( ) </a>. Other places are in WinPCS.INI and Trans' .X files. </p>

<p>The table here shows all the lower-8 bit characters in decimal, octal, and hexadecimal form. 
High-8 bit characters beyond 127 are more system-dependent, although these may be
specified as well. Look for the character table of the machine's operating system for these. </p>

<pre>
Char  Dec  Oct  Hex | Char  Dec  Oct  Hex | Char  Dec  Oct  Hex | Char Dec  Oct   Hex
===================================================================================================
(nul)   0 0000 0x00 | (sp)   32 0040 0x20 | @      64 0100 0x40 | `      96 0140 0x60
(soh)   1 0001 0x01 | !      33 0041 0x21 | A      65 0101 0x41 | a      97 0141 0x61
(stx)   2 0002 0x02 | "      34 0042 0x22 | B      66 0102 0x42 | b      98 0142 0x62
(etx)   3 0003 0x03 | #      35 0043 0x23 | C      67 0103 0x43 | c      99 0143 0x63
(eot)   4 0004 0x04 | $      36 0044 0x24 | D      68 0104 0x44 | d     100 0144 0x64
(enq)   5 0005 0x05 | %      37 0045 0x25 | E      69 0105 0x45 | e     101 0145 0x65
(ack)   6 0006 0x06 | &amp;      38 0046 0x26 | F      70 0106 0x46 | f     102 0146 0x66
(bel)   7 0007 0x07 | '      39 0047 0x27 | G      71 0107 0x47 | g     103 0147 0x67
(bs)    8 0010 0x08 | (      40 0050 0x28 | H      72 0110 0x48 | h     104 0150 0x68
(ht)    9 0011 0x09 | )      41 0051 0x29 | I      73 0111 0x49 | i     105 0151 0x69
(nl)   10 0012 0x0a | *      42 0052 0x2a | J      74 0112 0x4a | j     106 0152 0x6a
(vt)   11 0013 0x0b | +      43 0053 0x2b | K      75 0113 0x4b | k     107 0153 0x6b
(np)   12 0014 0x0c | ,      44 0054 0x2c | L      76 0114 0x4c | l     108 0154 0x6c
(cr)   13 0015 0x0d | -      45 0055 0x2d | M      77 0115 0x4d | m     109 0155 0x6d
(so)   14 0016 0x0e | .      46 0056 0x2e | N      78 0116 0x4e | n     110 0156 0x6e
(si)   15 0017 0x0f | /      47 0057 0x2f | O      79 0117 0x4f | o     111 0157 0x6f
(dle)  16 0020 0x10 | 0      48 0060 0x30 | P      80 0120 0x50 | p     112 0160 0x70
(dc1)  17 0021 0x11 | 1      49 0061 0x31 | Q      81 0121 0x51 | q     113 0161 0x71
(dc2)  18 0022 0x12 | 2      50 0062 0x32 | R      82 0122 0x52 | r     114 0162 0x72
(dc3)  19 0023 0x13 | 3      51 0063 0x33 | S      83 0123 0x53 | s     115 0163 0x73
(dc4)  20 0024 0x14 | 4      52 0064 0x34 | T      84 0124 0x54 | t     116 0164 0x74
(nak)  21 0025 0x15 | 5      53 0065 0x35 | U      85 0125 0x55 | u     117 0165 0x75
(syn)  22 0026 0x16 | 6      54 0066 0x36 | V      86 0126 0x56 | v     118 0166 0x76
(etb)  23 0027 0x17 | 7      55 0067 0x37 | W      87 0127 0x57 | w     119 0167 0x77
(can)  24 0030 0x18 | 8      56 0070 0x38 | X      88 0130 0x58 | x     120 0170 0x78
(em)   25 0031 0x19 | 9      57 0071 0x39 | Y      89 0131 0x59 | y     121 0171 0x79
(sub)  26 0032 0x1a | :      58 0072 0x3a | Z      90 0132 0x5a | z     122 0172 0x7a
(esc)  27 0033 0x1b | ;      59 0073 0x3b | [      91 0133 0x5b | {     123 0173 0x7b
(fs)   28 0034 0x1c | &lt;      60 0074 0x3c | \      92 0134 0x5c | |     124 0174 0x7c
(gs)   29 0035 0x1d | =      61 0075 0x3d | ]      93 0135 0x5d | }     125 0175 0x7d
(rs)   30 0036 0x1e | &gt;      62 0076 0x3e | ^      94 0136 0x5e | ~     126 0176 0x7e
(us)   31 0037 0x1f | ?      63 0077 0x3f | _      95 0137 0x5f | (del) 127 0177 0x7f

</pre>


<!-- ================================= -->
<!-- <hr/><a name="Endpoint"></a> <h2> Endnotes </h2> -->

<hr/><a name="Endpoint"></a>
WinPCS Macro Help File (KRL 2013-02-13)

<!-- 

FindRecent ??? 82
OnSetDisplayNewStatus ??  98
PasswordDlg 37

SYNFARE 114
Vtrans 122

copyconnectall 76
fetchnextdist 111
fetchprevdist 112
fieldnames 105

propaction 110
readpropertyset 113

selectfromcsv 139

traceconnrun 117
traceconnstart 116
traceconnstop 118

VREP 32c: 
Memreport = ServerReport(function, arg, arg ...)
    calls the server function(arg, arg...)
    The server must create a report using the
    RepServe(fieldcount)
    fill this with RepCordon() and RepPut() and send the report-structure back
    This will then reappear in the client, and the Rep() functions may 
    be used there to read the data. 

Server side: TMGT 32s:
    Memreport = ConSelect(table, fieldset, filterexpr, leftset, rightset)

    RepClose(Memreport)
    RepControl(command, Report)
    RepCordon(count, Report)
    item = RepGet(row, column, Report)
    RepInfo(code, Report)
    RepPut(row, column, value, Report)
    Memreport = RepServe(fieldcount)
        
Add docs on:
	text = ReadAll(file)
	juldayadaptive()

	return-values from web-functions:
		$filecontents(path)

-->

<p>
      <a href="http://validator.w3.org/check?uri=referer">
        <img src="http://www.w3.org/Icons/valid-xhtml10"
          alt="Valid XHTML 1.0 Transitional" height="31" width="88" /></a>
</p>


</body>
</html>

